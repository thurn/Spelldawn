// Copyright Â© Spelldawn 2021-present

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//    https://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package sd;
option csharp_namespace = "Spelldawn.Protos";

import "node.proto";

message CardIcon {
  sd.SpriteAddress background = 1;
  string text = 2;
  bool shown_in_arena = 3;
}

message CardIcons {
  CardIcon top_left_icon = 12;
  CardIcon top_right_icon = 13;
  CardIcon bottom_right_icon = 14;
  CardIcon bottom_left_icon = 15;
  CardIcon center_icon = 16;
}

message CardTitle {
  string text = 1;
}

message RulesText {
  string text = 1;
}

message RevealedCardView {
  sd.SpriteAddress card_back = 1;
  sd.SpriteAddress card_frame = 2;
  sd.SpriteAddress webbing = 3;
  sd.SpriteAddress jewel = 4;
  sd.SpriteAddress image_background = 5;
  sd.SpriteAddress image = 6;
  CardTitle title = 7;
  RulesText rules_text = 8;
  bool can_play = 9;
  sd.SpriteAddress arena_frame = 10;
  CardIcons card_icons = 11;
}

message HiddenCardView {
  sd.SpriteAddress card_back = 1;
  CardIcons card_icons = 2;
  sd.SpriteAddress arena_frame = 3;
}

message CardView {
  int32 card_id = 1;
  oneof card {
    RevealedCardView revealed_card = 2;
    HiddenCardView hidden_card = 3;
  }
}

message HandView {
  repeated CardView cards = 1;
}

message DiscardPileView {
  repeated CardView cards = 1;
}

message PlayerInfo {
  string name = 1;
  sd.SpriteAddress portrait = 2;
  CardView identity_card = 3;
}

message ManaView {
  int32 amount = 1;
}

message ScoreView {
  int32 score = 1;
  repeated CardView scored_cards = 2;
}

message RoomIcon {
  sd.SpriteAddress room_icon = 1;
}

message RoomView {
  RoomIcon room_icon = 1;
  repeated CardView projects = 2;
  repeated CardView minions = 3;
  repeated CardView annexes = 4;
}

message ArenaView {
  /**
   * If true, render rooms at the bottom of the screen, if false, render items
   * at the bottom.
   */
  bool overlord_perspective = 1;
  repeated RoomView rooms = 2;
  repeated CardView weapons = 3;
  repeated CardView armor = 4;
  repeated CardView artifacts = 5;
}

message ActionTrackerView {
  int32 available_action_count = 1;
}

message PlayerView {
  PlayerInfo player_info = 1;
  ScoreView score = 2;
  HandView hand = 3;
  ManaView mana = 4;
  DiscardPileView discard_pile = 5;
  ActionTrackerView action_tracker = 6;
}

message GameView {
  PlayerView user = 1;
  PlayerView opponent = 2;
  ArenaView arena = 3;
}