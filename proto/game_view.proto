// Copyright Â© Spelldawn 2021-present

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//    https://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package sd;
option csharp_namespace = "Spelldawn.Protos";

import "masonry.proto";
import "game_primitives.proto";

message CardIcon {
  sd.SpriteAddress background = 1;
  string text = 2;
  bool shown_in_arena = 3;
}

message CardIcons {
  CardIcon top_left_icon = 12;
  CardIcon top_right_icon = 13;
  CardIcon bottom_right_icon = 14;
  CardIcon bottom_left_icon = 15;
  CardIcon center_icon = 16;
}

message CardTitle {
  string text = 1;
}

message RulesText {
  string text = 1;
}

message ValidTargets {
  repeated CardTarget targets = 1;
}

message ValidRooms {
  repeated RoomId rooms = 2;
}

message PlayAsItem {
}

message AwaitResponse {
}

message CardTargeting {
  oneof targeting {
    /** Pick one of these targets and then animate to the display area when played. */
    ValidTargets pick_target = 1;

    /** Add this card to a room when played. */
    ValidRooms play_in_room = 2;

    /** Add this card to the items in the arena when played */
    PlayAsItem play_as_item = 3;

    /** Animate this card to the 'display' area when played */
    AwaitResponse await_response = 4;
  }
}

/** How to determine whether the card can be played. */
enum CanPlay {
  CAN_PLAY_UNSPECIFIED = 0;

  /** The card can be played if mana & actions are available. */
  CAN_PLAY_DEFAULT = 1;

  /** Never display this card optimistically as a valid play */
  CAN_PLAY_NO = 2;

  /** Always display this card optimistically as a valid play */
  CAN_PLAY_YES = 3;
}

message CardCost {
  CanPlay can_play = 1;
  int32 mana_cost = 2;
  int32 action_cost = 3;
}

message RevealedCardView {
  sd.SpriteAddress card_frame = 1;
  sd.SpriteAddress title_background = 2;
  sd.SpriteAddress jewel = 3;
  sd.SpriteAddress image_background = 4;
  sd.SpriteAddress image = 5;
  CardTitle title = 6;
  RulesText rules_text = 7;
  CardTargeting targeting = 8;
  CardCost cost = 9;
}

/** Where in the arena should this card be displayed? */
enum ArenaPosition {
  ARENA_POSITION_UNSPECIFIED = 0;
  ARENA_POSITION_IN_ROOM = 1;
  ARENA_POSITION_ROOM_DEFENDER = 2;
  ARENA_POSITION_ITEMS_LEFT = 3;
  ARENA_POSITION_ITEMS_CENTER = 4;
  ARENA_POSITION_ITEMS_RIGHT = 5;
}

message CardView {
  CardId card_id = 1;
  ArenaPosition arena_position = 2;
  sd.SpriteAddress card_back = 3;
  CardIcons card_icons = 4;
  sd.SpriteAddress arena_frame = 5;
  RevealedCardView revealed_card = 6;
}

message HandView {
  repeated CardView cards = 1;
}

message DiscardPileView {
  repeated CardView cards = 1;
}

message PlayerInfo {
  string name = 1;
  sd.SpriteAddress portrait = 2;

  /**
   * Identifies the player's unique powers. The back for this card is used
   * as the card back for all of this player's cards. The CardIds of the
   * user's and the opponent's identity cards are conventionally 1 and 2.
   */
  CardView identity_card = 3;
}

message ManaView {
  int32 amount = 1;
}

message ScoreView {
  int32 score = 1;
  repeated CardView scored_cards = 2;
}

message RoomInfo {
  sd.SpriteAddress room_icon = 1;
}

message RoomView {
  RoomId room_id = 1;
  RoomInfo room_info = 2;
  repeated CardView cards = 3;
}

message ArenaView {
  /**
   * If true, render rooms at the bottom of the screen, if false, render items
   * at the bottom.
   */
  bool overlord_perspective = 1;

  repeated RoomView rooms = 2;
  repeated CardView items = 3;
}

message ActionTrackerView {
  int32 available_action_count = 1;
}

message DeckView {
}

message PlayerView {
  PlayerInfo player_info = 1;
  ScoreView score = 2;
  HandView hand = 3;
  ManaView mana = 4;
  DiscardPileView discard_pile = 5;
  ActionTrackerView action_tracker = 6;
  DeckView deck = 7;
}

message GameView {
  PlayerView user = 1;
  PlayerView opponent = 2;
  ArenaView arena = 3;
}
