// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: node.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spelldawn.Protos {

  /// <summary>Holder for reflection information generated from node.proto</summary>
  public static partial class NodeReflection {

    #region Descriptor
    /// <summary>File descriptor for node.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NodeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgpub2RlLnByb3RvEgJzZCJACgVDb2xvchILCgNyZWQYASABKAISDQoFZ3Jl",
            "ZW4YAiABKAISDAoEYmx1ZRgDIAEoAhINCgVhbHBoYRgEIAEoAiIgCg1TcHJp",
            "dGVBZGRyZXNzEg8KB2FkZHJlc3MYASABKAkiHgoLRm9udEFkZHJlc3MSDwoH",
            "YWRkcmVzcxgBIAEoCSIfCgdWZWN0b3IyEgkKAXgYASABKAISCQoBeRgCIAEo",
            "AiIqCgdWZWN0b3IzEgkKAXgYASABKAISCQoBeRgCIAEoAhIJCgF6GAMgASgC",
            "IjUKBkxlbmd0aBIcCgR1bml0GAEgASgOMg4uc2QuTGVuZ3RoVW5pdBINCgV2",
            "YWx1ZRgCIAEoAiJ3CgtMZW5ndGhHcm91cBIXCgN0b3AYASABKAsyCi5zZC5M",
            "ZW5ndGgSGQoFcmlnaHQYAiABKAsyCi5zZC5MZW5ndGgSGgoGYm90dG9tGAMg",
            "ASgLMgouc2QuTGVuZ3RoEhgKBGxlZnQYBCABKAsyCi5zZC5MZW5ndGgicwoL",
            "Qm9yZGVyQ29sb3ISFgoDdG9wGAEgASgLMgkuc2QuQ29sb3ISGAoFcmlnaHQY",
            "AiABKAsyCS5zZC5Db2xvchIZCgZib3R0b20YAyABKAsyCS5zZC5Db2xvchIX",
            "CgRsZWZ0GAQgASgLMgkuc2QuQ29sb3IijgEKDEJvcmRlclJhZGl1cxIcCgh0",
            "b3BfbGVmdBgBIAEoCzIKLnNkLkxlbmd0aBIdCgl0b3BfcmlnaHQYAiABKAsy",
            "Ci5zZC5MZW5ndGgSIAoMYm90dG9tX3JpZ2h0GAMgASgLMgouc2QuTGVuZ3Ro",
            "Eh8KC2JvdHRvbV9sZWZ0GAQgASgLMgouc2QuTGVuZ3RoIhkKBlJvdGF0ZRIP",
            "CgdkZWdyZWVzGAEgASgCIkQKCVRyYW5zbGF0ZRIVCgF4GAEgASgLMgouc2Qu",
            "TGVuZ3RoEhUKAXkYAiABKAsyCi5zZC5MZW5ndGgSCQoBehgDIAEoAiIkCgVT",
            "Y2FsZRIbCgZhbW91bnQYASABKAsyCy5zZC5WZWN0b3IzIlgKClRleHRTaGFk",
            "b3cSGwoGb2Zmc2V0GAEgASgLMgsuc2QuVmVjdG9yMhITCgtibHVyX3JhZGl1",
            "cxgCIAEoAhIYCgVjb2xvchgDIAEoCzIJLnNkLkNvbG9yIiEKCVRpbWVWYWx1",
            "ZRIUCgxtaWxsaXNlY29uZHMYASABKAIi7A4KBVN0eWxlEiAKDWFsaWduX2Nv",
            "bnRlbnQYASABKA4yCS5zZC5BbGlnbhIeCgthbGlnbl9pdGVtcxgCIAEoDjIJ",
            "LnNkLkFsaWduEh0KCmFsaWduX3NlbGYYAyABKA4yCS5zZC5BbGlnbhIjChBi",
            "YWNrZ3JvdW5kX2NvbG9yGAQgASgLMgkuc2QuQ29sb3ISKwoQYmFja2dyb3Vu",
            "ZF9pbWFnZRgFIAEoCzIRLnNkLlNwcml0ZUFkZHJlc3MSJQoMYm9yZGVyX2Nv",
            "bG9yGAYgASgLMg8uc2QuQm9yZGVyQ29sb3ISJwoNYm9yZGVyX3JhZGl1cxgH",
            "IAEoCzIQLnNkLkJvcmRlclJhZGl1cxIlCgxib3JkZXJfd2lkdGgYCCABKAsy",
            "Dy5zZC5MZW5ndGhHcm91cBIeCgVpbnNldBgJIAEoCzIPLnNkLkxlbmd0aEdy",
            "b3VwEhgKBWNvbG9yGAogASgLMgkuc2QuQ29sb3ISIQoHZGlzcGxheRgLIAEo",
            "DjIQLnNkLkRpc3BsYXlTdHlsZRIeCgpmbGV4X2Jhc2lzGAwgASgLMgouc2Qu",
            "TGVuZ3RoEikKDmZsZXhfZGlyZWN0aW9uGA0gASgOMhEuc2QuRmxleERpcmVj",
            "dGlvbhIRCglmbGV4X2dyb3cYDiABKAISEwoLZmxleF9zaHJpbmsYDyABKAIS",
            "GgoEd3JhcBgQIAEoDjIMLnNkLkZsZXhXcmFwEh0KCWZvbnRfc2l6ZRgRIAEo",
            "CzIKLnNkLkxlbmd0aBIaCgZoZWlnaHQYEiABKAsyCi5zZC5MZW5ndGgSJAoP",
            "anVzdGlmeV9jb250ZW50GBMgASgOMgsuc2QuSnVzdGlmeRIiCg5sZXR0ZXJf",
            "c3BhY2luZxgUIAEoCzIKLnNkLkxlbmd0aBIfCgZtYXJnaW4YFSABKAsyDy5z",
            "ZC5MZW5ndGhHcm91cBIeCgptYXhfaGVpZ2h0GBYgASgLMgouc2QuTGVuZ3Ro",
            "Eh0KCW1heF93aWR0aBgXIAEoCzIKLnNkLkxlbmd0aBIeCgptaW5faGVpZ2h0",
            "GBggASgLMgouc2QuTGVuZ3RoEh0KCW1pbl93aWR0aBgZIAEoCzIKLnNkLkxl",
            "bmd0aBIPCgdvcGFjaXR5GBogASgCEh4KCG92ZXJmbG93GBsgASgOMgwuc2Qu",
            "T3ZlcmZsb3cSIAoHcGFkZGluZxgcIAEoCzIPLnNkLkxlbmd0aEdyb3VwEiIK",
            "CHBvc2l0aW9uGB0gASgOMhAuc2QuRmxleFBvc2l0aW9uEhoKBnJvdGF0ZRge",
            "IAEoCzIKLnNkLlJvdGF0ZRIYCgVzY2FsZRgfIAEoCzIJLnNkLlNjYWxlEicK",
            "DXRleHRfb3ZlcmZsb3cYICABKA4yEC5zZC5UZXh0T3ZlcmZsb3cSIwoLdGV4",
            "dF9zaGFkb3cYISABKAsyDi5zZC5UZXh0U2hhZG93EicKEHRyYW5zZm9ybV9v",
            "cmlnaW4YIiABKAsyDS5zZC5UcmFuc2xhdGUSJwoQdHJhbnNpdGlvbl9kZWxh",
            "eRgjIAEoCzINLnNkLlRpbWVWYWx1ZRIqChN0cmFuc2l0aW9uX2R1cmF0aW9u",
            "GCQgASgLMg0uc2QuVGltZVZhbHVlEhsKE3RyYW5zaXRpb25fcHJvcGVydHkY",
            "JSABKAkSLgoWdHJhbnNpdGlvbl9lYXNpbmdfbW9kZRgmIAEoDjIOLnNkLkVh",
            "c2luZ01vZGUSIAoJdHJhbnNsYXRlGCcgASgLMg0uc2QuVHJhbnNsYXRlEi4K",
            "G2JhY2tncm91bmRfaW1hZ2VfdGludF9jb2xvchgoIAEoCzIJLnNkLkNvbG9y",
            "EiwKEGltYWdlX3NjYWxlX21vZGUYKSABKA4yEi5zZC5JbWFnZVNjYWxlTW9k",
            "ZRIdCgRmb250GCogASgLMg8uc2QuRm9udEFkZHJlc3MSIQoKZm9udF9zdHls",
            "ZRgrIAEoDjINLnNkLkZvbnRTdHlsZRIuChFvdmVyZmxvd19jbGlwX2JveBgs",
            "IAEoDjITLnNkLk92ZXJmbG93Q2xpcEJveBIlChFwYXJhZ3JhcGhfc3BhY2lu",
            "ZxgtIAEoCzIKLnNkLkxlbmd0aBIkCgtpbWFnZV9zbGljZRguIAEoCzIPLnNk",
            "Lkxlbmd0aEdyb3VwEiEKCnRleHRfYWxpZ24YLyABKA4yDS5zZC5UZXh0QWxp",
            "Z24SJQoSdGV4dF9vdXRsaW5lX2NvbG9yGDAgASgLMgkuc2QuQ29sb3ISGgoS",
            "dGV4dF9vdXRsaW5lX3dpZHRoGDEgASgCEjgKFnRleHRfb3ZlcmZsb3dfcG9z",
            "aXRpb24YMiABKA4yGC5zZC5UZXh0T3ZlcmZsb3dQb3NpdGlvbhIiCgp2aXNp",
            "YmlsaXR5GDMgASgOMg4uc2QuVmlzaWJpbGl0eRIjCgt3aGl0ZV9zcGFjZRg0",
            "IAEoDjIOLnNkLldoaXRlU3BhY2USGQoFd2lkdGgYNSABKAsyCi5zZC5MZW5n",
            "dGgSIAoMd29yZF9zcGFjaW5nGDYgASgLMgouc2QuTGVuZ3RoIi4KBFRleHQS",
            "GAoFc3R5bGUYASABKAsyCS5zZC5TdHlsZRIMCgR0ZXh0GAIgASgJIj8KB0Zs",
            "ZXhib3gSGAoFc3R5bGUYASABKAsyCS5zZC5TdHlsZRIaCghjaGlsZHJlbhgC",
            "IAMoCzIILnNkLk5vZGUiSAoETm9kZRIeCgdmbGV4Ym94GAEgASgLMgsuc2Qu",
            "RmxleGJveEgAEhgKBHRleHQYAiABKAsyCC5zZC5UZXh0SABCBgoEbm9kZSp9",
            "CgVBbGlnbhIVChFBTElHTl9VTlNQRUNJRklFRBAAEg4KCkFMSUdOX0FVVE8Q",
            "ARIUChBBTElHTl9GTEVYX1NUQVJUEAISEAoMQUxJR05fQ0VOVEVSEAMSEgoO",
            "QUxJR05fRkxFWF9FTkQQBBIRCg1BTElHTl9TVFJFVENIEAUqXQoMRGlzcGxh",
            "eVN0eWxlEh0KGURJU1BMQVlfU1RZTEVfVU5TUEVDSUZJRUQQABIWChJESVNQ",
            "TEFZX1NUWUxFX0ZMRVgQARIWChJESVNQTEFZX1NUWUxFX05PTkUQAiqlAQoN",
            "RmxleERpcmVjdGlvbhIeChpGTEVYX0RJUkVDVElPTl9VTlNQRUNJRklFRBAA",
            "EhkKFUZMRVhfRElSRUNUSU9OX0NPTFVNThABEiEKHUZMRVhfRElSRUNUSU9O",
            "X0NPTFVNTl9SRVZFUlNFEAISFgoSRkxFWF9ESVJFQ1RJT05fUk9XEAMSHgoa",
            "RkxFWF9ESVJFQ1RJT05fUk9XX1JFVkVSU0UQBCpsCghGbGV4V3JhcBIZChVG",
            "TEVYX1dSQVBfVU5TUEVDSUZJRUQQABIVChFGTEVYX1dSQVBfTk9fV1JBUBAB",
            "EhIKDkZMRVhfV1JBUF9XUkFQEAISGgoWRkxFWF9XUkFQX1dSQVBfUkVWRVJT",
            "RRADKpkBCgdKdXN0aWZ5EhcKE0pVU1RJRllfVU5TUEVDSUZJRUQQABIWChJK",
            "VVNUSUZZX0ZMRVhfU1RBUlQQARISCg5KVVNUSUZZX0NFTlRFUhACEhQKEEpV",
            "U1RJRllfRkxFWF9FTkQQAxIZChVKVVNUSUZZX1NQQUNFX0JFVFdFRU4QBBIY",
            "ChRKVVNUSUZZX1NQQUNFX0FST1VORBAFKk8KCE92ZXJmbG93EhgKFE9WRVJG",
            "TE9XX1VOU1BFQ0lGSUVEEAASFAoQT1ZFUkZMT1dfVklTSUJMRRABEhMKD09W",
            "RVJGTE9XX0hJRERFThACKmUKDEZsZXhQb3NpdGlvbhIdChlGTEVYX1BPU0lU",
            "SU9OX1VOU1BFQ0lGSUVEEAASGgoWRkxFWF9QT1NJVElPTl9SRUxBVElWRRAB",
            "EhoKFkZMRVhfUE9TSVRJT05fQUJTT0xVVEUQAiphCgxUZXh0T3ZlcmZsb3cS",
            "HQoZVEVYVF9PVkVSRkxPV19VTlNQRUNJRklFRBAAEhYKElRFWFRfT1ZFUkZM",
            "T1dfQ0xJUBABEhoKFlRFWFRfT1ZFUkZMT1dfRUxMSVBTSVMQAirzBQoKRWFz",
            "aW5nTW9kZRIbChdFQVNJTkdfTU9ERV9VTlNQRUNJRklFRBAAEhQKEEVBU0lO",
            "R19NT0RFX0VBU0UQARIXChNFQVNJTkdfTU9ERV9FQVNFX0lOEAISGAoURUFT",
            "SU5HX01PREVfRUFTRV9PVVQQAxIbChdFQVNJTkdfTU9ERV9FQVNFX0lOX09V",
            "VBAEEhYKEkVBU0lOR19NT0RFX0xJTkVBUhAFEhwKGEVBU0lOR19NT0RFX0VB",
            "U0VfSU5fU0lORRAGEh0KGUVBU0lOR19NT0RFX0VBU0VfT1VUX1NJTkUQBxIg",
            "ChxFQVNJTkdfTU9ERV9FQVNFX0lOX09VVF9TSU5FEAgSHQoZRUFTSU5HX01P",
            "REVfRUFTRV9JTl9DVUJJQxAJEh4KGkVBU0lOR19NT0RFX0VBU0VfT1VUX0NV",
            "QklDEAoSIQodRUFTSU5HX01PREVfRUFTRV9JTl9PVVRfQ1VCSUMQCxIcChhF",
            "QVNJTkdfTU9ERV9FQVNFX0lOX0NJUkMQDBIdChlFQVNJTkdfTU9ERV9FQVNF",
            "X09VVF9DSVJDEA0SIAocRUFTSU5HX01PREVfRUFTRV9JTl9PVVRfQ0lSQxAO",
            "Eh8KG0VBU0lOR19NT0RFX0VBU0VfSU5fRUxBU1RJQxAPEiAKHEVBU0lOR19N",
            "T0RFX0VBU0VfT1VUX0VMQVNUSUMQEBIjCh9FQVNJTkdfTU9ERV9FQVNFX0lO",
            "X09VVF9FTEFTVElDEBESHAoYRUFTSU5HX01PREVfRUFTRV9JTl9CQUNLEBIS",
            "HQoZRUFTSU5HX01PREVfRUFTRV9PVVRfQkFDSxATEiAKHEVBU0lOR19NT0RF",
            "X0VBU0VfSU5fT1VUX0JBQ0sQFBIeChpFQVNJTkdfTU9ERV9FQVNFX0lOX0JP",
            "VU5DRRAVEh8KG0VBU0lOR19NT0RFX0VBU0VfT1VUX0JPVU5DRRAWEiIKHkVB",
            "U0lOR19NT0RFX0VBU0VfSU5fT1VUX0JPVU5DRRAXKqABCg5JbWFnZVNjYWxl",
            "TW9kZRIgChxJTUFHRV9TQ0FMRV9NT0RFX1VOU1BFQ0lGSUVEEAASJAogSU1B",
            "R0VfU0NBTEVfTU9ERV9TVFJFVENIX1RPX0ZJTEwQARIjCh9JTUFHRV9TQ0FM",
            "RV9NT0RFX1NDQUxFX0FORF9DUk9QEAISIQodSU1BR0VfU0NBTEVfTU9ERV9T",
            "Q0FMRV9UT19GSVQQAyqKAQoJRm9udFN0eWxlEhoKFkZPTlRfU1RZTEVfVU5T",
            "UEVDSUZJRUQQABIVChFGT05UX1NUWUxFX05PUk1BTBABEhMKD0ZPTlRfU1RZ",
            "TEVfQk9MRBACEhUKEUZPTlRfU1RZTEVfSVRBTElDEAMSHgoaRk9OVF9TVFlM",
            "RV9CT0xEX0FORF9JVEFMSUMQBCp6Cg9PdmVyZmxvd0NsaXBCb3gSIQodT1ZF",
            "UkZMT1dfQ0xJUF9CT1hfVU5TUEVDSUZJRUQQABIhCh1PVkVSRkxPV19DTElQ",
            "X0JPWF9QQURESU5HX0JPWBABEiEKHU9WRVJGTE9XX0NMSVBfQk9YX0NPTlRF",
            "TlRfQk9YEAIqpgIKCVRleHRBbGlnbhIaChZURVhUX0FMSUdOX1VOU1BFQ0lG",
            "SUVEEAASGQoVVEVYVF9BTElHTl9VUFBFUl9MRUZUEAESGwoXVEVYVF9BTElH",
            "Tl9VUFBFUl9DRU5URVIQAhIaChZURVhUX0FMSUdOX1VQUEVSX1JJR0hUEAMS",
            "GgoWVEVYVF9BTElHTl9NSURETEVfTEVGVBAEEhwKGFRFWFRfQUxJR05fTUlE",
            "RExFX0NFTlRFUhAFEhsKF1RFWFRfQUxJR05fTUlERExFX1JJR0hUEAYSGQoV",
            "VEVYVF9BTElHTl9MT1dFUl9MRUZUEAcSGwoXVEVYVF9BTElHTl9MT1dFUl9D",
            "RU5URVIQCBIaChZURVhUX0FMSUdOX0xPV0VSX1JJR0hUEAkqowEKFFRleHRP",
            "dmVyZmxvd1Bvc2l0aW9uEiYKIlRFWFRfT1ZFUkZMT1dfUE9TSVRJT05fVU5T",
            "UEVDSUZJRUQQABIeChpURVhUX09WRVJGTE9XX1BPU0lUSU9OX0VORBABEiAK",
            "HFRFWFRfT1ZFUkZMT1dfUE9TSVRJT05fU1RBUlQQAhIhCh1URVhUX09WRVJG",
            "TE9XX1BPU0lUSU9OX01JRERMRRADKlcKClZpc2liaWxpdHkSGgoWVklTSUJJ",
            "TElUWV9VTlNQRUNJRklFRBAAEhYKElZJU0lCSUxJVFlfVklTSUJMRRABEhUK",
            "EVZJU0lCSUxJVFlfSElEREVuEAIqWgoKV2hpdGVTcGFjZRIbChdXSElURV9T",
            "UEFDRV9VTlNQRUNJRklFRBAAEhYKEldISVRFX1NQQUNFX05PUk1BTBABEhcK",
            "E1dISVRFX1NQQUNFX05PX1dSQVAQAipcCgpMZW5ndGhVbml0EhsKF0xFTkdU",
            "SF9VTklUX1VOU1BFQ0lGSUVEEAASFQoRTEVOR1RIX1VOSVRfUElYRUwQARIa",
            "ChZMRU5HVEhfVU5JVF9QRVJDRU5UQUdFEAJCE6oCEFNwZWxsZGF3bi5Qcm90",
            "b3NiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Spelldawn.Protos.Align), typeof(global::Spelldawn.Protos.DisplayStyle), typeof(global::Spelldawn.Protos.FlexDirection), typeof(global::Spelldawn.Protos.FlexWrap), typeof(global::Spelldawn.Protos.Justify), typeof(global::Spelldawn.Protos.Overflow), typeof(global::Spelldawn.Protos.FlexPosition), typeof(global::Spelldawn.Protos.TextOverflow), typeof(global::Spelldawn.Protos.EasingMode), typeof(global::Spelldawn.Protos.ImageScaleMode), typeof(global::Spelldawn.Protos.FontStyle), typeof(global::Spelldawn.Protos.OverflowClipBox), typeof(global::Spelldawn.Protos.TextAlign), typeof(global::Spelldawn.Protos.TextOverflowPosition), typeof(global::Spelldawn.Protos.Visibility), typeof(global::Spelldawn.Protos.WhiteSpace), typeof(global::Spelldawn.Protos.LengthUnit), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.Color), global::Spelldawn.Protos.Color.Parser, new[]{ "Red", "Green", "Blue", "Alpha" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.SpriteAddress), global::Spelldawn.Protos.SpriteAddress.Parser, new[]{ "Address" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.FontAddress), global::Spelldawn.Protos.FontAddress.Parser, new[]{ "Address" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.Vector2), global::Spelldawn.Protos.Vector2.Parser, new[]{ "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.Vector3), global::Spelldawn.Protos.Vector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.Length), global::Spelldawn.Protos.Length.Parser, new[]{ "Unit", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.LengthGroup), global::Spelldawn.Protos.LengthGroup.Parser, new[]{ "Top", "Right", "Bottom", "Left" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.BorderColor), global::Spelldawn.Protos.BorderColor.Parser, new[]{ "Top", "Right", "Bottom", "Left" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.BorderRadius), global::Spelldawn.Protos.BorderRadius.Parser, new[]{ "TopLeft", "TopRight", "BottomRight", "BottomLeft" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.Rotate), global::Spelldawn.Protos.Rotate.Parser, new[]{ "Degrees" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.Translate), global::Spelldawn.Protos.Translate.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.Scale), global::Spelldawn.Protos.Scale.Parser, new[]{ "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.TextShadow), global::Spelldawn.Protos.TextShadow.Parser, new[]{ "Offset", "BlurRadius", "Color" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.TimeValue), global::Spelldawn.Protos.TimeValue.Parser, new[]{ "Milliseconds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.Style), global::Spelldawn.Protos.Style.Parser, new[]{ "AlignContent", "AlignItems", "AlignSelf", "BackgroundColor", "BackgroundImage", "BorderColor", "BorderRadius", "BorderWidth", "Inset", "Color", "Display", "FlexBasis", "FlexDirection", "FlexGrow", "FlexShrink", "Wrap", "FontSize", "Height", "JustifyContent", "LetterSpacing", "Margin", "MaxHeight", "MaxWidth", "MinHeight", "MinWidth", "Opacity", "Overflow", "Padding", "Position", "Rotate", "Scale", "TextOverflow", "TextShadow", "TransformOrigin", "TransitionDelay", "TransitionDuration", "TransitionProperty", "TransitionEasingMode", "Translate", "BackgroundImageTintColor", "ImageScaleMode", "Font", "FontStyle", "OverflowClipBox", "ParagraphSpacing", "ImageSlice", "TextAlign", "TextOutlineColor", "TextOutlineWidth", "TextOverflowPosition", "Visibility", "WhiteSpace", "Width", "WordSpacing" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.Text), global::Spelldawn.Protos.Text.Parser, new[]{ "Style", "Text_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.Flexbox), global::Spelldawn.Protos.Flexbox.Parser, new[]{ "Style", "Children" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.Node), global::Spelldawn.Protos.Node.Parser, new[]{ "Flexbox", "Text" }, new[]{ "Node" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Align {
    [pbr::OriginalName("ALIGN_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("ALIGN_AUTO")] Auto = 1,
    [pbr::OriginalName("ALIGN_FLEX_START")] FlexStart = 2,
    [pbr::OriginalName("ALIGN_CENTER")] Center = 3,
    [pbr::OriginalName("ALIGN_FLEX_END")] FlexEnd = 4,
    [pbr::OriginalName("ALIGN_STRETCH")] Stretch = 5,
  }

  public enum DisplayStyle {
    [pbr::OriginalName("DISPLAY_STYLE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("DISPLAY_STYLE_FLEX")] Flex = 1,
    [pbr::OriginalName("DISPLAY_STYLE_NONE")] None = 2,
  }

  public enum FlexDirection {
    [pbr::OriginalName("FLEX_DIRECTION_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("FLEX_DIRECTION_COLUMN")] Column = 1,
    [pbr::OriginalName("FLEX_DIRECTION_COLUMN_REVERSE")] ColumnReverse = 2,
    [pbr::OriginalName("FLEX_DIRECTION_ROW")] Row = 3,
    [pbr::OriginalName("FLEX_DIRECTION_ROW_REVERSE")] RowReverse = 4,
  }

  public enum FlexWrap {
    [pbr::OriginalName("FLEX_WRAP_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("FLEX_WRAP_NO_WRAP")] NoWrap = 1,
    [pbr::OriginalName("FLEX_WRAP_WRAP")] Wrap = 2,
    [pbr::OriginalName("FLEX_WRAP_WRAP_REVERSE")] WrapReverse = 3,
  }

  public enum Justify {
    [pbr::OriginalName("JUSTIFY_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("JUSTIFY_FLEX_START")] FlexStart = 1,
    [pbr::OriginalName("JUSTIFY_CENTER")] Center = 2,
    [pbr::OriginalName("JUSTIFY_FLEX_END")] FlexEnd = 3,
    [pbr::OriginalName("JUSTIFY_SPACE_BETWEEN")] SpaceBetween = 4,
    [pbr::OriginalName("JUSTIFY_SPACE_AROUND")] SpaceAround = 5,
  }

  public enum Overflow {
    [pbr::OriginalName("OVERFLOW_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("OVERFLOW_VISIBLE")] Visible = 1,
    [pbr::OriginalName("OVERFLOW_HIDDEN")] Hidden = 2,
  }

  public enum FlexPosition {
    [pbr::OriginalName("FLEX_POSITION_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("FLEX_POSITION_RELATIVE")] Relative = 1,
    [pbr::OriginalName("FLEX_POSITION_ABSOLUTE")] Absolute = 2,
  }

  public enum TextOverflow {
    [pbr::OriginalName("TEXT_OVERFLOW_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("TEXT_OVERFLOW_CLIP")] Clip = 1,
    [pbr::OriginalName("TEXT_OVERFLOW_ELLIPSIS")] Ellipsis = 2,
  }

  public enum EasingMode {
    [pbr::OriginalName("EASING_MODE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("EASING_MODE_EASE")] Ease = 1,
    [pbr::OriginalName("EASING_MODE_EASE_IN")] EaseIn = 2,
    [pbr::OriginalName("EASING_MODE_EASE_OUT")] EaseOut = 3,
    [pbr::OriginalName("EASING_MODE_EASE_IN_OUT")] EaseInOut = 4,
    [pbr::OriginalName("EASING_MODE_LINEAR")] Linear = 5,
    [pbr::OriginalName("EASING_MODE_EASE_IN_SINE")] EaseInSine = 6,
    [pbr::OriginalName("EASING_MODE_EASE_OUT_SINE")] EaseOutSine = 7,
    [pbr::OriginalName("EASING_MODE_EASE_IN_OUT_SINE")] EaseInOutSine = 8,
    [pbr::OriginalName("EASING_MODE_EASE_IN_CUBIC")] EaseInCubic = 9,
    [pbr::OriginalName("EASING_MODE_EASE_OUT_CUBIC")] EaseOutCubic = 10,
    [pbr::OriginalName("EASING_MODE_EASE_IN_OUT_CUBIC")] EaseInOutCubic = 11,
    [pbr::OriginalName("EASING_MODE_EASE_IN_CIRC")] EaseInCirc = 12,
    [pbr::OriginalName("EASING_MODE_EASE_OUT_CIRC")] EaseOutCirc = 13,
    [pbr::OriginalName("EASING_MODE_EASE_IN_OUT_CIRC")] EaseInOutCirc = 14,
    [pbr::OriginalName("EASING_MODE_EASE_IN_ELASTIC")] EaseInElastic = 15,
    [pbr::OriginalName("EASING_MODE_EASE_OUT_ELASTIC")] EaseOutElastic = 16,
    [pbr::OriginalName("EASING_MODE_EASE_IN_OUT_ELASTIC")] EaseInOutElastic = 17,
    [pbr::OriginalName("EASING_MODE_EASE_IN_BACK")] EaseInBack = 18,
    [pbr::OriginalName("EASING_MODE_EASE_OUT_BACK")] EaseOutBack = 19,
    [pbr::OriginalName("EASING_MODE_EASE_IN_OUT_BACK")] EaseInOutBack = 20,
    [pbr::OriginalName("EASING_MODE_EASE_IN_BOUNCE")] EaseInBounce = 21,
    [pbr::OriginalName("EASING_MODE_EASE_OUT_BOUNCE")] EaseOutBounce = 22,
    [pbr::OriginalName("EASING_MODE_EASE_IN_OUT_BOUNCE")] EaseInOutBounce = 23,
  }

  public enum ImageScaleMode {
    [pbr::OriginalName("IMAGE_SCALE_MODE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("IMAGE_SCALE_MODE_STRETCH_TO_FILL")] StretchToFill = 1,
    [pbr::OriginalName("IMAGE_SCALE_MODE_SCALE_AND_CROP")] ScaleAndCrop = 2,
    [pbr::OriginalName("IMAGE_SCALE_MODE_SCALE_TO_FIT")] ScaleToFit = 3,
  }

  public enum FontStyle {
    [pbr::OriginalName("FONT_STYLE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("FONT_STYLE_NORMAL")] Normal = 1,
    [pbr::OriginalName("FONT_STYLE_BOLD")] Bold = 2,
    [pbr::OriginalName("FONT_STYLE_ITALIC")] Italic = 3,
    [pbr::OriginalName("FONT_STYLE_BOLD_AND_ITALIC")] BoldAndItalic = 4,
  }

  public enum OverflowClipBox {
    [pbr::OriginalName("OVERFLOW_CLIP_BOX_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("OVERFLOW_CLIP_BOX_PADDING_BOX")] PaddingBox = 1,
    [pbr::OriginalName("OVERFLOW_CLIP_BOX_CONTENT_BOX")] ContentBox = 2,
  }

  public enum TextAlign {
    [pbr::OriginalName("TEXT_ALIGN_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("TEXT_ALIGN_UPPER_LEFT")] UpperLeft = 1,
    [pbr::OriginalName("TEXT_ALIGN_UPPER_CENTER")] UpperCenter = 2,
    [pbr::OriginalName("TEXT_ALIGN_UPPER_RIGHT")] UpperRight = 3,
    [pbr::OriginalName("TEXT_ALIGN_MIDDLE_LEFT")] MiddleLeft = 4,
    [pbr::OriginalName("TEXT_ALIGN_MIDDLE_CENTER")] MiddleCenter = 5,
    [pbr::OriginalName("TEXT_ALIGN_MIDDLE_RIGHT")] MiddleRight = 6,
    [pbr::OriginalName("TEXT_ALIGN_LOWER_LEFT")] LowerLeft = 7,
    [pbr::OriginalName("TEXT_ALIGN_LOWER_CENTER")] LowerCenter = 8,
    [pbr::OriginalName("TEXT_ALIGN_LOWER_RIGHT")] LowerRight = 9,
  }

  public enum TextOverflowPosition {
    [pbr::OriginalName("TEXT_OVERFLOW_POSITION_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("TEXT_OVERFLOW_POSITION_END")] End = 1,
    [pbr::OriginalName("TEXT_OVERFLOW_POSITION_START")] Start = 2,
    [pbr::OriginalName("TEXT_OVERFLOW_POSITION_MIDDLE")] Middle = 3,
  }

  public enum Visibility {
    [pbr::OriginalName("VISIBILITY_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("VISIBILITY_VISIBLE")] Visible = 1,
    [pbr::OriginalName("VISIBILITY_HIDDEn")] Hidden = 2,
  }

  public enum WhiteSpace {
    [pbr::OriginalName("WHITE_SPACE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("WHITE_SPACE_NORMAL")] Normal = 1,
    [pbr::OriginalName("WHITE_SPACE_NO_WRAP")] NoWrap = 2,
  }

  public enum LengthUnit {
    [pbr::OriginalName("LENGTH_UNIT_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("LENGTH_UNIT_PIXEL")] Pixel = 1,
    [pbr::OriginalName("LENGTH_UNIT_PERCENTAGE")] Percentage = 2,
  }

  #endregion

  #region Messages
  public sealed partial class Color : pb::IMessage<Color>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Color> _parser = new pb::MessageParser<Color>(() => new Color());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Color> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.NodeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color(Color other) : this() {
      red_ = other.red_;
      green_ = other.green_;
      blue_ = other.blue_;
      alpha_ = other.alpha_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color Clone() {
      return new Color(this);
    }

    /// <summary>Field number for the "red" field.</summary>
    public const int RedFieldNumber = 1;
    private float red_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Red {
      get { return red_; }
      set {
        red_ = value;
      }
    }

    /// <summary>Field number for the "green" field.</summary>
    public const int GreenFieldNumber = 2;
    private float green_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Green {
      get { return green_; }
      set {
        green_ = value;
      }
    }

    /// <summary>Field number for the "blue" field.</summary>
    public const int BlueFieldNumber = 3;
    private float blue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Blue {
      get { return blue_; }
      set {
        blue_ = value;
      }
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 4;
    private float alpha_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Color);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Color other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Red, other.Red)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Green, other.Green)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Blue, other.Blue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Alpha, other.Alpha)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Red != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Red);
      if (Green != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Green);
      if (Blue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Blue);
      if (Alpha != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Alpha);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Red != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Red);
      }
      if (Green != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Green);
      }
      if (Blue != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Blue);
      }
      if (Alpha != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Alpha);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Red != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Red);
      }
      if (Green != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Green);
      }
      if (Blue != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Blue);
      }
      if (Alpha != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Alpha);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Red != 0F) {
        size += 1 + 4;
      }
      if (Green != 0F) {
        size += 1 + 4;
      }
      if (Blue != 0F) {
        size += 1 + 4;
      }
      if (Alpha != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Color other) {
      if (other == null) {
        return;
      }
      if (other.Red != 0F) {
        Red = other.Red;
      }
      if (other.Green != 0F) {
        Green = other.Green;
      }
      if (other.Blue != 0F) {
        Blue = other.Blue;
      }
      if (other.Alpha != 0F) {
        Alpha = other.Alpha;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Red = input.ReadFloat();
            break;
          }
          case 21: {
            Green = input.ReadFloat();
            break;
          }
          case 29: {
            Blue = input.ReadFloat();
            break;
          }
          case 37: {
            Alpha = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Red = input.ReadFloat();
            break;
          }
          case 21: {
            Green = input.ReadFloat();
            break;
          }
          case 29: {
            Blue = input.ReadFloat();
            break;
          }
          case 37: {
            Alpha = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SpriteAddress : pb::IMessage<SpriteAddress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpriteAddress> _parser = new pb::MessageParser<SpriteAddress>(() => new SpriteAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpriteAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.NodeReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpriteAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpriteAddress(SpriteAddress other) : this() {
      address_ = other.address_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpriteAddress Clone() {
      return new SpriteAddress(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpriteAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpriteAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpriteAddress other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FontAddress : pb::IMessage<FontAddress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FontAddress> _parser = new pb::MessageParser<FontAddress>(() => new FontAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FontAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.NodeReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontAddress(FontAddress other) : this() {
      address_ = other.address_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontAddress Clone() {
      return new FontAddress(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FontAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FontAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FontAddress other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Vector2 : pb::IMessage<Vector2>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Vector2> _parser = new pb::MessageParser<Vector2>(() => new Vector2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.NodeReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2(Vector2 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2 Clone() {
      return new Vector2(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector2 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Vector3 : pb::IMessage<Vector3>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Vector3> _parser = new pb::MessageParser<Vector3>(() => new Vector3());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.NodeReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3(Vector3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3 Clone() {
      return new Vector3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Length : pb::IMessage<Length>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Length> _parser = new pb::MessageParser<Length>(() => new Length());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Length> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.NodeReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Length() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Length(Length other) : this() {
      unit_ = other.unit_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Length Clone() {
      return new Length(this);
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 1;
    private global::Spelldawn.Protos.LengthUnit unit_ = global::Spelldawn.Protos.LengthUnit.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.LengthUnit Unit {
      get { return unit_; }
      set {
        unit_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private float value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Length);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Length other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Unit != other.Unit) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Unit != global::Spelldawn.Protos.LengthUnit.Unspecified) hash ^= Unit.GetHashCode();
      if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Unit != global::Spelldawn.Protos.LengthUnit.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Unit);
      }
      if (Value != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Unit != global::Spelldawn.Protos.LengthUnit.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Unit);
      }
      if (Value != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Unit != global::Spelldawn.Protos.LengthUnit.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Unit);
      }
      if (Value != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Length other) {
      if (other == null) {
        return;
      }
      if (other.Unit != global::Spelldawn.Protos.LengthUnit.Unspecified) {
        Unit = other.Unit;
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Unit = (global::Spelldawn.Protos.LengthUnit) input.ReadEnum();
            break;
          }
          case 21: {
            Value = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Unit = (global::Spelldawn.Protos.LengthUnit) input.ReadEnum();
            break;
          }
          case 21: {
            Value = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LengthGroup : pb::IMessage<LengthGroup>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LengthGroup> _parser = new pb::MessageParser<LengthGroup>(() => new LengthGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LengthGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.NodeReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LengthGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LengthGroup(LengthGroup other) : this() {
      top_ = other.top_ != null ? other.top_.Clone() : null;
      right_ = other.right_ != null ? other.right_.Clone() : null;
      bottom_ = other.bottom_ != null ? other.bottom_.Clone() : null;
      left_ = other.left_ != null ? other.left_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LengthGroup Clone() {
      return new LengthGroup(this);
    }

    /// <summary>Field number for the "top" field.</summary>
    public const int TopFieldNumber = 1;
    private global::Spelldawn.Protos.Length top_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Length Top {
      get { return top_; }
      set {
        top_ = value;
      }
    }

    /// <summary>Field number for the "right" field.</summary>
    public const int RightFieldNumber = 2;
    private global::Spelldawn.Protos.Length right_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Length Right {
      get { return right_; }
      set {
        right_ = value;
      }
    }

    /// <summary>Field number for the "bottom" field.</summary>
    public const int BottomFieldNumber = 3;
    private global::Spelldawn.Protos.Length bottom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Length Bottom {
      get { return bottom_; }
      set {
        bottom_ = value;
      }
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 4;
    private global::Spelldawn.Protos.Length left_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Length Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LengthGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LengthGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Top, other.Top)) return false;
      if (!object.Equals(Right, other.Right)) return false;
      if (!object.Equals(Bottom, other.Bottom)) return false;
      if (!object.Equals(Left, other.Left)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (top_ != null) hash ^= Top.GetHashCode();
      if (right_ != null) hash ^= Right.GetHashCode();
      if (bottom_ != null) hash ^= Bottom.GetHashCode();
      if (left_ != null) hash ^= Left.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (top_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Top);
      }
      if (right_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Right);
      }
      if (bottom_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Bottom);
      }
      if (left_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Left);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (top_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Top);
      }
      if (right_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Right);
      }
      if (bottom_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Bottom);
      }
      if (left_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Left);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (top_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Top);
      }
      if (right_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Right);
      }
      if (bottom_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bottom);
      }
      if (left_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Left);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LengthGroup other) {
      if (other == null) {
        return;
      }
      if (other.top_ != null) {
        if (top_ == null) {
          Top = new global::Spelldawn.Protos.Length();
        }
        Top.MergeFrom(other.Top);
      }
      if (other.right_ != null) {
        if (right_ == null) {
          Right = new global::Spelldawn.Protos.Length();
        }
        Right.MergeFrom(other.Right);
      }
      if (other.bottom_ != null) {
        if (bottom_ == null) {
          Bottom = new global::Spelldawn.Protos.Length();
        }
        Bottom.MergeFrom(other.Bottom);
      }
      if (other.left_ != null) {
        if (left_ == null) {
          Left = new global::Spelldawn.Protos.Length();
        }
        Left.MergeFrom(other.Left);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (top_ == null) {
              Top = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(Top);
            break;
          }
          case 18: {
            if (right_ == null) {
              Right = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(Right);
            break;
          }
          case 26: {
            if (bottom_ == null) {
              Bottom = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(Bottom);
            break;
          }
          case 34: {
            if (left_ == null) {
              Left = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(Left);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (top_ == null) {
              Top = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(Top);
            break;
          }
          case 18: {
            if (right_ == null) {
              Right = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(Right);
            break;
          }
          case 26: {
            if (bottom_ == null) {
              Bottom = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(Bottom);
            break;
          }
          case 34: {
            if (left_ == null) {
              Left = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(Left);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BorderColor : pb::IMessage<BorderColor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BorderColor> _parser = new pb::MessageParser<BorderColor>(() => new BorderColor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BorderColor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.NodeReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderColor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderColor(BorderColor other) : this() {
      top_ = other.top_ != null ? other.top_.Clone() : null;
      right_ = other.right_ != null ? other.right_.Clone() : null;
      bottom_ = other.bottom_ != null ? other.bottom_.Clone() : null;
      left_ = other.left_ != null ? other.left_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderColor Clone() {
      return new BorderColor(this);
    }

    /// <summary>Field number for the "top" field.</summary>
    public const int TopFieldNumber = 1;
    private global::Spelldawn.Protos.Color top_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Color Top {
      get { return top_; }
      set {
        top_ = value;
      }
    }

    /// <summary>Field number for the "right" field.</summary>
    public const int RightFieldNumber = 2;
    private global::Spelldawn.Protos.Color right_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Color Right {
      get { return right_; }
      set {
        right_ = value;
      }
    }

    /// <summary>Field number for the "bottom" field.</summary>
    public const int BottomFieldNumber = 3;
    private global::Spelldawn.Protos.Color bottom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Color Bottom {
      get { return bottom_; }
      set {
        bottom_ = value;
      }
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 4;
    private global::Spelldawn.Protos.Color left_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Color Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BorderColor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BorderColor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Top, other.Top)) return false;
      if (!object.Equals(Right, other.Right)) return false;
      if (!object.Equals(Bottom, other.Bottom)) return false;
      if (!object.Equals(Left, other.Left)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (top_ != null) hash ^= Top.GetHashCode();
      if (right_ != null) hash ^= Right.GetHashCode();
      if (bottom_ != null) hash ^= Bottom.GetHashCode();
      if (left_ != null) hash ^= Left.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (top_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Top);
      }
      if (right_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Right);
      }
      if (bottom_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Bottom);
      }
      if (left_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Left);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (top_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Top);
      }
      if (right_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Right);
      }
      if (bottom_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Bottom);
      }
      if (left_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Left);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (top_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Top);
      }
      if (right_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Right);
      }
      if (bottom_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bottom);
      }
      if (left_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Left);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BorderColor other) {
      if (other == null) {
        return;
      }
      if (other.top_ != null) {
        if (top_ == null) {
          Top = new global::Spelldawn.Protos.Color();
        }
        Top.MergeFrom(other.Top);
      }
      if (other.right_ != null) {
        if (right_ == null) {
          Right = new global::Spelldawn.Protos.Color();
        }
        Right.MergeFrom(other.Right);
      }
      if (other.bottom_ != null) {
        if (bottom_ == null) {
          Bottom = new global::Spelldawn.Protos.Color();
        }
        Bottom.MergeFrom(other.Bottom);
      }
      if (other.left_ != null) {
        if (left_ == null) {
          Left = new global::Spelldawn.Protos.Color();
        }
        Left.MergeFrom(other.Left);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (top_ == null) {
              Top = new global::Spelldawn.Protos.Color();
            }
            input.ReadMessage(Top);
            break;
          }
          case 18: {
            if (right_ == null) {
              Right = new global::Spelldawn.Protos.Color();
            }
            input.ReadMessage(Right);
            break;
          }
          case 26: {
            if (bottom_ == null) {
              Bottom = new global::Spelldawn.Protos.Color();
            }
            input.ReadMessage(Bottom);
            break;
          }
          case 34: {
            if (left_ == null) {
              Left = new global::Spelldawn.Protos.Color();
            }
            input.ReadMessage(Left);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (top_ == null) {
              Top = new global::Spelldawn.Protos.Color();
            }
            input.ReadMessage(Top);
            break;
          }
          case 18: {
            if (right_ == null) {
              Right = new global::Spelldawn.Protos.Color();
            }
            input.ReadMessage(Right);
            break;
          }
          case 26: {
            if (bottom_ == null) {
              Bottom = new global::Spelldawn.Protos.Color();
            }
            input.ReadMessage(Bottom);
            break;
          }
          case 34: {
            if (left_ == null) {
              Left = new global::Spelldawn.Protos.Color();
            }
            input.ReadMessage(Left);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BorderRadius : pb::IMessage<BorderRadius>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BorderRadius> _parser = new pb::MessageParser<BorderRadius>(() => new BorderRadius());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BorderRadius> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.NodeReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderRadius() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderRadius(BorderRadius other) : this() {
      topLeft_ = other.topLeft_ != null ? other.topLeft_.Clone() : null;
      topRight_ = other.topRight_ != null ? other.topRight_.Clone() : null;
      bottomRight_ = other.bottomRight_ != null ? other.bottomRight_.Clone() : null;
      bottomLeft_ = other.bottomLeft_ != null ? other.bottomLeft_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderRadius Clone() {
      return new BorderRadius(this);
    }

    /// <summary>Field number for the "top_left" field.</summary>
    public const int TopLeftFieldNumber = 1;
    private global::Spelldawn.Protos.Length topLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Length TopLeft {
      get { return topLeft_; }
      set {
        topLeft_ = value;
      }
    }

    /// <summary>Field number for the "top_right" field.</summary>
    public const int TopRightFieldNumber = 2;
    private global::Spelldawn.Protos.Length topRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Length TopRight {
      get { return topRight_; }
      set {
        topRight_ = value;
      }
    }

    /// <summary>Field number for the "bottom_right" field.</summary>
    public const int BottomRightFieldNumber = 3;
    private global::Spelldawn.Protos.Length bottomRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Length BottomRight {
      get { return bottomRight_; }
      set {
        bottomRight_ = value;
      }
    }

    /// <summary>Field number for the "bottom_left" field.</summary>
    public const int BottomLeftFieldNumber = 4;
    private global::Spelldawn.Protos.Length bottomLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Length BottomLeft {
      get { return bottomLeft_; }
      set {
        bottomLeft_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BorderRadius);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BorderRadius other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TopLeft, other.TopLeft)) return false;
      if (!object.Equals(TopRight, other.TopRight)) return false;
      if (!object.Equals(BottomRight, other.BottomRight)) return false;
      if (!object.Equals(BottomLeft, other.BottomLeft)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (topLeft_ != null) hash ^= TopLeft.GetHashCode();
      if (topRight_ != null) hash ^= TopRight.GetHashCode();
      if (bottomRight_ != null) hash ^= BottomRight.GetHashCode();
      if (bottomLeft_ != null) hash ^= BottomLeft.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (topLeft_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TopLeft);
      }
      if (topRight_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TopRight);
      }
      if (bottomRight_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BottomRight);
      }
      if (bottomLeft_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BottomLeft);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (topLeft_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TopLeft);
      }
      if (topRight_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TopRight);
      }
      if (bottomRight_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BottomRight);
      }
      if (bottomLeft_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BottomLeft);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (topLeft_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TopLeft);
      }
      if (topRight_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TopRight);
      }
      if (bottomRight_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BottomRight);
      }
      if (bottomLeft_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BottomLeft);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BorderRadius other) {
      if (other == null) {
        return;
      }
      if (other.topLeft_ != null) {
        if (topLeft_ == null) {
          TopLeft = new global::Spelldawn.Protos.Length();
        }
        TopLeft.MergeFrom(other.TopLeft);
      }
      if (other.topRight_ != null) {
        if (topRight_ == null) {
          TopRight = new global::Spelldawn.Protos.Length();
        }
        TopRight.MergeFrom(other.TopRight);
      }
      if (other.bottomRight_ != null) {
        if (bottomRight_ == null) {
          BottomRight = new global::Spelldawn.Protos.Length();
        }
        BottomRight.MergeFrom(other.BottomRight);
      }
      if (other.bottomLeft_ != null) {
        if (bottomLeft_ == null) {
          BottomLeft = new global::Spelldawn.Protos.Length();
        }
        BottomLeft.MergeFrom(other.BottomLeft);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (topLeft_ == null) {
              TopLeft = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(TopLeft);
            break;
          }
          case 18: {
            if (topRight_ == null) {
              TopRight = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(TopRight);
            break;
          }
          case 26: {
            if (bottomRight_ == null) {
              BottomRight = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(BottomRight);
            break;
          }
          case 34: {
            if (bottomLeft_ == null) {
              BottomLeft = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(BottomLeft);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (topLeft_ == null) {
              TopLeft = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(TopLeft);
            break;
          }
          case 18: {
            if (topRight_ == null) {
              TopRight = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(TopRight);
            break;
          }
          case 26: {
            if (bottomRight_ == null) {
              BottomRight = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(BottomRight);
            break;
          }
          case 34: {
            if (bottomLeft_ == null) {
              BottomLeft = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(BottomLeft);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Rotate : pb::IMessage<Rotate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Rotate> _parser = new pb::MessageParser<Rotate>(() => new Rotate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rotate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.NodeReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rotate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rotate(Rotate other) : this() {
      degrees_ = other.degrees_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rotate Clone() {
      return new Rotate(this);
    }

    /// <summary>Field number for the "degrees" field.</summary>
    public const int DegreesFieldNumber = 1;
    private float degrees_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Degrees {
      get { return degrees_; }
      set {
        degrees_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rotate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rotate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Degrees, other.Degrees)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Degrees != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Degrees);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Degrees != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Degrees);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Degrees != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Degrees);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Degrees != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rotate other) {
      if (other == null) {
        return;
      }
      if (other.Degrees != 0F) {
        Degrees = other.Degrees;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Degrees = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Degrees = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Translate : pb::IMessage<Translate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Translate> _parser = new pb::MessageParser<Translate>(() => new Translate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Translate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.NodeReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Translate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Translate(Translate other) : this() {
      x_ = other.x_ != null ? other.x_.Clone() : null;
      y_ = other.y_ != null ? other.y_.Clone() : null;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Translate Clone() {
      return new Translate(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private global::Spelldawn.Protos.Length x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Length X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private global::Spelldawn.Protos.Length y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Length Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Translate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Translate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(X, other.X)) return false;
      if (!object.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (x_ != null) hash ^= X.GetHashCode();
      if (y_ != null) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (x_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(X);
      }
      if (y_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (x_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(X);
      }
      if (y_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (x_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(X);
      }
      if (y_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Y);
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Translate other) {
      if (other == null) {
        return;
      }
      if (other.x_ != null) {
        if (x_ == null) {
          X = new global::Spelldawn.Protos.Length();
        }
        X.MergeFrom(other.X);
      }
      if (other.y_ != null) {
        if (y_ == null) {
          Y = new global::Spelldawn.Protos.Length();
        }
        Y.MergeFrom(other.Y);
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (x_ == null) {
              X = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(X);
            break;
          }
          case 18: {
            if (y_ == null) {
              Y = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(Y);
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (x_ == null) {
              X = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(X);
            break;
          }
          case 18: {
            if (y_ == null) {
              Y = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(Y);
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Scale : pb::IMessage<Scale>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Scale> _parser = new pb::MessageParser<Scale>(() => new Scale());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Scale> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.NodeReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scale() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scale(Scale other) : this() {
      amount_ = other.amount_ != null ? other.amount_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scale Clone() {
      return new Scale(this);
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 1;
    private global::Spelldawn.Protos.Vector3 amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Vector3 Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Scale);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Scale other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Amount, other.Amount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (amount_ != null) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (amount_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (amount_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (amount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Scale other) {
      if (other == null) {
        return;
      }
      if (other.amount_ != null) {
        if (amount_ == null) {
          Amount = new global::Spelldawn.Protos.Vector3();
        }
        Amount.MergeFrom(other.Amount);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (amount_ == null) {
              Amount = new global::Spelldawn.Protos.Vector3();
            }
            input.ReadMessage(Amount);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (amount_ == null) {
              Amount = new global::Spelldawn.Protos.Vector3();
            }
            input.ReadMessage(Amount);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TextShadow : pb::IMessage<TextShadow>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TextShadow> _parser = new pb::MessageParser<TextShadow>(() => new TextShadow());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextShadow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.NodeReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextShadow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextShadow(TextShadow other) : this() {
      offset_ = other.offset_ != null ? other.offset_.Clone() : null;
      blurRadius_ = other.blurRadius_;
      color_ = other.color_ != null ? other.color_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextShadow Clone() {
      return new TextShadow(this);
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 1;
    private global::Spelldawn.Protos.Vector2 offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Vector2 Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "blur_radius" field.</summary>
    public const int BlurRadiusFieldNumber = 2;
    private float blurRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BlurRadius {
      get { return blurRadius_; }
      set {
        blurRadius_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 3;
    private global::Spelldawn.Protos.Color color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextShadow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextShadow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Offset, other.Offset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BlurRadius, other.BlurRadius)) return false;
      if (!object.Equals(Color, other.Color)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (offset_ != null) hash ^= Offset.GetHashCode();
      if (BlurRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BlurRadius);
      if (color_ != null) hash ^= Color.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (offset_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Offset);
      }
      if (BlurRadius != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(BlurRadius);
      }
      if (color_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Color);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (offset_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Offset);
      }
      if (BlurRadius != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(BlurRadius);
      }
      if (color_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Color);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (offset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offset);
      }
      if (BlurRadius != 0F) {
        size += 1 + 4;
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextShadow other) {
      if (other == null) {
        return;
      }
      if (other.offset_ != null) {
        if (offset_ == null) {
          Offset = new global::Spelldawn.Protos.Vector2();
        }
        Offset.MergeFrom(other.Offset);
      }
      if (other.BlurRadius != 0F) {
        BlurRadius = other.BlurRadius;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          Color = new global::Spelldawn.Protos.Color();
        }
        Color.MergeFrom(other.Color);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (offset_ == null) {
              Offset = new global::Spelldawn.Protos.Vector2();
            }
            input.ReadMessage(Offset);
            break;
          }
          case 21: {
            BlurRadius = input.ReadFloat();
            break;
          }
          case 26: {
            if (color_ == null) {
              Color = new global::Spelldawn.Protos.Color();
            }
            input.ReadMessage(Color);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (offset_ == null) {
              Offset = new global::Spelldawn.Protos.Vector2();
            }
            input.ReadMessage(Offset);
            break;
          }
          case 21: {
            BlurRadius = input.ReadFloat();
            break;
          }
          case 26: {
            if (color_ == null) {
              Color = new global::Spelldawn.Protos.Color();
            }
            input.ReadMessage(Color);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TimeValue : pb::IMessage<TimeValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimeValue> _parser = new pb::MessageParser<TimeValue>(() => new TimeValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.NodeReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeValue(TimeValue other) : this() {
      milliseconds_ = other.milliseconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeValue Clone() {
      return new TimeValue(this);
    }

    /// <summary>Field number for the "milliseconds" field.</summary>
    public const int MillisecondsFieldNumber = 1;
    private float milliseconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Milliseconds {
      get { return milliseconds_; }
      set {
        milliseconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Milliseconds, other.Milliseconds)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Milliseconds != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Milliseconds);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Milliseconds != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Milliseconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Milliseconds != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Milliseconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Milliseconds != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeValue other) {
      if (other == null) {
        return;
      }
      if (other.Milliseconds != 0F) {
        Milliseconds = other.Milliseconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Milliseconds = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Milliseconds = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Style : pb::IMessage<Style>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Style> _parser = new pb::MessageParser<Style>(() => new Style());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Style> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.NodeReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Style() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Style(Style other) : this() {
      alignContent_ = other.alignContent_;
      alignItems_ = other.alignItems_;
      alignSelf_ = other.alignSelf_;
      backgroundColor_ = other.backgroundColor_ != null ? other.backgroundColor_.Clone() : null;
      backgroundImage_ = other.backgroundImage_ != null ? other.backgroundImage_.Clone() : null;
      borderColor_ = other.borderColor_ != null ? other.borderColor_.Clone() : null;
      borderRadius_ = other.borderRadius_ != null ? other.borderRadius_.Clone() : null;
      borderWidth_ = other.borderWidth_ != null ? other.borderWidth_.Clone() : null;
      inset_ = other.inset_ != null ? other.inset_.Clone() : null;
      color_ = other.color_ != null ? other.color_.Clone() : null;
      display_ = other.display_;
      flexBasis_ = other.flexBasis_ != null ? other.flexBasis_.Clone() : null;
      flexDirection_ = other.flexDirection_;
      flexGrow_ = other.flexGrow_;
      flexShrink_ = other.flexShrink_;
      wrap_ = other.wrap_;
      fontSize_ = other.fontSize_ != null ? other.fontSize_.Clone() : null;
      height_ = other.height_ != null ? other.height_.Clone() : null;
      justifyContent_ = other.justifyContent_;
      letterSpacing_ = other.letterSpacing_ != null ? other.letterSpacing_.Clone() : null;
      margin_ = other.margin_ != null ? other.margin_.Clone() : null;
      maxHeight_ = other.maxHeight_ != null ? other.maxHeight_.Clone() : null;
      maxWidth_ = other.maxWidth_ != null ? other.maxWidth_.Clone() : null;
      minHeight_ = other.minHeight_ != null ? other.minHeight_.Clone() : null;
      minWidth_ = other.minWidth_ != null ? other.minWidth_.Clone() : null;
      opacity_ = other.opacity_;
      overflow_ = other.overflow_;
      padding_ = other.padding_ != null ? other.padding_.Clone() : null;
      position_ = other.position_;
      rotate_ = other.rotate_ != null ? other.rotate_.Clone() : null;
      scale_ = other.scale_ != null ? other.scale_.Clone() : null;
      textOverflow_ = other.textOverflow_;
      textShadow_ = other.textShadow_ != null ? other.textShadow_.Clone() : null;
      transformOrigin_ = other.transformOrigin_ != null ? other.transformOrigin_.Clone() : null;
      transitionDelay_ = other.transitionDelay_ != null ? other.transitionDelay_.Clone() : null;
      transitionDuration_ = other.transitionDuration_ != null ? other.transitionDuration_.Clone() : null;
      transitionProperty_ = other.transitionProperty_;
      transitionEasingMode_ = other.transitionEasingMode_;
      translate_ = other.translate_ != null ? other.translate_.Clone() : null;
      backgroundImageTintColor_ = other.backgroundImageTintColor_ != null ? other.backgroundImageTintColor_.Clone() : null;
      imageScaleMode_ = other.imageScaleMode_;
      font_ = other.font_ != null ? other.font_.Clone() : null;
      fontStyle_ = other.fontStyle_;
      overflowClipBox_ = other.overflowClipBox_;
      paragraphSpacing_ = other.paragraphSpacing_ != null ? other.paragraphSpacing_.Clone() : null;
      imageSlice_ = other.imageSlice_ != null ? other.imageSlice_.Clone() : null;
      textAlign_ = other.textAlign_;
      textOutlineColor_ = other.textOutlineColor_ != null ? other.textOutlineColor_.Clone() : null;
      textOutlineWidth_ = other.textOutlineWidth_;
      textOverflowPosition_ = other.textOverflowPosition_;
      visibility_ = other.visibility_;
      whiteSpace_ = other.whiteSpace_;
      width_ = other.width_ != null ? other.width_.Clone() : null;
      wordSpacing_ = other.wordSpacing_ != null ? other.wordSpacing_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Style Clone() {
      return new Style(this);
    }

    /// <summary>Field number for the "align_content" field.</summary>
    public const int AlignContentFieldNumber = 1;
    private global::Spelldawn.Protos.Align alignContent_ = global::Spelldawn.Protos.Align.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Align AlignContent {
      get { return alignContent_; }
      set {
        alignContent_ = value;
      }
    }

    /// <summary>Field number for the "align_items" field.</summary>
    public const int AlignItemsFieldNumber = 2;
    private global::Spelldawn.Protos.Align alignItems_ = global::Spelldawn.Protos.Align.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Align AlignItems {
      get { return alignItems_; }
      set {
        alignItems_ = value;
      }
    }

    /// <summary>Field number for the "align_self" field.</summary>
    public const int AlignSelfFieldNumber = 3;
    private global::Spelldawn.Protos.Align alignSelf_ = global::Spelldawn.Protos.Align.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Align AlignSelf {
      get { return alignSelf_; }
      set {
        alignSelf_ = value;
      }
    }

    /// <summary>Field number for the "background_color" field.</summary>
    public const int BackgroundColorFieldNumber = 4;
    private global::Spelldawn.Protos.Color backgroundColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Color BackgroundColor {
      get { return backgroundColor_; }
      set {
        backgroundColor_ = value;
      }
    }

    /// <summary>Field number for the "background_image" field.</summary>
    public const int BackgroundImageFieldNumber = 5;
    private global::Spelldawn.Protos.SpriteAddress backgroundImage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.SpriteAddress BackgroundImage {
      get { return backgroundImage_; }
      set {
        backgroundImage_ = value;
      }
    }

    /// <summary>Field number for the "border_color" field.</summary>
    public const int BorderColorFieldNumber = 6;
    private global::Spelldawn.Protos.BorderColor borderColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.BorderColor BorderColor {
      get { return borderColor_; }
      set {
        borderColor_ = value;
      }
    }

    /// <summary>Field number for the "border_radius" field.</summary>
    public const int BorderRadiusFieldNumber = 7;
    private global::Spelldawn.Protos.BorderRadius borderRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.BorderRadius BorderRadius {
      get { return borderRadius_; }
      set {
        borderRadius_ = value;
      }
    }

    /// <summary>Field number for the "border_width" field.</summary>
    public const int BorderWidthFieldNumber = 8;
    private global::Spelldawn.Protos.LengthGroup borderWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.LengthGroup BorderWidth {
      get { return borderWidth_; }
      set {
        borderWidth_ = value;
      }
    }

    /// <summary>Field number for the "inset" field.</summary>
    public const int InsetFieldNumber = 9;
    private global::Spelldawn.Protos.LengthGroup inset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.LengthGroup Inset {
      get { return inset_; }
      set {
        inset_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 10;
    private global::Spelldawn.Protos.Color color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 11;
    private global::Spelldawn.Protos.DisplayStyle display_ = global::Spelldawn.Protos.DisplayStyle.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.DisplayStyle Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "flex_basis" field.</summary>
    public const int FlexBasisFieldNumber = 12;
    private global::Spelldawn.Protos.Length flexBasis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Length FlexBasis {
      get { return flexBasis_; }
      set {
        flexBasis_ = value;
      }
    }

    /// <summary>Field number for the "flex_direction" field.</summary>
    public const int FlexDirectionFieldNumber = 13;
    private global::Spelldawn.Protos.FlexDirection flexDirection_ = global::Spelldawn.Protos.FlexDirection.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexDirection FlexDirection {
      get { return flexDirection_; }
      set {
        flexDirection_ = value;
      }
    }

    /// <summary>Field number for the "flex_grow" field.</summary>
    public const int FlexGrowFieldNumber = 14;
    private float flexGrow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FlexGrow {
      get { return flexGrow_; }
      set {
        flexGrow_ = value;
      }
    }

    /// <summary>Field number for the "flex_shrink" field.</summary>
    public const int FlexShrinkFieldNumber = 15;
    private float flexShrink_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FlexShrink {
      get { return flexShrink_; }
      set {
        flexShrink_ = value;
      }
    }

    /// <summary>Field number for the "wrap" field.</summary>
    public const int WrapFieldNumber = 16;
    private global::Spelldawn.Protos.FlexWrap wrap_ = global::Spelldawn.Protos.FlexWrap.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexWrap Wrap {
      get { return wrap_; }
      set {
        wrap_ = value;
      }
    }

    /// <summary>Field number for the "font_size" field.</summary>
    public const int FontSizeFieldNumber = 17;
    private global::Spelldawn.Protos.Length fontSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Length FontSize {
      get { return fontSize_; }
      set {
        fontSize_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 18;
    private global::Spelldawn.Protos.Length height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Length Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "justify_content" field.</summary>
    public const int JustifyContentFieldNumber = 19;
    private global::Spelldawn.Protos.Justify justifyContent_ = global::Spelldawn.Protos.Justify.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Justify JustifyContent {
      get { return justifyContent_; }
      set {
        justifyContent_ = value;
      }
    }

    /// <summary>Field number for the "letter_spacing" field.</summary>
    public const int LetterSpacingFieldNumber = 20;
    private global::Spelldawn.Protos.Length letterSpacing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Length LetterSpacing {
      get { return letterSpacing_; }
      set {
        letterSpacing_ = value;
      }
    }

    /// <summary>Field number for the "margin" field.</summary>
    public const int MarginFieldNumber = 21;
    private global::Spelldawn.Protos.LengthGroup margin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.LengthGroup Margin {
      get { return margin_; }
      set {
        margin_ = value;
      }
    }

    /// <summary>Field number for the "max_height" field.</summary>
    public const int MaxHeightFieldNumber = 22;
    private global::Spelldawn.Protos.Length maxHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Length MaxHeight {
      get { return maxHeight_; }
      set {
        maxHeight_ = value;
      }
    }

    /// <summary>Field number for the "max_width" field.</summary>
    public const int MaxWidthFieldNumber = 23;
    private global::Spelldawn.Protos.Length maxWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Length MaxWidth {
      get { return maxWidth_; }
      set {
        maxWidth_ = value;
      }
    }

    /// <summary>Field number for the "min_height" field.</summary>
    public const int MinHeightFieldNumber = 24;
    private global::Spelldawn.Protos.Length minHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Length MinHeight {
      get { return minHeight_; }
      set {
        minHeight_ = value;
      }
    }

    /// <summary>Field number for the "min_width" field.</summary>
    public const int MinWidthFieldNumber = 25;
    private global::Spelldawn.Protos.Length minWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Length MinWidth {
      get { return minWidth_; }
      set {
        minWidth_ = value;
      }
    }

    /// <summary>Field number for the "opacity" field.</summary>
    public const int OpacityFieldNumber = 26;
    private float opacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Opacity {
      get { return opacity_; }
      set {
        opacity_ = value;
      }
    }

    /// <summary>Field number for the "overflow" field.</summary>
    public const int OverflowFieldNumber = 27;
    private global::Spelldawn.Protos.Overflow overflow_ = global::Spelldawn.Protos.Overflow.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Overflow Overflow {
      get { return overflow_; }
      set {
        overflow_ = value;
      }
    }

    /// <summary>Field number for the "padding" field.</summary>
    public const int PaddingFieldNumber = 28;
    private global::Spelldawn.Protos.LengthGroup padding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.LengthGroup Padding {
      get { return padding_; }
      set {
        padding_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 29;
    private global::Spelldawn.Protos.FlexPosition position_ = global::Spelldawn.Protos.FlexPosition.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexPosition Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "rotate" field.</summary>
    public const int RotateFieldNumber = 30;
    private global::Spelldawn.Protos.Rotate rotate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Rotate Rotate {
      get { return rotate_; }
      set {
        rotate_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 31;
    private global::Spelldawn.Protos.Scale scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Scale Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "text_overflow" field.</summary>
    public const int TextOverflowFieldNumber = 32;
    private global::Spelldawn.Protos.TextOverflow textOverflow_ = global::Spelldawn.Protos.TextOverflow.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.TextOverflow TextOverflow {
      get { return textOverflow_; }
      set {
        textOverflow_ = value;
      }
    }

    /// <summary>Field number for the "text_shadow" field.</summary>
    public const int TextShadowFieldNumber = 33;
    private global::Spelldawn.Protos.TextShadow textShadow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.TextShadow TextShadow {
      get { return textShadow_; }
      set {
        textShadow_ = value;
      }
    }

    /// <summary>Field number for the "transform_origin" field.</summary>
    public const int TransformOriginFieldNumber = 34;
    private global::Spelldawn.Protos.Translate transformOrigin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Translate TransformOrigin {
      get { return transformOrigin_; }
      set {
        transformOrigin_ = value;
      }
    }

    /// <summary>Field number for the "transition_delay" field.</summary>
    public const int TransitionDelayFieldNumber = 35;
    private global::Spelldawn.Protos.TimeValue transitionDelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.TimeValue TransitionDelay {
      get { return transitionDelay_; }
      set {
        transitionDelay_ = value;
      }
    }

    /// <summary>Field number for the "transition_duration" field.</summary>
    public const int TransitionDurationFieldNumber = 36;
    private global::Spelldawn.Protos.TimeValue transitionDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.TimeValue TransitionDuration {
      get { return transitionDuration_; }
      set {
        transitionDuration_ = value;
      }
    }

    /// <summary>Field number for the "transition_property" field.</summary>
    public const int TransitionPropertyFieldNumber = 37;
    private string transitionProperty_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TransitionProperty {
      get { return transitionProperty_; }
      set {
        transitionProperty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transition_easing_mode" field.</summary>
    public const int TransitionEasingModeFieldNumber = 38;
    private global::Spelldawn.Protos.EasingMode transitionEasingMode_ = global::Spelldawn.Protos.EasingMode.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.EasingMode TransitionEasingMode {
      get { return transitionEasingMode_; }
      set {
        transitionEasingMode_ = value;
      }
    }

    /// <summary>Field number for the "translate" field.</summary>
    public const int TranslateFieldNumber = 39;
    private global::Spelldawn.Protos.Translate translate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Translate Translate {
      get { return translate_; }
      set {
        translate_ = value;
      }
    }

    /// <summary>Field number for the "background_image_tint_color" field.</summary>
    public const int BackgroundImageTintColorFieldNumber = 40;
    private global::Spelldawn.Protos.Color backgroundImageTintColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Color BackgroundImageTintColor {
      get { return backgroundImageTintColor_; }
      set {
        backgroundImageTintColor_ = value;
      }
    }

    /// <summary>Field number for the "image_scale_mode" field.</summary>
    public const int ImageScaleModeFieldNumber = 41;
    private global::Spelldawn.Protos.ImageScaleMode imageScaleMode_ = global::Spelldawn.Protos.ImageScaleMode.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ImageScaleMode ImageScaleMode {
      get { return imageScaleMode_; }
      set {
        imageScaleMode_ = value;
      }
    }

    /// <summary>Field number for the "font" field.</summary>
    public const int FontFieldNumber = 42;
    private global::Spelldawn.Protos.FontAddress font_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FontAddress Font {
      get { return font_; }
      set {
        font_ = value;
      }
    }

    /// <summary>Field number for the "font_style" field.</summary>
    public const int FontStyleFieldNumber = 43;
    private global::Spelldawn.Protos.FontStyle fontStyle_ = global::Spelldawn.Protos.FontStyle.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FontStyle FontStyle {
      get { return fontStyle_; }
      set {
        fontStyle_ = value;
      }
    }

    /// <summary>Field number for the "overflow_clip_box" field.</summary>
    public const int OverflowClipBoxFieldNumber = 44;
    private global::Spelldawn.Protos.OverflowClipBox overflowClipBox_ = global::Spelldawn.Protos.OverflowClipBox.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.OverflowClipBox OverflowClipBox {
      get { return overflowClipBox_; }
      set {
        overflowClipBox_ = value;
      }
    }

    /// <summary>Field number for the "paragraph_spacing" field.</summary>
    public const int ParagraphSpacingFieldNumber = 45;
    private global::Spelldawn.Protos.Length paragraphSpacing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Length ParagraphSpacing {
      get { return paragraphSpacing_; }
      set {
        paragraphSpacing_ = value;
      }
    }

    /// <summary>Field number for the "image_slice" field.</summary>
    public const int ImageSliceFieldNumber = 46;
    private global::Spelldawn.Protos.LengthGroup imageSlice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.LengthGroup ImageSlice {
      get { return imageSlice_; }
      set {
        imageSlice_ = value;
      }
    }

    /// <summary>Field number for the "text_align" field.</summary>
    public const int TextAlignFieldNumber = 47;
    private global::Spelldawn.Protos.TextAlign textAlign_ = global::Spelldawn.Protos.TextAlign.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.TextAlign TextAlign {
      get { return textAlign_; }
      set {
        textAlign_ = value;
      }
    }

    /// <summary>Field number for the "text_outline_color" field.</summary>
    public const int TextOutlineColorFieldNumber = 48;
    private global::Spelldawn.Protos.Color textOutlineColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Color TextOutlineColor {
      get { return textOutlineColor_; }
      set {
        textOutlineColor_ = value;
      }
    }

    /// <summary>Field number for the "text_outline_width" field.</summary>
    public const int TextOutlineWidthFieldNumber = 49;
    private float textOutlineWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TextOutlineWidth {
      get { return textOutlineWidth_; }
      set {
        textOutlineWidth_ = value;
      }
    }

    /// <summary>Field number for the "text_overflow_position" field.</summary>
    public const int TextOverflowPositionFieldNumber = 50;
    private global::Spelldawn.Protos.TextOverflowPosition textOverflowPosition_ = global::Spelldawn.Protos.TextOverflowPosition.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.TextOverflowPosition TextOverflowPosition {
      get { return textOverflowPosition_; }
      set {
        textOverflowPosition_ = value;
      }
    }

    /// <summary>Field number for the "visibility" field.</summary>
    public const int VisibilityFieldNumber = 51;
    private global::Spelldawn.Protos.Visibility visibility_ = global::Spelldawn.Protos.Visibility.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Visibility Visibility {
      get { return visibility_; }
      set {
        visibility_ = value;
      }
    }

    /// <summary>Field number for the "white_space" field.</summary>
    public const int WhiteSpaceFieldNumber = 52;
    private global::Spelldawn.Protos.WhiteSpace whiteSpace_ = global::Spelldawn.Protos.WhiteSpace.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.WhiteSpace WhiteSpace {
      get { return whiteSpace_; }
      set {
        whiteSpace_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 53;
    private global::Spelldawn.Protos.Length width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Length Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "word_spacing" field.</summary>
    public const int WordSpacingFieldNumber = 54;
    private global::Spelldawn.Protos.Length wordSpacing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Length WordSpacing {
      get { return wordSpacing_; }
      set {
        wordSpacing_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Style);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Style other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AlignContent != other.AlignContent) return false;
      if (AlignItems != other.AlignItems) return false;
      if (AlignSelf != other.AlignSelf) return false;
      if (!object.Equals(BackgroundColor, other.BackgroundColor)) return false;
      if (!object.Equals(BackgroundImage, other.BackgroundImage)) return false;
      if (!object.Equals(BorderColor, other.BorderColor)) return false;
      if (!object.Equals(BorderRadius, other.BorderRadius)) return false;
      if (!object.Equals(BorderWidth, other.BorderWidth)) return false;
      if (!object.Equals(Inset, other.Inset)) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (Display != other.Display) return false;
      if (!object.Equals(FlexBasis, other.FlexBasis)) return false;
      if (FlexDirection != other.FlexDirection) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FlexGrow, other.FlexGrow)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FlexShrink, other.FlexShrink)) return false;
      if (Wrap != other.Wrap) return false;
      if (!object.Equals(FontSize, other.FontSize)) return false;
      if (!object.Equals(Height, other.Height)) return false;
      if (JustifyContent != other.JustifyContent) return false;
      if (!object.Equals(LetterSpacing, other.LetterSpacing)) return false;
      if (!object.Equals(Margin, other.Margin)) return false;
      if (!object.Equals(MaxHeight, other.MaxHeight)) return false;
      if (!object.Equals(MaxWidth, other.MaxWidth)) return false;
      if (!object.Equals(MinHeight, other.MinHeight)) return false;
      if (!object.Equals(MinWidth, other.MinWidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Opacity, other.Opacity)) return false;
      if (Overflow != other.Overflow) return false;
      if (!object.Equals(Padding, other.Padding)) return false;
      if (Position != other.Position) return false;
      if (!object.Equals(Rotate, other.Rotate)) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      if (TextOverflow != other.TextOverflow) return false;
      if (!object.Equals(TextShadow, other.TextShadow)) return false;
      if (!object.Equals(TransformOrigin, other.TransformOrigin)) return false;
      if (!object.Equals(TransitionDelay, other.TransitionDelay)) return false;
      if (!object.Equals(TransitionDuration, other.TransitionDuration)) return false;
      if (TransitionProperty != other.TransitionProperty) return false;
      if (TransitionEasingMode != other.TransitionEasingMode) return false;
      if (!object.Equals(Translate, other.Translate)) return false;
      if (!object.Equals(BackgroundImageTintColor, other.BackgroundImageTintColor)) return false;
      if (ImageScaleMode != other.ImageScaleMode) return false;
      if (!object.Equals(Font, other.Font)) return false;
      if (FontStyle != other.FontStyle) return false;
      if (OverflowClipBox != other.OverflowClipBox) return false;
      if (!object.Equals(ParagraphSpacing, other.ParagraphSpacing)) return false;
      if (!object.Equals(ImageSlice, other.ImageSlice)) return false;
      if (TextAlign != other.TextAlign) return false;
      if (!object.Equals(TextOutlineColor, other.TextOutlineColor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TextOutlineWidth, other.TextOutlineWidth)) return false;
      if (TextOverflowPosition != other.TextOverflowPosition) return false;
      if (Visibility != other.Visibility) return false;
      if (WhiteSpace != other.WhiteSpace) return false;
      if (!object.Equals(Width, other.Width)) return false;
      if (!object.Equals(WordSpacing, other.WordSpacing)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AlignContent != global::Spelldawn.Protos.Align.Unspecified) hash ^= AlignContent.GetHashCode();
      if (AlignItems != global::Spelldawn.Protos.Align.Unspecified) hash ^= AlignItems.GetHashCode();
      if (AlignSelf != global::Spelldawn.Protos.Align.Unspecified) hash ^= AlignSelf.GetHashCode();
      if (backgroundColor_ != null) hash ^= BackgroundColor.GetHashCode();
      if (backgroundImage_ != null) hash ^= BackgroundImage.GetHashCode();
      if (borderColor_ != null) hash ^= BorderColor.GetHashCode();
      if (borderRadius_ != null) hash ^= BorderRadius.GetHashCode();
      if (borderWidth_ != null) hash ^= BorderWidth.GetHashCode();
      if (inset_ != null) hash ^= Inset.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (Display != global::Spelldawn.Protos.DisplayStyle.Unspecified) hash ^= Display.GetHashCode();
      if (flexBasis_ != null) hash ^= FlexBasis.GetHashCode();
      if (FlexDirection != global::Spelldawn.Protos.FlexDirection.Unspecified) hash ^= FlexDirection.GetHashCode();
      if (FlexGrow != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FlexGrow);
      if (FlexShrink != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FlexShrink);
      if (Wrap != global::Spelldawn.Protos.FlexWrap.Unspecified) hash ^= Wrap.GetHashCode();
      if (fontSize_ != null) hash ^= FontSize.GetHashCode();
      if (height_ != null) hash ^= Height.GetHashCode();
      if (JustifyContent != global::Spelldawn.Protos.Justify.Unspecified) hash ^= JustifyContent.GetHashCode();
      if (letterSpacing_ != null) hash ^= LetterSpacing.GetHashCode();
      if (margin_ != null) hash ^= Margin.GetHashCode();
      if (maxHeight_ != null) hash ^= MaxHeight.GetHashCode();
      if (maxWidth_ != null) hash ^= MaxWidth.GetHashCode();
      if (minHeight_ != null) hash ^= MinHeight.GetHashCode();
      if (minWidth_ != null) hash ^= MinWidth.GetHashCode();
      if (Opacity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Opacity);
      if (Overflow != global::Spelldawn.Protos.Overflow.Unspecified) hash ^= Overflow.GetHashCode();
      if (padding_ != null) hash ^= Padding.GetHashCode();
      if (Position != global::Spelldawn.Protos.FlexPosition.Unspecified) hash ^= Position.GetHashCode();
      if (rotate_ != null) hash ^= Rotate.GetHashCode();
      if (scale_ != null) hash ^= Scale.GetHashCode();
      if (TextOverflow != global::Spelldawn.Protos.TextOverflow.Unspecified) hash ^= TextOverflow.GetHashCode();
      if (textShadow_ != null) hash ^= TextShadow.GetHashCode();
      if (transformOrigin_ != null) hash ^= TransformOrigin.GetHashCode();
      if (transitionDelay_ != null) hash ^= TransitionDelay.GetHashCode();
      if (transitionDuration_ != null) hash ^= TransitionDuration.GetHashCode();
      if (TransitionProperty.Length != 0) hash ^= TransitionProperty.GetHashCode();
      if (TransitionEasingMode != global::Spelldawn.Protos.EasingMode.Unspecified) hash ^= TransitionEasingMode.GetHashCode();
      if (translate_ != null) hash ^= Translate.GetHashCode();
      if (backgroundImageTintColor_ != null) hash ^= BackgroundImageTintColor.GetHashCode();
      if (ImageScaleMode != global::Spelldawn.Protos.ImageScaleMode.Unspecified) hash ^= ImageScaleMode.GetHashCode();
      if (font_ != null) hash ^= Font.GetHashCode();
      if (FontStyle != global::Spelldawn.Protos.FontStyle.Unspecified) hash ^= FontStyle.GetHashCode();
      if (OverflowClipBox != global::Spelldawn.Protos.OverflowClipBox.Unspecified) hash ^= OverflowClipBox.GetHashCode();
      if (paragraphSpacing_ != null) hash ^= ParagraphSpacing.GetHashCode();
      if (imageSlice_ != null) hash ^= ImageSlice.GetHashCode();
      if (TextAlign != global::Spelldawn.Protos.TextAlign.Unspecified) hash ^= TextAlign.GetHashCode();
      if (textOutlineColor_ != null) hash ^= TextOutlineColor.GetHashCode();
      if (TextOutlineWidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TextOutlineWidth);
      if (TextOverflowPosition != global::Spelldawn.Protos.TextOverflowPosition.Unspecified) hash ^= TextOverflowPosition.GetHashCode();
      if (Visibility != global::Spelldawn.Protos.Visibility.Unspecified) hash ^= Visibility.GetHashCode();
      if (WhiteSpace != global::Spelldawn.Protos.WhiteSpace.Unspecified) hash ^= WhiteSpace.GetHashCode();
      if (width_ != null) hash ^= Width.GetHashCode();
      if (wordSpacing_ != null) hash ^= WordSpacing.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AlignContent != global::Spelldawn.Protos.Align.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AlignContent);
      }
      if (AlignItems != global::Spelldawn.Protos.Align.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AlignItems);
      }
      if (AlignSelf != global::Spelldawn.Protos.Align.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) AlignSelf);
      }
      if (backgroundColor_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BackgroundColor);
      }
      if (backgroundImage_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BackgroundImage);
      }
      if (borderColor_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(BorderColor);
      }
      if (borderRadius_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BorderRadius);
      }
      if (borderWidth_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(BorderWidth);
      }
      if (inset_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Inset);
      }
      if (color_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Color);
      }
      if (Display != global::Spelldawn.Protos.DisplayStyle.Unspecified) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Display);
      }
      if (flexBasis_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(FlexBasis);
      }
      if (FlexDirection != global::Spelldawn.Protos.FlexDirection.Unspecified) {
        output.WriteRawTag(104);
        output.WriteEnum((int) FlexDirection);
      }
      if (FlexGrow != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(FlexGrow);
      }
      if (FlexShrink != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(FlexShrink);
      }
      if (Wrap != global::Spelldawn.Protos.FlexWrap.Unspecified) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) Wrap);
      }
      if (fontSize_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(FontSize);
      }
      if (height_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Height);
      }
      if (JustifyContent != global::Spelldawn.Protos.Justify.Unspecified) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) JustifyContent);
      }
      if (letterSpacing_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(LetterSpacing);
      }
      if (margin_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Margin);
      }
      if (maxHeight_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(MaxHeight);
      }
      if (maxWidth_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(MaxWidth);
      }
      if (minHeight_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(MinHeight);
      }
      if (minWidth_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(MinWidth);
      }
      if (Opacity != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(Opacity);
      }
      if (Overflow != global::Spelldawn.Protos.Overflow.Unspecified) {
        output.WriteRawTag(216, 1);
        output.WriteEnum((int) Overflow);
      }
      if (padding_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(Padding);
      }
      if (Position != global::Spelldawn.Protos.FlexPosition.Unspecified) {
        output.WriteRawTag(232, 1);
        output.WriteEnum((int) Position);
      }
      if (rotate_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Rotate);
      }
      if (scale_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(Scale);
      }
      if (TextOverflow != global::Spelldawn.Protos.TextOverflow.Unspecified) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) TextOverflow);
      }
      if (textShadow_ != null) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(TextShadow);
      }
      if (transformOrigin_ != null) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(TransformOrigin);
      }
      if (transitionDelay_ != null) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(TransitionDelay);
      }
      if (transitionDuration_ != null) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(TransitionDuration);
      }
      if (TransitionProperty.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(TransitionProperty);
      }
      if (TransitionEasingMode != global::Spelldawn.Protos.EasingMode.Unspecified) {
        output.WriteRawTag(176, 2);
        output.WriteEnum((int) TransitionEasingMode);
      }
      if (translate_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Translate);
      }
      if (backgroundImageTintColor_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(BackgroundImageTintColor);
      }
      if (ImageScaleMode != global::Spelldawn.Protos.ImageScaleMode.Unspecified) {
        output.WriteRawTag(200, 2);
        output.WriteEnum((int) ImageScaleMode);
      }
      if (font_ != null) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(Font);
      }
      if (FontStyle != global::Spelldawn.Protos.FontStyle.Unspecified) {
        output.WriteRawTag(216, 2);
        output.WriteEnum((int) FontStyle);
      }
      if (OverflowClipBox != global::Spelldawn.Protos.OverflowClipBox.Unspecified) {
        output.WriteRawTag(224, 2);
        output.WriteEnum((int) OverflowClipBox);
      }
      if (paragraphSpacing_ != null) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(ParagraphSpacing);
      }
      if (imageSlice_ != null) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(ImageSlice);
      }
      if (TextAlign != global::Spelldawn.Protos.TextAlign.Unspecified) {
        output.WriteRawTag(248, 2);
        output.WriteEnum((int) TextAlign);
      }
      if (textOutlineColor_ != null) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(TextOutlineColor);
      }
      if (TextOutlineWidth != 0F) {
        output.WriteRawTag(141, 3);
        output.WriteFloat(TextOutlineWidth);
      }
      if (TextOverflowPosition != global::Spelldawn.Protos.TextOverflowPosition.Unspecified) {
        output.WriteRawTag(144, 3);
        output.WriteEnum((int) TextOverflowPosition);
      }
      if (Visibility != global::Spelldawn.Protos.Visibility.Unspecified) {
        output.WriteRawTag(152, 3);
        output.WriteEnum((int) Visibility);
      }
      if (WhiteSpace != global::Spelldawn.Protos.WhiteSpace.Unspecified) {
        output.WriteRawTag(160, 3);
        output.WriteEnum((int) WhiteSpace);
      }
      if (width_ != null) {
        output.WriteRawTag(170, 3);
        output.WriteMessage(Width);
      }
      if (wordSpacing_ != null) {
        output.WriteRawTag(178, 3);
        output.WriteMessage(WordSpacing);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AlignContent != global::Spelldawn.Protos.Align.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AlignContent);
      }
      if (AlignItems != global::Spelldawn.Protos.Align.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AlignItems);
      }
      if (AlignSelf != global::Spelldawn.Protos.Align.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) AlignSelf);
      }
      if (backgroundColor_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BackgroundColor);
      }
      if (backgroundImage_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BackgroundImage);
      }
      if (borderColor_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(BorderColor);
      }
      if (borderRadius_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BorderRadius);
      }
      if (borderWidth_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(BorderWidth);
      }
      if (inset_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Inset);
      }
      if (color_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Color);
      }
      if (Display != global::Spelldawn.Protos.DisplayStyle.Unspecified) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Display);
      }
      if (flexBasis_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(FlexBasis);
      }
      if (FlexDirection != global::Spelldawn.Protos.FlexDirection.Unspecified) {
        output.WriteRawTag(104);
        output.WriteEnum((int) FlexDirection);
      }
      if (FlexGrow != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(FlexGrow);
      }
      if (FlexShrink != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(FlexShrink);
      }
      if (Wrap != global::Spelldawn.Protos.FlexWrap.Unspecified) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) Wrap);
      }
      if (fontSize_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(FontSize);
      }
      if (height_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Height);
      }
      if (JustifyContent != global::Spelldawn.Protos.Justify.Unspecified) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) JustifyContent);
      }
      if (letterSpacing_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(LetterSpacing);
      }
      if (margin_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Margin);
      }
      if (maxHeight_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(MaxHeight);
      }
      if (maxWidth_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(MaxWidth);
      }
      if (minHeight_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(MinHeight);
      }
      if (minWidth_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(MinWidth);
      }
      if (Opacity != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(Opacity);
      }
      if (Overflow != global::Spelldawn.Protos.Overflow.Unspecified) {
        output.WriteRawTag(216, 1);
        output.WriteEnum((int) Overflow);
      }
      if (padding_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(Padding);
      }
      if (Position != global::Spelldawn.Protos.FlexPosition.Unspecified) {
        output.WriteRawTag(232, 1);
        output.WriteEnum((int) Position);
      }
      if (rotate_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Rotate);
      }
      if (scale_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(Scale);
      }
      if (TextOverflow != global::Spelldawn.Protos.TextOverflow.Unspecified) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) TextOverflow);
      }
      if (textShadow_ != null) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(TextShadow);
      }
      if (transformOrigin_ != null) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(TransformOrigin);
      }
      if (transitionDelay_ != null) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(TransitionDelay);
      }
      if (transitionDuration_ != null) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(TransitionDuration);
      }
      if (TransitionProperty.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(TransitionProperty);
      }
      if (TransitionEasingMode != global::Spelldawn.Protos.EasingMode.Unspecified) {
        output.WriteRawTag(176, 2);
        output.WriteEnum((int) TransitionEasingMode);
      }
      if (translate_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Translate);
      }
      if (backgroundImageTintColor_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(BackgroundImageTintColor);
      }
      if (ImageScaleMode != global::Spelldawn.Protos.ImageScaleMode.Unspecified) {
        output.WriteRawTag(200, 2);
        output.WriteEnum((int) ImageScaleMode);
      }
      if (font_ != null) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(Font);
      }
      if (FontStyle != global::Spelldawn.Protos.FontStyle.Unspecified) {
        output.WriteRawTag(216, 2);
        output.WriteEnum((int) FontStyle);
      }
      if (OverflowClipBox != global::Spelldawn.Protos.OverflowClipBox.Unspecified) {
        output.WriteRawTag(224, 2);
        output.WriteEnum((int) OverflowClipBox);
      }
      if (paragraphSpacing_ != null) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(ParagraphSpacing);
      }
      if (imageSlice_ != null) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(ImageSlice);
      }
      if (TextAlign != global::Spelldawn.Protos.TextAlign.Unspecified) {
        output.WriteRawTag(248, 2);
        output.WriteEnum((int) TextAlign);
      }
      if (textOutlineColor_ != null) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(TextOutlineColor);
      }
      if (TextOutlineWidth != 0F) {
        output.WriteRawTag(141, 3);
        output.WriteFloat(TextOutlineWidth);
      }
      if (TextOverflowPosition != global::Spelldawn.Protos.TextOverflowPosition.Unspecified) {
        output.WriteRawTag(144, 3);
        output.WriteEnum((int) TextOverflowPosition);
      }
      if (Visibility != global::Spelldawn.Protos.Visibility.Unspecified) {
        output.WriteRawTag(152, 3);
        output.WriteEnum((int) Visibility);
      }
      if (WhiteSpace != global::Spelldawn.Protos.WhiteSpace.Unspecified) {
        output.WriteRawTag(160, 3);
        output.WriteEnum((int) WhiteSpace);
      }
      if (width_ != null) {
        output.WriteRawTag(170, 3);
        output.WriteMessage(Width);
      }
      if (wordSpacing_ != null) {
        output.WriteRawTag(178, 3);
        output.WriteMessage(WordSpacing);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AlignContent != global::Spelldawn.Protos.Align.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AlignContent);
      }
      if (AlignItems != global::Spelldawn.Protos.Align.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AlignItems);
      }
      if (AlignSelf != global::Spelldawn.Protos.Align.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AlignSelf);
      }
      if (backgroundColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BackgroundColor);
      }
      if (backgroundImage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BackgroundImage);
      }
      if (borderColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BorderColor);
      }
      if (borderRadius_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BorderRadius);
      }
      if (borderWidth_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BorderWidth);
      }
      if (inset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Inset);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (Display != global::Spelldawn.Protos.DisplayStyle.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Display);
      }
      if (flexBasis_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FlexBasis);
      }
      if (FlexDirection != global::Spelldawn.Protos.FlexDirection.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FlexDirection);
      }
      if (FlexGrow != 0F) {
        size += 1 + 4;
      }
      if (FlexShrink != 0F) {
        size += 1 + 4;
      }
      if (Wrap != global::Spelldawn.Protos.FlexWrap.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Wrap);
      }
      if (fontSize_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FontSize);
      }
      if (height_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Height);
      }
      if (JustifyContent != global::Spelldawn.Protos.Justify.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) JustifyContent);
      }
      if (letterSpacing_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LetterSpacing);
      }
      if (margin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Margin);
      }
      if (maxHeight_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaxHeight);
      }
      if (maxWidth_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaxWidth);
      }
      if (minHeight_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinHeight);
      }
      if (minWidth_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinWidth);
      }
      if (Opacity != 0F) {
        size += 2 + 4;
      }
      if (Overflow != global::Spelldawn.Protos.Overflow.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Overflow);
      }
      if (padding_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Padding);
      }
      if (Position != global::Spelldawn.Protos.FlexPosition.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Position);
      }
      if (rotate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Rotate);
      }
      if (scale_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      if (TextOverflow != global::Spelldawn.Protos.TextOverflow.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TextOverflow);
      }
      if (textShadow_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TextShadow);
      }
      if (transformOrigin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransformOrigin);
      }
      if (transitionDelay_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransitionDelay);
      }
      if (transitionDuration_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransitionDuration);
      }
      if (TransitionProperty.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TransitionProperty);
      }
      if (TransitionEasingMode != global::Spelldawn.Protos.EasingMode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TransitionEasingMode);
      }
      if (translate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Translate);
      }
      if (backgroundImageTintColor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BackgroundImageTintColor);
      }
      if (ImageScaleMode != global::Spelldawn.Protos.ImageScaleMode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ImageScaleMode);
      }
      if (font_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Font);
      }
      if (FontStyle != global::Spelldawn.Protos.FontStyle.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FontStyle);
      }
      if (OverflowClipBox != global::Spelldawn.Protos.OverflowClipBox.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OverflowClipBox);
      }
      if (paragraphSpacing_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ParagraphSpacing);
      }
      if (imageSlice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ImageSlice);
      }
      if (TextAlign != global::Spelldawn.Protos.TextAlign.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TextAlign);
      }
      if (textOutlineColor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TextOutlineColor);
      }
      if (TextOutlineWidth != 0F) {
        size += 2 + 4;
      }
      if (TextOverflowPosition != global::Spelldawn.Protos.TextOverflowPosition.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TextOverflowPosition);
      }
      if (Visibility != global::Spelldawn.Protos.Visibility.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Visibility);
      }
      if (WhiteSpace != global::Spelldawn.Protos.WhiteSpace.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) WhiteSpace);
      }
      if (width_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Width);
      }
      if (wordSpacing_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WordSpacing);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Style other) {
      if (other == null) {
        return;
      }
      if (other.AlignContent != global::Spelldawn.Protos.Align.Unspecified) {
        AlignContent = other.AlignContent;
      }
      if (other.AlignItems != global::Spelldawn.Protos.Align.Unspecified) {
        AlignItems = other.AlignItems;
      }
      if (other.AlignSelf != global::Spelldawn.Protos.Align.Unspecified) {
        AlignSelf = other.AlignSelf;
      }
      if (other.backgroundColor_ != null) {
        if (backgroundColor_ == null) {
          BackgroundColor = new global::Spelldawn.Protos.Color();
        }
        BackgroundColor.MergeFrom(other.BackgroundColor);
      }
      if (other.backgroundImage_ != null) {
        if (backgroundImage_ == null) {
          BackgroundImage = new global::Spelldawn.Protos.SpriteAddress();
        }
        BackgroundImage.MergeFrom(other.BackgroundImage);
      }
      if (other.borderColor_ != null) {
        if (borderColor_ == null) {
          BorderColor = new global::Spelldawn.Protos.BorderColor();
        }
        BorderColor.MergeFrom(other.BorderColor);
      }
      if (other.borderRadius_ != null) {
        if (borderRadius_ == null) {
          BorderRadius = new global::Spelldawn.Protos.BorderRadius();
        }
        BorderRadius.MergeFrom(other.BorderRadius);
      }
      if (other.borderWidth_ != null) {
        if (borderWidth_ == null) {
          BorderWidth = new global::Spelldawn.Protos.LengthGroup();
        }
        BorderWidth.MergeFrom(other.BorderWidth);
      }
      if (other.inset_ != null) {
        if (inset_ == null) {
          Inset = new global::Spelldawn.Protos.LengthGroup();
        }
        Inset.MergeFrom(other.Inset);
      }
      if (other.color_ != null) {
        if (color_ == null) {
          Color = new global::Spelldawn.Protos.Color();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.Display != global::Spelldawn.Protos.DisplayStyle.Unspecified) {
        Display = other.Display;
      }
      if (other.flexBasis_ != null) {
        if (flexBasis_ == null) {
          FlexBasis = new global::Spelldawn.Protos.Length();
        }
        FlexBasis.MergeFrom(other.FlexBasis);
      }
      if (other.FlexDirection != global::Spelldawn.Protos.FlexDirection.Unspecified) {
        FlexDirection = other.FlexDirection;
      }
      if (other.FlexGrow != 0F) {
        FlexGrow = other.FlexGrow;
      }
      if (other.FlexShrink != 0F) {
        FlexShrink = other.FlexShrink;
      }
      if (other.Wrap != global::Spelldawn.Protos.FlexWrap.Unspecified) {
        Wrap = other.Wrap;
      }
      if (other.fontSize_ != null) {
        if (fontSize_ == null) {
          FontSize = new global::Spelldawn.Protos.Length();
        }
        FontSize.MergeFrom(other.FontSize);
      }
      if (other.height_ != null) {
        if (height_ == null) {
          Height = new global::Spelldawn.Protos.Length();
        }
        Height.MergeFrom(other.Height);
      }
      if (other.JustifyContent != global::Spelldawn.Protos.Justify.Unspecified) {
        JustifyContent = other.JustifyContent;
      }
      if (other.letterSpacing_ != null) {
        if (letterSpacing_ == null) {
          LetterSpacing = new global::Spelldawn.Protos.Length();
        }
        LetterSpacing.MergeFrom(other.LetterSpacing);
      }
      if (other.margin_ != null) {
        if (margin_ == null) {
          Margin = new global::Spelldawn.Protos.LengthGroup();
        }
        Margin.MergeFrom(other.Margin);
      }
      if (other.maxHeight_ != null) {
        if (maxHeight_ == null) {
          MaxHeight = new global::Spelldawn.Protos.Length();
        }
        MaxHeight.MergeFrom(other.MaxHeight);
      }
      if (other.maxWidth_ != null) {
        if (maxWidth_ == null) {
          MaxWidth = new global::Spelldawn.Protos.Length();
        }
        MaxWidth.MergeFrom(other.MaxWidth);
      }
      if (other.minHeight_ != null) {
        if (minHeight_ == null) {
          MinHeight = new global::Spelldawn.Protos.Length();
        }
        MinHeight.MergeFrom(other.MinHeight);
      }
      if (other.minWidth_ != null) {
        if (minWidth_ == null) {
          MinWidth = new global::Spelldawn.Protos.Length();
        }
        MinWidth.MergeFrom(other.MinWidth);
      }
      if (other.Opacity != 0F) {
        Opacity = other.Opacity;
      }
      if (other.Overflow != global::Spelldawn.Protos.Overflow.Unspecified) {
        Overflow = other.Overflow;
      }
      if (other.padding_ != null) {
        if (padding_ == null) {
          Padding = new global::Spelldawn.Protos.LengthGroup();
        }
        Padding.MergeFrom(other.Padding);
      }
      if (other.Position != global::Spelldawn.Protos.FlexPosition.Unspecified) {
        Position = other.Position;
      }
      if (other.rotate_ != null) {
        if (rotate_ == null) {
          Rotate = new global::Spelldawn.Protos.Rotate();
        }
        Rotate.MergeFrom(other.Rotate);
      }
      if (other.scale_ != null) {
        if (scale_ == null) {
          Scale = new global::Spelldawn.Protos.Scale();
        }
        Scale.MergeFrom(other.Scale);
      }
      if (other.TextOverflow != global::Spelldawn.Protos.TextOverflow.Unspecified) {
        TextOverflow = other.TextOverflow;
      }
      if (other.textShadow_ != null) {
        if (textShadow_ == null) {
          TextShadow = new global::Spelldawn.Protos.TextShadow();
        }
        TextShadow.MergeFrom(other.TextShadow);
      }
      if (other.transformOrigin_ != null) {
        if (transformOrigin_ == null) {
          TransformOrigin = new global::Spelldawn.Protos.Translate();
        }
        TransformOrigin.MergeFrom(other.TransformOrigin);
      }
      if (other.transitionDelay_ != null) {
        if (transitionDelay_ == null) {
          TransitionDelay = new global::Spelldawn.Protos.TimeValue();
        }
        TransitionDelay.MergeFrom(other.TransitionDelay);
      }
      if (other.transitionDuration_ != null) {
        if (transitionDuration_ == null) {
          TransitionDuration = new global::Spelldawn.Protos.TimeValue();
        }
        TransitionDuration.MergeFrom(other.TransitionDuration);
      }
      if (other.TransitionProperty.Length != 0) {
        TransitionProperty = other.TransitionProperty;
      }
      if (other.TransitionEasingMode != global::Spelldawn.Protos.EasingMode.Unspecified) {
        TransitionEasingMode = other.TransitionEasingMode;
      }
      if (other.translate_ != null) {
        if (translate_ == null) {
          Translate = new global::Spelldawn.Protos.Translate();
        }
        Translate.MergeFrom(other.Translate);
      }
      if (other.backgroundImageTintColor_ != null) {
        if (backgroundImageTintColor_ == null) {
          BackgroundImageTintColor = new global::Spelldawn.Protos.Color();
        }
        BackgroundImageTintColor.MergeFrom(other.BackgroundImageTintColor);
      }
      if (other.ImageScaleMode != global::Spelldawn.Protos.ImageScaleMode.Unspecified) {
        ImageScaleMode = other.ImageScaleMode;
      }
      if (other.font_ != null) {
        if (font_ == null) {
          Font = new global::Spelldawn.Protos.FontAddress();
        }
        Font.MergeFrom(other.Font);
      }
      if (other.FontStyle != global::Spelldawn.Protos.FontStyle.Unspecified) {
        FontStyle = other.FontStyle;
      }
      if (other.OverflowClipBox != global::Spelldawn.Protos.OverflowClipBox.Unspecified) {
        OverflowClipBox = other.OverflowClipBox;
      }
      if (other.paragraphSpacing_ != null) {
        if (paragraphSpacing_ == null) {
          ParagraphSpacing = new global::Spelldawn.Protos.Length();
        }
        ParagraphSpacing.MergeFrom(other.ParagraphSpacing);
      }
      if (other.imageSlice_ != null) {
        if (imageSlice_ == null) {
          ImageSlice = new global::Spelldawn.Protos.LengthGroup();
        }
        ImageSlice.MergeFrom(other.ImageSlice);
      }
      if (other.TextAlign != global::Spelldawn.Protos.TextAlign.Unspecified) {
        TextAlign = other.TextAlign;
      }
      if (other.textOutlineColor_ != null) {
        if (textOutlineColor_ == null) {
          TextOutlineColor = new global::Spelldawn.Protos.Color();
        }
        TextOutlineColor.MergeFrom(other.TextOutlineColor);
      }
      if (other.TextOutlineWidth != 0F) {
        TextOutlineWidth = other.TextOutlineWidth;
      }
      if (other.TextOverflowPosition != global::Spelldawn.Protos.TextOverflowPosition.Unspecified) {
        TextOverflowPosition = other.TextOverflowPosition;
      }
      if (other.Visibility != global::Spelldawn.Protos.Visibility.Unspecified) {
        Visibility = other.Visibility;
      }
      if (other.WhiteSpace != global::Spelldawn.Protos.WhiteSpace.Unspecified) {
        WhiteSpace = other.WhiteSpace;
      }
      if (other.width_ != null) {
        if (width_ == null) {
          Width = new global::Spelldawn.Protos.Length();
        }
        Width.MergeFrom(other.Width);
      }
      if (other.wordSpacing_ != null) {
        if (wordSpacing_ == null) {
          WordSpacing = new global::Spelldawn.Protos.Length();
        }
        WordSpacing.MergeFrom(other.WordSpacing);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AlignContent = (global::Spelldawn.Protos.Align) input.ReadEnum();
            break;
          }
          case 16: {
            AlignItems = (global::Spelldawn.Protos.Align) input.ReadEnum();
            break;
          }
          case 24: {
            AlignSelf = (global::Spelldawn.Protos.Align) input.ReadEnum();
            break;
          }
          case 34: {
            if (backgroundColor_ == null) {
              BackgroundColor = new global::Spelldawn.Protos.Color();
            }
            input.ReadMessage(BackgroundColor);
            break;
          }
          case 42: {
            if (backgroundImage_ == null) {
              BackgroundImage = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(BackgroundImage);
            break;
          }
          case 50: {
            if (borderColor_ == null) {
              BorderColor = new global::Spelldawn.Protos.BorderColor();
            }
            input.ReadMessage(BorderColor);
            break;
          }
          case 58: {
            if (borderRadius_ == null) {
              BorderRadius = new global::Spelldawn.Protos.BorderRadius();
            }
            input.ReadMessage(BorderRadius);
            break;
          }
          case 66: {
            if (borderWidth_ == null) {
              BorderWidth = new global::Spelldawn.Protos.LengthGroup();
            }
            input.ReadMessage(BorderWidth);
            break;
          }
          case 74: {
            if (inset_ == null) {
              Inset = new global::Spelldawn.Protos.LengthGroup();
            }
            input.ReadMessage(Inset);
            break;
          }
          case 82: {
            if (color_ == null) {
              Color = new global::Spelldawn.Protos.Color();
            }
            input.ReadMessage(Color);
            break;
          }
          case 88: {
            Display = (global::Spelldawn.Protos.DisplayStyle) input.ReadEnum();
            break;
          }
          case 98: {
            if (flexBasis_ == null) {
              FlexBasis = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(FlexBasis);
            break;
          }
          case 104: {
            FlexDirection = (global::Spelldawn.Protos.FlexDirection) input.ReadEnum();
            break;
          }
          case 117: {
            FlexGrow = input.ReadFloat();
            break;
          }
          case 125: {
            FlexShrink = input.ReadFloat();
            break;
          }
          case 128: {
            Wrap = (global::Spelldawn.Protos.FlexWrap) input.ReadEnum();
            break;
          }
          case 138: {
            if (fontSize_ == null) {
              FontSize = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(FontSize);
            break;
          }
          case 146: {
            if (height_ == null) {
              Height = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(Height);
            break;
          }
          case 152: {
            JustifyContent = (global::Spelldawn.Protos.Justify) input.ReadEnum();
            break;
          }
          case 162: {
            if (letterSpacing_ == null) {
              LetterSpacing = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(LetterSpacing);
            break;
          }
          case 170: {
            if (margin_ == null) {
              Margin = new global::Spelldawn.Protos.LengthGroup();
            }
            input.ReadMessage(Margin);
            break;
          }
          case 178: {
            if (maxHeight_ == null) {
              MaxHeight = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(MaxHeight);
            break;
          }
          case 186: {
            if (maxWidth_ == null) {
              MaxWidth = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(MaxWidth);
            break;
          }
          case 194: {
            if (minHeight_ == null) {
              MinHeight = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(MinHeight);
            break;
          }
          case 202: {
            if (minWidth_ == null) {
              MinWidth = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(MinWidth);
            break;
          }
          case 213: {
            Opacity = input.ReadFloat();
            break;
          }
          case 216: {
            Overflow = (global::Spelldawn.Protos.Overflow) input.ReadEnum();
            break;
          }
          case 226: {
            if (padding_ == null) {
              Padding = new global::Spelldawn.Protos.LengthGroup();
            }
            input.ReadMessage(Padding);
            break;
          }
          case 232: {
            Position = (global::Spelldawn.Protos.FlexPosition) input.ReadEnum();
            break;
          }
          case 242: {
            if (rotate_ == null) {
              Rotate = new global::Spelldawn.Protos.Rotate();
            }
            input.ReadMessage(Rotate);
            break;
          }
          case 250: {
            if (scale_ == null) {
              Scale = new global::Spelldawn.Protos.Scale();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 256: {
            TextOverflow = (global::Spelldawn.Protos.TextOverflow) input.ReadEnum();
            break;
          }
          case 266: {
            if (textShadow_ == null) {
              TextShadow = new global::Spelldawn.Protos.TextShadow();
            }
            input.ReadMessage(TextShadow);
            break;
          }
          case 274: {
            if (transformOrigin_ == null) {
              TransformOrigin = new global::Spelldawn.Protos.Translate();
            }
            input.ReadMessage(TransformOrigin);
            break;
          }
          case 282: {
            if (transitionDelay_ == null) {
              TransitionDelay = new global::Spelldawn.Protos.TimeValue();
            }
            input.ReadMessage(TransitionDelay);
            break;
          }
          case 290: {
            if (transitionDuration_ == null) {
              TransitionDuration = new global::Spelldawn.Protos.TimeValue();
            }
            input.ReadMessage(TransitionDuration);
            break;
          }
          case 298: {
            TransitionProperty = input.ReadString();
            break;
          }
          case 304: {
            TransitionEasingMode = (global::Spelldawn.Protos.EasingMode) input.ReadEnum();
            break;
          }
          case 314: {
            if (translate_ == null) {
              Translate = new global::Spelldawn.Protos.Translate();
            }
            input.ReadMessage(Translate);
            break;
          }
          case 322: {
            if (backgroundImageTintColor_ == null) {
              BackgroundImageTintColor = new global::Spelldawn.Protos.Color();
            }
            input.ReadMessage(BackgroundImageTintColor);
            break;
          }
          case 328: {
            ImageScaleMode = (global::Spelldawn.Protos.ImageScaleMode) input.ReadEnum();
            break;
          }
          case 338: {
            if (font_ == null) {
              Font = new global::Spelldawn.Protos.FontAddress();
            }
            input.ReadMessage(Font);
            break;
          }
          case 344: {
            FontStyle = (global::Spelldawn.Protos.FontStyle) input.ReadEnum();
            break;
          }
          case 352: {
            OverflowClipBox = (global::Spelldawn.Protos.OverflowClipBox) input.ReadEnum();
            break;
          }
          case 362: {
            if (paragraphSpacing_ == null) {
              ParagraphSpacing = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(ParagraphSpacing);
            break;
          }
          case 370: {
            if (imageSlice_ == null) {
              ImageSlice = new global::Spelldawn.Protos.LengthGroup();
            }
            input.ReadMessage(ImageSlice);
            break;
          }
          case 376: {
            TextAlign = (global::Spelldawn.Protos.TextAlign) input.ReadEnum();
            break;
          }
          case 386: {
            if (textOutlineColor_ == null) {
              TextOutlineColor = new global::Spelldawn.Protos.Color();
            }
            input.ReadMessage(TextOutlineColor);
            break;
          }
          case 397: {
            TextOutlineWidth = input.ReadFloat();
            break;
          }
          case 400: {
            TextOverflowPosition = (global::Spelldawn.Protos.TextOverflowPosition) input.ReadEnum();
            break;
          }
          case 408: {
            Visibility = (global::Spelldawn.Protos.Visibility) input.ReadEnum();
            break;
          }
          case 416: {
            WhiteSpace = (global::Spelldawn.Protos.WhiteSpace) input.ReadEnum();
            break;
          }
          case 426: {
            if (width_ == null) {
              Width = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(Width);
            break;
          }
          case 434: {
            if (wordSpacing_ == null) {
              WordSpacing = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(WordSpacing);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AlignContent = (global::Spelldawn.Protos.Align) input.ReadEnum();
            break;
          }
          case 16: {
            AlignItems = (global::Spelldawn.Protos.Align) input.ReadEnum();
            break;
          }
          case 24: {
            AlignSelf = (global::Spelldawn.Protos.Align) input.ReadEnum();
            break;
          }
          case 34: {
            if (backgroundColor_ == null) {
              BackgroundColor = new global::Spelldawn.Protos.Color();
            }
            input.ReadMessage(BackgroundColor);
            break;
          }
          case 42: {
            if (backgroundImage_ == null) {
              BackgroundImage = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(BackgroundImage);
            break;
          }
          case 50: {
            if (borderColor_ == null) {
              BorderColor = new global::Spelldawn.Protos.BorderColor();
            }
            input.ReadMessage(BorderColor);
            break;
          }
          case 58: {
            if (borderRadius_ == null) {
              BorderRadius = new global::Spelldawn.Protos.BorderRadius();
            }
            input.ReadMessage(BorderRadius);
            break;
          }
          case 66: {
            if (borderWidth_ == null) {
              BorderWidth = new global::Spelldawn.Protos.LengthGroup();
            }
            input.ReadMessage(BorderWidth);
            break;
          }
          case 74: {
            if (inset_ == null) {
              Inset = new global::Spelldawn.Protos.LengthGroup();
            }
            input.ReadMessage(Inset);
            break;
          }
          case 82: {
            if (color_ == null) {
              Color = new global::Spelldawn.Protos.Color();
            }
            input.ReadMessage(Color);
            break;
          }
          case 88: {
            Display = (global::Spelldawn.Protos.DisplayStyle) input.ReadEnum();
            break;
          }
          case 98: {
            if (flexBasis_ == null) {
              FlexBasis = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(FlexBasis);
            break;
          }
          case 104: {
            FlexDirection = (global::Spelldawn.Protos.FlexDirection) input.ReadEnum();
            break;
          }
          case 117: {
            FlexGrow = input.ReadFloat();
            break;
          }
          case 125: {
            FlexShrink = input.ReadFloat();
            break;
          }
          case 128: {
            Wrap = (global::Spelldawn.Protos.FlexWrap) input.ReadEnum();
            break;
          }
          case 138: {
            if (fontSize_ == null) {
              FontSize = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(FontSize);
            break;
          }
          case 146: {
            if (height_ == null) {
              Height = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(Height);
            break;
          }
          case 152: {
            JustifyContent = (global::Spelldawn.Protos.Justify) input.ReadEnum();
            break;
          }
          case 162: {
            if (letterSpacing_ == null) {
              LetterSpacing = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(LetterSpacing);
            break;
          }
          case 170: {
            if (margin_ == null) {
              Margin = new global::Spelldawn.Protos.LengthGroup();
            }
            input.ReadMessage(Margin);
            break;
          }
          case 178: {
            if (maxHeight_ == null) {
              MaxHeight = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(MaxHeight);
            break;
          }
          case 186: {
            if (maxWidth_ == null) {
              MaxWidth = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(MaxWidth);
            break;
          }
          case 194: {
            if (minHeight_ == null) {
              MinHeight = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(MinHeight);
            break;
          }
          case 202: {
            if (minWidth_ == null) {
              MinWidth = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(MinWidth);
            break;
          }
          case 213: {
            Opacity = input.ReadFloat();
            break;
          }
          case 216: {
            Overflow = (global::Spelldawn.Protos.Overflow) input.ReadEnum();
            break;
          }
          case 226: {
            if (padding_ == null) {
              Padding = new global::Spelldawn.Protos.LengthGroup();
            }
            input.ReadMessage(Padding);
            break;
          }
          case 232: {
            Position = (global::Spelldawn.Protos.FlexPosition) input.ReadEnum();
            break;
          }
          case 242: {
            if (rotate_ == null) {
              Rotate = new global::Spelldawn.Protos.Rotate();
            }
            input.ReadMessage(Rotate);
            break;
          }
          case 250: {
            if (scale_ == null) {
              Scale = new global::Spelldawn.Protos.Scale();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 256: {
            TextOverflow = (global::Spelldawn.Protos.TextOverflow) input.ReadEnum();
            break;
          }
          case 266: {
            if (textShadow_ == null) {
              TextShadow = new global::Spelldawn.Protos.TextShadow();
            }
            input.ReadMessage(TextShadow);
            break;
          }
          case 274: {
            if (transformOrigin_ == null) {
              TransformOrigin = new global::Spelldawn.Protos.Translate();
            }
            input.ReadMessage(TransformOrigin);
            break;
          }
          case 282: {
            if (transitionDelay_ == null) {
              TransitionDelay = new global::Spelldawn.Protos.TimeValue();
            }
            input.ReadMessage(TransitionDelay);
            break;
          }
          case 290: {
            if (transitionDuration_ == null) {
              TransitionDuration = new global::Spelldawn.Protos.TimeValue();
            }
            input.ReadMessage(TransitionDuration);
            break;
          }
          case 298: {
            TransitionProperty = input.ReadString();
            break;
          }
          case 304: {
            TransitionEasingMode = (global::Spelldawn.Protos.EasingMode) input.ReadEnum();
            break;
          }
          case 314: {
            if (translate_ == null) {
              Translate = new global::Spelldawn.Protos.Translate();
            }
            input.ReadMessage(Translate);
            break;
          }
          case 322: {
            if (backgroundImageTintColor_ == null) {
              BackgroundImageTintColor = new global::Spelldawn.Protos.Color();
            }
            input.ReadMessage(BackgroundImageTintColor);
            break;
          }
          case 328: {
            ImageScaleMode = (global::Spelldawn.Protos.ImageScaleMode) input.ReadEnum();
            break;
          }
          case 338: {
            if (font_ == null) {
              Font = new global::Spelldawn.Protos.FontAddress();
            }
            input.ReadMessage(Font);
            break;
          }
          case 344: {
            FontStyle = (global::Spelldawn.Protos.FontStyle) input.ReadEnum();
            break;
          }
          case 352: {
            OverflowClipBox = (global::Spelldawn.Protos.OverflowClipBox) input.ReadEnum();
            break;
          }
          case 362: {
            if (paragraphSpacing_ == null) {
              ParagraphSpacing = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(ParagraphSpacing);
            break;
          }
          case 370: {
            if (imageSlice_ == null) {
              ImageSlice = new global::Spelldawn.Protos.LengthGroup();
            }
            input.ReadMessage(ImageSlice);
            break;
          }
          case 376: {
            TextAlign = (global::Spelldawn.Protos.TextAlign) input.ReadEnum();
            break;
          }
          case 386: {
            if (textOutlineColor_ == null) {
              TextOutlineColor = new global::Spelldawn.Protos.Color();
            }
            input.ReadMessage(TextOutlineColor);
            break;
          }
          case 397: {
            TextOutlineWidth = input.ReadFloat();
            break;
          }
          case 400: {
            TextOverflowPosition = (global::Spelldawn.Protos.TextOverflowPosition) input.ReadEnum();
            break;
          }
          case 408: {
            Visibility = (global::Spelldawn.Protos.Visibility) input.ReadEnum();
            break;
          }
          case 416: {
            WhiteSpace = (global::Spelldawn.Protos.WhiteSpace) input.ReadEnum();
            break;
          }
          case 426: {
            if (width_ == null) {
              Width = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(Width);
            break;
          }
          case 434: {
            if (wordSpacing_ == null) {
              WordSpacing = new global::Spelldawn.Protos.Length();
            }
            input.ReadMessage(WordSpacing);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Text : pb::IMessage<Text>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Text> _parser = new pb::MessageParser<Text>(() => new Text());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Text> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.NodeReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Text() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Text(Text other) : this() {
      style_ = other.style_ != null ? other.style_.Clone() : null;
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Text Clone() {
      return new Text(this);
    }

    /// <summary>Field number for the "style" field.</summary>
    public const int StyleFieldNumber = 1;
    private global::Spelldawn.Protos.Style style_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Style Style {
      get { return style_; }
      set {
        style_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int Text_FieldNumber = 2;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text_ {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Text);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Text other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Style, other.Style)) return false;
      if (Text_ != other.Text_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (style_ != null) hash ^= Style.GetHashCode();
      if (Text_.Length != 0) hash ^= Text_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (style_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Style);
      }
      if (Text_.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Text_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (style_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Style);
      }
      if (Text_.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Text_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (style_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Style);
      }
      if (Text_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Text other) {
      if (other == null) {
        return;
      }
      if (other.style_ != null) {
        if (style_ == null) {
          Style = new global::Spelldawn.Protos.Style();
        }
        Style.MergeFrom(other.Style);
      }
      if (other.Text_.Length != 0) {
        Text_ = other.Text_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (style_ == null) {
              Style = new global::Spelldawn.Protos.Style();
            }
            input.ReadMessage(Style);
            break;
          }
          case 18: {
            Text_ = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (style_ == null) {
              Style = new global::Spelldawn.Protos.Style();
            }
            input.ReadMessage(Style);
            break;
          }
          case 18: {
            Text_ = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Flexbox : pb::IMessage<Flexbox>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Flexbox> _parser = new pb::MessageParser<Flexbox>(() => new Flexbox());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Flexbox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.NodeReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Flexbox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Flexbox(Flexbox other) : this() {
      style_ = other.style_ != null ? other.style_.Clone() : null;
      children_ = other.children_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Flexbox Clone() {
      return new Flexbox(this);
    }

    /// <summary>Field number for the "style" field.</summary>
    public const int StyleFieldNumber = 1;
    private global::Spelldawn.Protos.Style style_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Style Style {
      get { return style_; }
      set {
        style_ = value;
      }
    }

    /// <summary>Field number for the "children" field.</summary>
    public const int ChildrenFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.Node> _repeated_children_codec
        = pb::FieldCodec.ForMessage(18, global::Spelldawn.Protos.Node.Parser);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.Node> children_ = new pbc::RepeatedField<global::Spelldawn.Protos.Node>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.Node> Children {
      get { return children_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Flexbox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Flexbox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Style, other.Style)) return false;
      if(!children_.Equals(other.children_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (style_ != null) hash ^= Style.GetHashCode();
      hash ^= children_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (style_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Style);
      }
      children_.WriteTo(output, _repeated_children_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (style_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Style);
      }
      children_.WriteTo(ref output, _repeated_children_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (style_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Style);
      }
      size += children_.CalculateSize(_repeated_children_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Flexbox other) {
      if (other == null) {
        return;
      }
      if (other.style_ != null) {
        if (style_ == null) {
          Style = new global::Spelldawn.Protos.Style();
        }
        Style.MergeFrom(other.Style);
      }
      children_.Add(other.children_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (style_ == null) {
              Style = new global::Spelldawn.Protos.Style();
            }
            input.ReadMessage(Style);
            break;
          }
          case 18: {
            children_.AddEntriesFrom(input, _repeated_children_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (style_ == null) {
              Style = new global::Spelldawn.Protos.Style();
            }
            input.ReadMessage(Style);
            break;
          }
          case 18: {
            children_.AddEntriesFrom(ref input, _repeated_children_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Node : pb::IMessage<Node>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Node> _parser = new pb::MessageParser<Node>(() => new Node());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Node> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.NodeReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node(Node other) : this() {
      switch (other.NodeCase) {
        case NodeOneofCase.Flexbox:
          Flexbox = other.Flexbox.Clone();
          break;
        case NodeOneofCase.Text:
          Text = other.Text.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node Clone() {
      return new Node(this);
    }

    /// <summary>Field number for the "flexbox" field.</summary>
    public const int FlexboxFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Flexbox Flexbox {
      get { return nodeCase_ == NodeOneofCase.Flexbox ? (global::Spelldawn.Protos.Flexbox) node_ : null; }
      set {
        node_ = value;
        nodeCase_ = value == null ? NodeOneofCase.None : NodeOneofCase.Flexbox;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Text Text {
      get { return nodeCase_ == NodeOneofCase.Text ? (global::Spelldawn.Protos.Text) node_ : null; }
      set {
        node_ = value;
        nodeCase_ = value == null ? NodeOneofCase.None : NodeOneofCase.Text;
      }
    }

    private object node_;
    /// <summary>Enum of possible cases for the "node" oneof.</summary>
    public enum NodeOneofCase {
      None = 0,
      Flexbox = 1,
      Text = 2,
    }
    private NodeOneofCase nodeCase_ = NodeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeOneofCase NodeCase {
      get { return nodeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNode() {
      nodeCase_ = NodeOneofCase.None;
      node_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Node);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Node other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Flexbox, other.Flexbox)) return false;
      if (!object.Equals(Text, other.Text)) return false;
      if (NodeCase != other.NodeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (nodeCase_ == NodeOneofCase.Flexbox) hash ^= Flexbox.GetHashCode();
      if (nodeCase_ == NodeOneofCase.Text) hash ^= Text.GetHashCode();
      hash ^= (int) nodeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (nodeCase_ == NodeOneofCase.Flexbox) {
        output.WriteRawTag(10);
        output.WriteMessage(Flexbox);
      }
      if (nodeCase_ == NodeOneofCase.Text) {
        output.WriteRawTag(18);
        output.WriteMessage(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (nodeCase_ == NodeOneofCase.Flexbox) {
        output.WriteRawTag(10);
        output.WriteMessage(Flexbox);
      }
      if (nodeCase_ == NodeOneofCase.Text) {
        output.WriteRawTag(18);
        output.WriteMessage(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (nodeCase_ == NodeOneofCase.Flexbox) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Flexbox);
      }
      if (nodeCase_ == NodeOneofCase.Text) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Node other) {
      if (other == null) {
        return;
      }
      switch (other.NodeCase) {
        case NodeOneofCase.Flexbox:
          if (Flexbox == null) {
            Flexbox = new global::Spelldawn.Protos.Flexbox();
          }
          Flexbox.MergeFrom(other.Flexbox);
          break;
        case NodeOneofCase.Text:
          if (Text == null) {
            Text = new global::Spelldawn.Protos.Text();
          }
          Text.MergeFrom(other.Text);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Spelldawn.Protos.Flexbox subBuilder = new global::Spelldawn.Protos.Flexbox();
            if (nodeCase_ == NodeOneofCase.Flexbox) {
              subBuilder.MergeFrom(Flexbox);
            }
            input.ReadMessage(subBuilder);
            Flexbox = subBuilder;
            break;
          }
          case 18: {
            global::Spelldawn.Protos.Text subBuilder = new global::Spelldawn.Protos.Text();
            if (nodeCase_ == NodeOneofCase.Text) {
              subBuilder.MergeFrom(Text);
            }
            input.ReadMessage(subBuilder);
            Text = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Spelldawn.Protos.Flexbox subBuilder = new global::Spelldawn.Protos.Flexbox();
            if (nodeCase_ == NodeOneofCase.Flexbox) {
              subBuilder.MergeFrom(Flexbox);
            }
            input.ReadMessage(subBuilder);
            Flexbox = subBuilder;
            break;
          }
          case 18: {
            global::Spelldawn.Protos.Text subBuilder = new global::Spelldawn.Protos.Text();
            if (nodeCase_ == NodeOneofCase.Text) {
              subBuilder.MergeFrom(Text);
            }
            input.ReadMessage(subBuilder);
            Text = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
