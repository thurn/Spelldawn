// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: commands.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spelldawn.Protos {

  /// <summary>Holder for reflection information generated from commands.proto</summary>
  public static partial class CommandsReflection {

    #region Descriptor
    /// <summary>File descriptor for commands.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommandsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5jb21tYW5kcy5wcm90bxICc2QaFWdhbWVfcHJpbWl0aXZlcy5wcm90bxoP",
            "Z2FtZV92aWV3LnByb3RvIi8KEVJlbmRlckdhbWVDb21tYW5kEhoKBGdhbWUY",
            "ASABKAsyDC5zZC5HYW1lVmlldyIyChNJbml0aWF0ZVJhaWRDb21tYW5kEhsK",
            "B3Jvb21faWQYASABKAsyCi5zZC5Sb29tSWQiWQoRQ3JlYXRlQ2FyZENvbW1h",
            "bmQSKAoIcG9zaXRpb24YASABKA4yFi5zZC5DcmVhdGVDYXJkUG9zaXRpb24S",
            "GgoEY2FyZBgCIAEoCzIMLnNkLkNhcmRWaWV3Ii8KEVVwZGF0ZUNhcmRDb21t",
            "YW5kEhoKBGNhcmQYASABKAsyDC5zZC5DYXJkVmlldyJxCg9Nb3ZlQ2FyZENv",
            "bW1hbmQSGwoHY2FyZF9pZBgBIAEoCzIKLnNkLkNhcmRJZBIlCg10YXJnZXRf",
            "cGxheWVyGAIgASgOMg4uc2QuUGxheWVyTmFtZRIaCgR6b25lGAMgASgOMgwu",
            "c2QuR2FtZVpvbmUiMQoSRGVzdHJveUNhcmRDb21tYW5kEhsKB2NhcmRfaWQY",
            "ASABKAsyCi5zZC5DYXJkSWQiqgEKGFVwZGF0ZVBsYXllclN0YXRlQ29tbWFu",
            "ZBIjCgtwbGF5ZXJfbmFtZRgBIAEoDjIOLnNkLlBsYXllck5hbWUSHAoEaW5m",
            "bxgCIAEoCzIOLnNkLlBsYXllckluZm8SHAoFc2NvcmUYAyABKAsyDS5zZC5T",
            "Y29yZVZpZXcSLQoOYWN0aW9uX3RyYWNrZXIYBCABKAsyFS5zZC5BY3Rpb25U",
            "cmFja2VyVmlldyJZChlDcmVhdGVPclVwZGF0ZVJvb21Db21tYW5kEhsKB3Jv",
            "b21faWQYASABKAsyCi5zZC5Sb29tSWQSHwoJcm9vbV9pbmZvGAIgASgLMgwu",
            "c2QuUm9vbUluZm8iMQoSRGVzdHJveVJvb21Db21tYW5kEhsKB3Jvb21faWQY",
            "ASABKAsyCi5zZC5Sb29tSWQi2wMKC0dhbWVDb21tYW5kEiwKC3JlbmRlcl9n",
            "YW1lGAEgASgLMhUuc2QuUmVuZGVyR2FtZUNvbW1hbmRIABIwCg1pbml0aWF0",
            "ZV9yYWlkGAIgASgLMhcuc2QuSW5pdGlhdGVSYWlkQ29tbWFuZEgAEiwKC2Ny",
            "ZWF0ZV9jYXJkGAMgASgLMhUuc2QuQ3JlYXRlQ2FyZENvbW1hbmRIABIsCgt1",
            "cGRhdGVfY2FyZBgEIAEoCzIVLnNkLlVwZGF0ZUNhcmRDb21tYW5kSAASKAoJ",
            "bW92ZV9jYXJkGAUgASgLMhMuc2QuTW92ZUNhcmRDb21tYW5kSAASLgoMZGVz",
            "dHJveV9jYXJkGAYgASgLMhYuc2QuRGVzdHJveUNhcmRDb21tYW5kSAASOwoT",
            "dXBkYXRlX3BsYXllcl9zdGF0ZRgHIAEoCzIcLnNkLlVwZGF0ZVBsYXllclN0",
            "YXRlQ29tbWFuZEgAEj4KFWNyZWF0ZV9vcl91cGRhdGVfcm9vbRgIIAEoCzId",
            "LnNkLkNyZWF0ZU9yVXBkYXRlUm9vbUNvbW1hbmRIABIuCgxkZXN0cm95X3Jv",
            "b20YCSABKAsyFi5zZC5EZXN0cm95Um9vbUNvbW1hbmRIAEIJCgdjb21tYW5k",
            "Kn4KEkNyZWF0ZUNhcmRQb3NpdGlvbhIkCiBDUkVBVEVfQ0FSRF9QT1NJVElP",
            "Tl9VTlNQRUNJRklFRBAAEiIKHkNSRUFURV9DQVJEX1BPU0lUSU9OX1VTRVJf",
            "REVDSxABEh4KGkNSRUFURV9DQVJEX1BPU0lUSU9OX1NQQVdOEAIqkQEKCEdh",
            "bWVab25lEhkKFUdBTUVfWk9ORV9VTlNQRUNJRklFRBAAEhIKDkdBTUVfWk9O",
            "RV9IQU5EEAESEwoPR0FNRV9aT05FX0FSRU5BEAISEgoOR0FNRV9aT05FX0RF",
            "Q0sQAxIVChFHQU1FX1pPTkVfRElTQ0FSRBAEEhYKEkdBTUVfWk9ORV9CQU5J",
            "U0hFRBAFQhOqAhBTcGVsbGRhd24uUHJvdG9zYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spelldawn.Protos.GamePrimitivesReflection.Descriptor, global::Spelldawn.Protos.GameViewReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Spelldawn.Protos.CreateCardPosition), typeof(global::Spelldawn.Protos.GameZone), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.RenderGameCommand), global::Spelldawn.Protos.RenderGameCommand.Parser, new[]{ "Game" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.InitiateRaidCommand), global::Spelldawn.Protos.InitiateRaidCommand.Parser, new[]{ "RoomId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.CreateCardCommand), global::Spelldawn.Protos.CreateCardCommand.Parser, new[]{ "Position", "Card" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.UpdateCardCommand), global::Spelldawn.Protos.UpdateCardCommand.Parser, new[]{ "Card" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.MoveCardCommand), global::Spelldawn.Protos.MoveCardCommand.Parser, new[]{ "CardId", "TargetPlayer", "Zone" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.DestroyCardCommand), global::Spelldawn.Protos.DestroyCardCommand.Parser, new[]{ "CardId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.UpdatePlayerStateCommand), global::Spelldawn.Protos.UpdatePlayerStateCommand.Parser, new[]{ "PlayerName", "Info", "Score", "ActionTracker" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.CreateOrUpdateRoomCommand), global::Spelldawn.Protos.CreateOrUpdateRoomCommand.Parser, new[]{ "RoomId", "RoomInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.DestroyRoomCommand), global::Spelldawn.Protos.DestroyRoomCommand.Parser, new[]{ "RoomId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.GameCommand), global::Spelldawn.Protos.GameCommand.Parser, new[]{ "RenderGame", "InitiateRaid", "CreateCard", "UpdateCard", "MoveCard", "DestroyCard", "UpdatePlayerState", "CreateOrUpdateRoom", "DestroyRoom" }, new[]{ "Command" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum CreateCardPosition {
    [pbr::OriginalName("CREATE_CARD_POSITION_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///*
    /// Creates card on top of the user's deck. If an optimistic card has already
    /// been moved to the staging area, that card is used instead.
    /// </summary>
    [pbr::OriginalName("CREATE_CARD_POSITION_USER_DECK")] UserDeck = 1,
    /// <summary>
    ///*
    /// Creates a card in the staging area.
    /// </summary>
    [pbr::OriginalName("CREATE_CARD_POSITION_SPAWN")] Spawn = 2,
  }

  public enum GameZone {
    [pbr::OriginalName("GAME_ZONE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("GAME_ZONE_HAND")] Hand = 1,
    [pbr::OriginalName("GAME_ZONE_ARENA")] Arena = 2,
    [pbr::OriginalName("GAME_ZONE_DECK")] Deck = 3,
    [pbr::OriginalName("GAME_ZONE_DISCARD")] Discard = 4,
    [pbr::OriginalName("GAME_ZONE_BANISHED")] Banished = 5,
  }

  #endregion

  #region Messages
  /// <summary>
  ///*
  /// Many of the below commands are specific cases of RenderGame. They are
  /// differentiated in order to simplify the diffing logic the client needs
  /// to perform to detect and animate changes.
  /// </summary>
  public sealed partial class RenderGameCommand : pb::IMessage<RenderGameCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RenderGameCommand> _parser = new pb::MessageParser<RenderGameCommand>(() => new RenderGameCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RenderGameCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.CommandsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenderGameCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenderGameCommand(RenderGameCommand other) : this() {
      game_ = other.game_ != null ? other.game_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenderGameCommand Clone() {
      return new RenderGameCommand(this);
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 1;
    private global::Spelldawn.Protos.GameView game_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.GameView Game {
      get { return game_; }
      set {
        game_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RenderGameCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RenderGameCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Game, other.Game)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (game_ != null) hash ^= Game.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (game_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Game);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (game_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Game);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (game_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Game);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RenderGameCommand other) {
      if (other == null) {
        return;
      }
      if (other.game_ != null) {
        if (game_ == null) {
          Game = new global::Spelldawn.Protos.GameView();
        }
        Game.MergeFrom(other.Game);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (game_ == null) {
              Game = new global::Spelldawn.Protos.GameView();
            }
            input.ReadMessage(Game);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (game_ == null) {
              Game = new global::Spelldawn.Protos.GameView();
            }
            input.ReadMessage(Game);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InitiateRaidCommand : pb::IMessage<InitiateRaidCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InitiateRaidCommand> _parser = new pb::MessageParser<InitiateRaidCommand>(() => new InitiateRaidCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitiateRaidCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.CommandsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitiateRaidCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitiateRaidCommand(InitiateRaidCommand other) : this() {
      roomId_ = other.roomId_ != null ? other.roomId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitiateRaidCommand Clone() {
      return new InitiateRaidCommand(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private global::Spelldawn.Protos.RoomId roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RoomId RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitiateRaidCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitiateRaidCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomId, other.RoomId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomId_ != null) hash ^= RoomId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (roomId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (roomId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitiateRaidCommand other) {
      if (other == null) {
        return;
      }
      if (other.roomId_ != null) {
        if (roomId_ == null) {
          RoomId = new global::Spelldawn.Protos.RoomId();
        }
        RoomId.MergeFrom(other.RoomId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomId_ == null) {
              RoomId = new global::Spelldawn.Protos.RoomId();
            }
            input.ReadMessage(RoomId);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (roomId_ == null) {
              RoomId = new global::Spelldawn.Protos.RoomId();
            }
            input.ReadMessage(RoomId);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CreateCardCommand : pb::IMessage<CreateCardCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateCardCommand> _parser = new pb::MessageParser<CreateCardCommand>(() => new CreateCardCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateCardCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.CommandsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCardCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCardCommand(CreateCardCommand other) : this() {
      position_ = other.position_;
      card_ = other.card_ != null ? other.card_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCardCommand Clone() {
      return new CreateCardCommand(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Spelldawn.Protos.CreateCardPosition position_ = global::Spelldawn.Protos.CreateCardPosition.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CreateCardPosition Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 2;
    private global::Spelldawn.Protos.CardView card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardView Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateCardCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateCardCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Position != other.Position) return false;
      if (!object.Equals(Card, other.Card)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Position != global::Spelldawn.Protos.CreateCardPosition.Unspecified) hash ^= Position.GetHashCode();
      if (card_ != null) hash ^= Card.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Position != global::Spelldawn.Protos.CreateCardPosition.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Position);
      }
      if (card_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Card);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Position != global::Spelldawn.Protos.CreateCardPosition.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Position);
      }
      if (card_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Card);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Position != global::Spelldawn.Protos.CreateCardPosition.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Position);
      }
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateCardCommand other) {
      if (other == null) {
        return;
      }
      if (other.Position != global::Spelldawn.Protos.CreateCardPosition.Unspecified) {
        Position = other.Position;
      }
      if (other.card_ != null) {
        if (card_ == null) {
          Card = new global::Spelldawn.Protos.CardView();
        }
        Card.MergeFrom(other.Card);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Position = (global::Spelldawn.Protos.CreateCardPosition) input.ReadEnum();
            break;
          }
          case 18: {
            if (card_ == null) {
              Card = new global::Spelldawn.Protos.CardView();
            }
            input.ReadMessage(Card);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Position = (global::Spelldawn.Protos.CreateCardPosition) input.ReadEnum();
            break;
          }
          case 18: {
            if (card_ == null) {
              Card = new global::Spelldawn.Protos.CardView();
            }
            input.ReadMessage(Card);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UpdateCardCommand : pb::IMessage<UpdateCardCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpdateCardCommand> _parser = new pb::MessageParser<UpdateCardCommand>(() => new UpdateCardCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateCardCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.CommandsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCardCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCardCommand(UpdateCardCommand other) : this() {
      card_ = other.card_ != null ? other.card_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCardCommand Clone() {
      return new UpdateCardCommand(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private global::Spelldawn.Protos.CardView card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardView Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateCardCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateCardCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Card, other.Card)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (card_ != null) hash ^= Card.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (card_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Card);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (card_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Card);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateCardCommand other) {
      if (other == null) {
        return;
      }
      if (other.card_ != null) {
        if (card_ == null) {
          Card = new global::Spelldawn.Protos.CardView();
        }
        Card.MergeFrom(other.Card);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (card_ == null) {
              Card = new global::Spelldawn.Protos.CardView();
            }
            input.ReadMessage(Card);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (card_ == null) {
              Card = new global::Spelldawn.Protos.CardView();
            }
            input.ReadMessage(Card);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MoveCardCommand : pb::IMessage<MoveCardCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MoveCardCommand> _parser = new pb::MessageParser<MoveCardCommand>(() => new MoveCardCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveCardCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.CommandsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveCardCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveCardCommand(MoveCardCommand other) : this() {
      cardId_ = other.cardId_ != null ? other.cardId_.Clone() : null;
      targetPlayer_ = other.targetPlayer_;
      zone_ = other.zone_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveCardCommand Clone() {
      return new MoveCardCommand(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private global::Spelldawn.Protos.CardId cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardId CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "target_player" field.</summary>
    public const int TargetPlayerFieldNumber = 2;
    private global::Spelldawn.Protos.PlayerName targetPlayer_ = global::Spelldawn.Protos.PlayerName.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName TargetPlayer {
      get { return targetPlayer_; }
      set {
        targetPlayer_ = value;
      }
    }

    /// <summary>Field number for the "zone" field.</summary>
    public const int ZoneFieldNumber = 3;
    private global::Spelldawn.Protos.GameZone zone_ = global::Spelldawn.Protos.GameZone.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.GameZone Zone {
      get { return zone_; }
      set {
        zone_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveCardCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveCardCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CardId, other.CardId)) return false;
      if (TargetPlayer != other.TargetPlayer) return false;
      if (Zone != other.Zone) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cardId_ != null) hash ^= CardId.GetHashCode();
      if (TargetPlayer != global::Spelldawn.Protos.PlayerName.Unspecified) hash ^= TargetPlayer.GetHashCode();
      if (Zone != global::Spelldawn.Protos.GameZone.Unspecified) hash ^= Zone.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (cardId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardId);
      }
      if (TargetPlayer != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TargetPlayer);
      }
      if (Zone != global::Spelldawn.Protos.GameZone.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Zone);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (cardId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardId);
      }
      if (TargetPlayer != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TargetPlayer);
      }
      if (Zone != global::Spelldawn.Protos.GameZone.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Zone);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cardId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardId);
      }
      if (TargetPlayer != global::Spelldawn.Protos.PlayerName.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TargetPlayer);
      }
      if (Zone != global::Spelldawn.Protos.GameZone.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Zone);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveCardCommand other) {
      if (other == null) {
        return;
      }
      if (other.cardId_ != null) {
        if (cardId_ == null) {
          CardId = new global::Spelldawn.Protos.CardId();
        }
        CardId.MergeFrom(other.CardId);
      }
      if (other.TargetPlayer != global::Spelldawn.Protos.PlayerName.Unspecified) {
        TargetPlayer = other.TargetPlayer;
      }
      if (other.Zone != global::Spelldawn.Protos.GameZone.Unspecified) {
        Zone = other.Zone;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cardId_ == null) {
              CardId = new global::Spelldawn.Protos.CardId();
            }
            input.ReadMessage(CardId);
            break;
          }
          case 16: {
            TargetPlayer = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
          case 24: {
            Zone = (global::Spelldawn.Protos.GameZone) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (cardId_ == null) {
              CardId = new global::Spelldawn.Protos.CardId();
            }
            input.ReadMessage(CardId);
            break;
          }
          case 16: {
            TargetPlayer = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
          case 24: {
            Zone = (global::Spelldawn.Protos.GameZone) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DestroyCardCommand : pb::IMessage<DestroyCardCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DestroyCardCommand> _parser = new pb::MessageParser<DestroyCardCommand>(() => new DestroyCardCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DestroyCardCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.CommandsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestroyCardCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestroyCardCommand(DestroyCardCommand other) : this() {
      cardId_ = other.cardId_ != null ? other.cardId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestroyCardCommand Clone() {
      return new DestroyCardCommand(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private global::Spelldawn.Protos.CardId cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardId CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DestroyCardCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DestroyCardCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CardId, other.CardId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cardId_ != null) hash ^= CardId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (cardId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (cardId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cardId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DestroyCardCommand other) {
      if (other == null) {
        return;
      }
      if (other.cardId_ != null) {
        if (cardId_ == null) {
          CardId = new global::Spelldawn.Protos.CardId();
        }
        CardId.MergeFrom(other.CardId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cardId_ == null) {
              CardId = new global::Spelldawn.Protos.CardId();
            }
            input.ReadMessage(CardId);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (cardId_ == null) {
              CardId = new global::Spelldawn.Protos.CardId();
            }
            input.ReadMessage(CardId);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UpdatePlayerStateCommand : pb::IMessage<UpdatePlayerStateCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpdatePlayerStateCommand> _parser = new pb::MessageParser<UpdatePlayerStateCommand>(() => new UpdatePlayerStateCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatePlayerStateCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.CommandsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerStateCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerStateCommand(UpdatePlayerStateCommand other) : this() {
      playerName_ = other.playerName_;
      info_ = other.info_ != null ? other.info_.Clone() : null;
      score_ = other.score_ != null ? other.score_.Clone() : null;
      actionTracker_ = other.actionTracker_ != null ? other.actionTracker_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerStateCommand Clone() {
      return new UpdatePlayerStateCommand(this);
    }

    /// <summary>Field number for the "player_name" field.</summary>
    public const int PlayerNameFieldNumber = 1;
    private global::Spelldawn.Protos.PlayerName playerName_ = global::Spelldawn.Protos.PlayerName.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName PlayerName {
      get { return playerName_; }
      set {
        playerName_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private global::Spelldawn.Protos.PlayerInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private global::Spelldawn.Protos.ScoreView score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ScoreView Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "action_tracker" field.</summary>
    public const int ActionTrackerFieldNumber = 4;
    private global::Spelldawn.Protos.ActionTrackerView actionTracker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ActionTrackerView ActionTracker {
      get { return actionTracker_; }
      set {
        actionTracker_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatePlayerStateCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatePlayerStateCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerName != other.PlayerName) return false;
      if (!object.Equals(Info, other.Info)) return false;
      if (!object.Equals(Score, other.Score)) return false;
      if (!object.Equals(ActionTracker, other.ActionTracker)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerName != global::Spelldawn.Protos.PlayerName.Unspecified) hash ^= PlayerName.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (score_ != null) hash ^= Score.GetHashCode();
      if (actionTracker_ != null) hash ^= ActionTracker.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerName != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PlayerName);
      }
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
      if (score_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Score);
      }
      if (actionTracker_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ActionTracker);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerName != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PlayerName);
      }
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
      if (score_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Score);
      }
      if (actionTracker_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ActionTracker);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerName != global::Spelldawn.Protos.PlayerName.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PlayerName);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (score_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Score);
      }
      if (actionTracker_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActionTracker);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatePlayerStateCommand other) {
      if (other == null) {
        return;
      }
      if (other.PlayerName != global::Spelldawn.Protos.PlayerName.Unspecified) {
        PlayerName = other.PlayerName;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::Spelldawn.Protos.PlayerInfo();
        }
        Info.MergeFrom(other.Info);
      }
      if (other.score_ != null) {
        if (score_ == null) {
          Score = new global::Spelldawn.Protos.ScoreView();
        }
        Score.MergeFrom(other.Score);
      }
      if (other.actionTracker_ != null) {
        if (actionTracker_ == null) {
          ActionTracker = new global::Spelldawn.Protos.ActionTrackerView();
        }
        ActionTracker.MergeFrom(other.ActionTracker);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerName = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
          case 18: {
            if (info_ == null) {
              Info = new global::Spelldawn.Protos.PlayerInfo();
            }
            input.ReadMessage(Info);
            break;
          }
          case 26: {
            if (score_ == null) {
              Score = new global::Spelldawn.Protos.ScoreView();
            }
            input.ReadMessage(Score);
            break;
          }
          case 34: {
            if (actionTracker_ == null) {
              ActionTracker = new global::Spelldawn.Protos.ActionTrackerView();
            }
            input.ReadMessage(ActionTracker);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerName = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
          case 18: {
            if (info_ == null) {
              Info = new global::Spelldawn.Protos.PlayerInfo();
            }
            input.ReadMessage(Info);
            break;
          }
          case 26: {
            if (score_ == null) {
              Score = new global::Spelldawn.Protos.ScoreView();
            }
            input.ReadMessage(Score);
            break;
          }
          case 34: {
            if (actionTracker_ == null) {
              ActionTracker = new global::Spelldawn.Protos.ActionTrackerView();
            }
            input.ReadMessage(ActionTracker);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CreateOrUpdateRoomCommand : pb::IMessage<CreateOrUpdateRoomCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateOrUpdateRoomCommand> _parser = new pb::MessageParser<CreateOrUpdateRoomCommand>(() => new CreateOrUpdateRoomCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateOrUpdateRoomCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.CommandsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateOrUpdateRoomCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateOrUpdateRoomCommand(CreateOrUpdateRoomCommand other) : this() {
      roomId_ = other.roomId_ != null ? other.roomId_.Clone() : null;
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateOrUpdateRoomCommand Clone() {
      return new CreateOrUpdateRoomCommand(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private global::Spelldawn.Protos.RoomId roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RoomId RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 2;
    private global::Spelldawn.Protos.RoomInfo roomInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateOrUpdateRoomCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateOrUpdateRoomCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomId, other.RoomId)) return false;
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomId_ != null) hash ^= RoomId.GetHashCode();
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (roomId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomId);
      }
      if (roomInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (roomId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomId);
      }
      if (roomInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomId);
      }
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateOrUpdateRoomCommand other) {
      if (other == null) {
        return;
      }
      if (other.roomId_ != null) {
        if (roomId_ == null) {
          RoomId = new global::Spelldawn.Protos.RoomId();
        }
        RoomId.MergeFrom(other.RoomId);
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::Spelldawn.Protos.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomId_ == null) {
              RoomId = new global::Spelldawn.Protos.RoomId();
            }
            input.ReadMessage(RoomId);
            break;
          }
          case 18: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Spelldawn.Protos.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (roomId_ == null) {
              RoomId = new global::Spelldawn.Protos.RoomId();
            }
            input.ReadMessage(RoomId);
            break;
          }
          case 18: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Spelldawn.Protos.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DestroyRoomCommand : pb::IMessage<DestroyRoomCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DestroyRoomCommand> _parser = new pb::MessageParser<DestroyRoomCommand>(() => new DestroyRoomCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DestroyRoomCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.CommandsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestroyRoomCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestroyRoomCommand(DestroyRoomCommand other) : this() {
      roomId_ = other.roomId_ != null ? other.roomId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestroyRoomCommand Clone() {
      return new DestroyRoomCommand(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private global::Spelldawn.Protos.RoomId roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RoomId RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DestroyRoomCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DestroyRoomCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomId, other.RoomId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomId_ != null) hash ^= RoomId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (roomId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (roomId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DestroyRoomCommand other) {
      if (other == null) {
        return;
      }
      if (other.roomId_ != null) {
        if (roomId_ == null) {
          RoomId = new global::Spelldawn.Protos.RoomId();
        }
        RoomId.MergeFrom(other.RoomId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomId_ == null) {
              RoomId = new global::Spelldawn.Protos.RoomId();
            }
            input.ReadMessage(RoomId);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (roomId_ == null) {
              RoomId = new global::Spelldawn.Protos.RoomId();
            }
            input.ReadMessage(RoomId);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameCommand : pb::IMessage<GameCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameCommand> _parser = new pb::MessageParser<GameCommand>(() => new GameCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.CommandsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameCommand(GameCommand other) : this() {
      switch (other.CommandCase) {
        case CommandOneofCase.RenderGame:
          RenderGame = other.RenderGame.Clone();
          break;
        case CommandOneofCase.InitiateRaid:
          InitiateRaid = other.InitiateRaid.Clone();
          break;
        case CommandOneofCase.CreateCard:
          CreateCard = other.CreateCard.Clone();
          break;
        case CommandOneofCase.UpdateCard:
          UpdateCard = other.UpdateCard.Clone();
          break;
        case CommandOneofCase.MoveCard:
          MoveCard = other.MoveCard.Clone();
          break;
        case CommandOneofCase.DestroyCard:
          DestroyCard = other.DestroyCard.Clone();
          break;
        case CommandOneofCase.UpdatePlayerState:
          UpdatePlayerState = other.UpdatePlayerState.Clone();
          break;
        case CommandOneofCase.CreateOrUpdateRoom:
          CreateOrUpdateRoom = other.CreateOrUpdateRoom.Clone();
          break;
        case CommandOneofCase.DestroyRoom:
          DestroyRoom = other.DestroyRoom.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameCommand Clone() {
      return new GameCommand(this);
    }

    /// <summary>Field number for the "render_game" field.</summary>
    public const int RenderGameFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RenderGameCommand RenderGame {
      get { return commandCase_ == CommandOneofCase.RenderGame ? (global::Spelldawn.Protos.RenderGameCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.RenderGame;
      }
    }

    /// <summary>Field number for the "initiate_raid" field.</summary>
    public const int InitiateRaidFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.InitiateRaidCommand InitiateRaid {
      get { return commandCase_ == CommandOneofCase.InitiateRaid ? (global::Spelldawn.Protos.InitiateRaidCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.InitiateRaid;
      }
    }

    /// <summary>Field number for the "create_card" field.</summary>
    public const int CreateCardFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CreateCardCommand CreateCard {
      get { return commandCase_ == CommandOneofCase.CreateCard ? (global::Spelldawn.Protos.CreateCardCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.CreateCard;
      }
    }

    /// <summary>Field number for the "update_card" field.</summary>
    public const int UpdateCardFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.UpdateCardCommand UpdateCard {
      get { return commandCase_ == CommandOneofCase.UpdateCard ? (global::Spelldawn.Protos.UpdateCardCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.UpdateCard;
      }
    }

    /// <summary>Field number for the "move_card" field.</summary>
    public const int MoveCardFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.MoveCardCommand MoveCard {
      get { return commandCase_ == CommandOneofCase.MoveCard ? (global::Spelldawn.Protos.MoveCardCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.MoveCard;
      }
    }

    /// <summary>Field number for the "destroy_card" field.</summary>
    public const int DestroyCardFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.DestroyCardCommand DestroyCard {
      get { return commandCase_ == CommandOneofCase.DestroyCard ? (global::Spelldawn.Protos.DestroyCardCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.DestroyCard;
      }
    }

    /// <summary>Field number for the "update_player_state" field.</summary>
    public const int UpdatePlayerStateFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.UpdatePlayerStateCommand UpdatePlayerState {
      get { return commandCase_ == CommandOneofCase.UpdatePlayerState ? (global::Spelldawn.Protos.UpdatePlayerStateCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.UpdatePlayerState;
      }
    }

    /// <summary>Field number for the "create_or_update_room" field.</summary>
    public const int CreateOrUpdateRoomFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CreateOrUpdateRoomCommand CreateOrUpdateRoom {
      get { return commandCase_ == CommandOneofCase.CreateOrUpdateRoom ? (global::Spelldawn.Protos.CreateOrUpdateRoomCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.CreateOrUpdateRoom;
      }
    }

    /// <summary>Field number for the "destroy_room" field.</summary>
    public const int DestroyRoomFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.DestroyRoomCommand DestroyRoom {
      get { return commandCase_ == CommandOneofCase.DestroyRoom ? (global::Spelldawn.Protos.DestroyRoomCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.DestroyRoom;
      }
    }

    private object command_;
    /// <summary>Enum of possible cases for the "command" oneof.</summary>
    public enum CommandOneofCase {
      None = 0,
      RenderGame = 1,
      InitiateRaid = 2,
      CreateCard = 3,
      UpdateCard = 4,
      MoveCard = 5,
      DestroyCard = 6,
      UpdatePlayerState = 7,
      CreateOrUpdateRoom = 8,
      DestroyRoom = 9,
    }
    private CommandOneofCase commandCase_ = CommandOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandOneofCase CommandCase {
      get { return commandCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCommand() {
      commandCase_ = CommandOneofCase.None;
      command_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RenderGame, other.RenderGame)) return false;
      if (!object.Equals(InitiateRaid, other.InitiateRaid)) return false;
      if (!object.Equals(CreateCard, other.CreateCard)) return false;
      if (!object.Equals(UpdateCard, other.UpdateCard)) return false;
      if (!object.Equals(MoveCard, other.MoveCard)) return false;
      if (!object.Equals(DestroyCard, other.DestroyCard)) return false;
      if (!object.Equals(UpdatePlayerState, other.UpdatePlayerState)) return false;
      if (!object.Equals(CreateOrUpdateRoom, other.CreateOrUpdateRoom)) return false;
      if (!object.Equals(DestroyRoom, other.DestroyRoom)) return false;
      if (CommandCase != other.CommandCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (commandCase_ == CommandOneofCase.RenderGame) hash ^= RenderGame.GetHashCode();
      if (commandCase_ == CommandOneofCase.InitiateRaid) hash ^= InitiateRaid.GetHashCode();
      if (commandCase_ == CommandOneofCase.CreateCard) hash ^= CreateCard.GetHashCode();
      if (commandCase_ == CommandOneofCase.UpdateCard) hash ^= UpdateCard.GetHashCode();
      if (commandCase_ == CommandOneofCase.MoveCard) hash ^= MoveCard.GetHashCode();
      if (commandCase_ == CommandOneofCase.DestroyCard) hash ^= DestroyCard.GetHashCode();
      if (commandCase_ == CommandOneofCase.UpdatePlayerState) hash ^= UpdatePlayerState.GetHashCode();
      if (commandCase_ == CommandOneofCase.CreateOrUpdateRoom) hash ^= CreateOrUpdateRoom.GetHashCode();
      if (commandCase_ == CommandOneofCase.DestroyRoom) hash ^= DestroyRoom.GetHashCode();
      hash ^= (int) commandCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (commandCase_ == CommandOneofCase.RenderGame) {
        output.WriteRawTag(10);
        output.WriteMessage(RenderGame);
      }
      if (commandCase_ == CommandOneofCase.InitiateRaid) {
        output.WriteRawTag(18);
        output.WriteMessage(InitiateRaid);
      }
      if (commandCase_ == CommandOneofCase.CreateCard) {
        output.WriteRawTag(26);
        output.WriteMessage(CreateCard);
      }
      if (commandCase_ == CommandOneofCase.UpdateCard) {
        output.WriteRawTag(34);
        output.WriteMessage(UpdateCard);
      }
      if (commandCase_ == CommandOneofCase.MoveCard) {
        output.WriteRawTag(42);
        output.WriteMessage(MoveCard);
      }
      if (commandCase_ == CommandOneofCase.DestroyCard) {
        output.WriteRawTag(50);
        output.WriteMessage(DestroyCard);
      }
      if (commandCase_ == CommandOneofCase.UpdatePlayerState) {
        output.WriteRawTag(58);
        output.WriteMessage(UpdatePlayerState);
      }
      if (commandCase_ == CommandOneofCase.CreateOrUpdateRoom) {
        output.WriteRawTag(66);
        output.WriteMessage(CreateOrUpdateRoom);
      }
      if (commandCase_ == CommandOneofCase.DestroyRoom) {
        output.WriteRawTag(74);
        output.WriteMessage(DestroyRoom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (commandCase_ == CommandOneofCase.RenderGame) {
        output.WriteRawTag(10);
        output.WriteMessage(RenderGame);
      }
      if (commandCase_ == CommandOneofCase.InitiateRaid) {
        output.WriteRawTag(18);
        output.WriteMessage(InitiateRaid);
      }
      if (commandCase_ == CommandOneofCase.CreateCard) {
        output.WriteRawTag(26);
        output.WriteMessage(CreateCard);
      }
      if (commandCase_ == CommandOneofCase.UpdateCard) {
        output.WriteRawTag(34);
        output.WriteMessage(UpdateCard);
      }
      if (commandCase_ == CommandOneofCase.MoveCard) {
        output.WriteRawTag(42);
        output.WriteMessage(MoveCard);
      }
      if (commandCase_ == CommandOneofCase.DestroyCard) {
        output.WriteRawTag(50);
        output.WriteMessage(DestroyCard);
      }
      if (commandCase_ == CommandOneofCase.UpdatePlayerState) {
        output.WriteRawTag(58);
        output.WriteMessage(UpdatePlayerState);
      }
      if (commandCase_ == CommandOneofCase.CreateOrUpdateRoom) {
        output.WriteRawTag(66);
        output.WriteMessage(CreateOrUpdateRoom);
      }
      if (commandCase_ == CommandOneofCase.DestroyRoom) {
        output.WriteRawTag(74);
        output.WriteMessage(DestroyRoom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (commandCase_ == CommandOneofCase.RenderGame) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RenderGame);
      }
      if (commandCase_ == CommandOneofCase.InitiateRaid) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitiateRaid);
      }
      if (commandCase_ == CommandOneofCase.CreateCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateCard);
      }
      if (commandCase_ == CommandOneofCase.UpdateCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateCard);
      }
      if (commandCase_ == CommandOneofCase.MoveCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MoveCard);
      }
      if (commandCase_ == CommandOneofCase.DestroyCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DestroyCard);
      }
      if (commandCase_ == CommandOneofCase.UpdatePlayerState) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdatePlayerState);
      }
      if (commandCase_ == CommandOneofCase.CreateOrUpdateRoom) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateOrUpdateRoom);
      }
      if (commandCase_ == CommandOneofCase.DestroyRoom) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DestroyRoom);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameCommand other) {
      if (other == null) {
        return;
      }
      switch (other.CommandCase) {
        case CommandOneofCase.RenderGame:
          if (RenderGame == null) {
            RenderGame = new global::Spelldawn.Protos.RenderGameCommand();
          }
          RenderGame.MergeFrom(other.RenderGame);
          break;
        case CommandOneofCase.InitiateRaid:
          if (InitiateRaid == null) {
            InitiateRaid = new global::Spelldawn.Protos.InitiateRaidCommand();
          }
          InitiateRaid.MergeFrom(other.InitiateRaid);
          break;
        case CommandOneofCase.CreateCard:
          if (CreateCard == null) {
            CreateCard = new global::Spelldawn.Protos.CreateCardCommand();
          }
          CreateCard.MergeFrom(other.CreateCard);
          break;
        case CommandOneofCase.UpdateCard:
          if (UpdateCard == null) {
            UpdateCard = new global::Spelldawn.Protos.UpdateCardCommand();
          }
          UpdateCard.MergeFrom(other.UpdateCard);
          break;
        case CommandOneofCase.MoveCard:
          if (MoveCard == null) {
            MoveCard = new global::Spelldawn.Protos.MoveCardCommand();
          }
          MoveCard.MergeFrom(other.MoveCard);
          break;
        case CommandOneofCase.DestroyCard:
          if (DestroyCard == null) {
            DestroyCard = new global::Spelldawn.Protos.DestroyCardCommand();
          }
          DestroyCard.MergeFrom(other.DestroyCard);
          break;
        case CommandOneofCase.UpdatePlayerState:
          if (UpdatePlayerState == null) {
            UpdatePlayerState = new global::Spelldawn.Protos.UpdatePlayerStateCommand();
          }
          UpdatePlayerState.MergeFrom(other.UpdatePlayerState);
          break;
        case CommandOneofCase.CreateOrUpdateRoom:
          if (CreateOrUpdateRoom == null) {
            CreateOrUpdateRoom = new global::Spelldawn.Protos.CreateOrUpdateRoomCommand();
          }
          CreateOrUpdateRoom.MergeFrom(other.CreateOrUpdateRoom);
          break;
        case CommandOneofCase.DestroyRoom:
          if (DestroyRoom == null) {
            DestroyRoom = new global::Spelldawn.Protos.DestroyRoomCommand();
          }
          DestroyRoom.MergeFrom(other.DestroyRoom);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Spelldawn.Protos.RenderGameCommand subBuilder = new global::Spelldawn.Protos.RenderGameCommand();
            if (commandCase_ == CommandOneofCase.RenderGame) {
              subBuilder.MergeFrom(RenderGame);
            }
            input.ReadMessage(subBuilder);
            RenderGame = subBuilder;
            break;
          }
          case 18: {
            global::Spelldawn.Protos.InitiateRaidCommand subBuilder = new global::Spelldawn.Protos.InitiateRaidCommand();
            if (commandCase_ == CommandOneofCase.InitiateRaid) {
              subBuilder.MergeFrom(InitiateRaid);
            }
            input.ReadMessage(subBuilder);
            InitiateRaid = subBuilder;
            break;
          }
          case 26: {
            global::Spelldawn.Protos.CreateCardCommand subBuilder = new global::Spelldawn.Protos.CreateCardCommand();
            if (commandCase_ == CommandOneofCase.CreateCard) {
              subBuilder.MergeFrom(CreateCard);
            }
            input.ReadMessage(subBuilder);
            CreateCard = subBuilder;
            break;
          }
          case 34: {
            global::Spelldawn.Protos.UpdateCardCommand subBuilder = new global::Spelldawn.Protos.UpdateCardCommand();
            if (commandCase_ == CommandOneofCase.UpdateCard) {
              subBuilder.MergeFrom(UpdateCard);
            }
            input.ReadMessage(subBuilder);
            UpdateCard = subBuilder;
            break;
          }
          case 42: {
            global::Spelldawn.Protos.MoveCardCommand subBuilder = new global::Spelldawn.Protos.MoveCardCommand();
            if (commandCase_ == CommandOneofCase.MoveCard) {
              subBuilder.MergeFrom(MoveCard);
            }
            input.ReadMessage(subBuilder);
            MoveCard = subBuilder;
            break;
          }
          case 50: {
            global::Spelldawn.Protos.DestroyCardCommand subBuilder = new global::Spelldawn.Protos.DestroyCardCommand();
            if (commandCase_ == CommandOneofCase.DestroyCard) {
              subBuilder.MergeFrom(DestroyCard);
            }
            input.ReadMessage(subBuilder);
            DestroyCard = subBuilder;
            break;
          }
          case 58: {
            global::Spelldawn.Protos.UpdatePlayerStateCommand subBuilder = new global::Spelldawn.Protos.UpdatePlayerStateCommand();
            if (commandCase_ == CommandOneofCase.UpdatePlayerState) {
              subBuilder.MergeFrom(UpdatePlayerState);
            }
            input.ReadMessage(subBuilder);
            UpdatePlayerState = subBuilder;
            break;
          }
          case 66: {
            global::Spelldawn.Protos.CreateOrUpdateRoomCommand subBuilder = new global::Spelldawn.Protos.CreateOrUpdateRoomCommand();
            if (commandCase_ == CommandOneofCase.CreateOrUpdateRoom) {
              subBuilder.MergeFrom(CreateOrUpdateRoom);
            }
            input.ReadMessage(subBuilder);
            CreateOrUpdateRoom = subBuilder;
            break;
          }
          case 74: {
            global::Spelldawn.Protos.DestroyRoomCommand subBuilder = new global::Spelldawn.Protos.DestroyRoomCommand();
            if (commandCase_ == CommandOneofCase.DestroyRoom) {
              subBuilder.MergeFrom(DestroyRoom);
            }
            input.ReadMessage(subBuilder);
            DestroyRoom = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Spelldawn.Protos.RenderGameCommand subBuilder = new global::Spelldawn.Protos.RenderGameCommand();
            if (commandCase_ == CommandOneofCase.RenderGame) {
              subBuilder.MergeFrom(RenderGame);
            }
            input.ReadMessage(subBuilder);
            RenderGame = subBuilder;
            break;
          }
          case 18: {
            global::Spelldawn.Protos.InitiateRaidCommand subBuilder = new global::Spelldawn.Protos.InitiateRaidCommand();
            if (commandCase_ == CommandOneofCase.InitiateRaid) {
              subBuilder.MergeFrom(InitiateRaid);
            }
            input.ReadMessage(subBuilder);
            InitiateRaid = subBuilder;
            break;
          }
          case 26: {
            global::Spelldawn.Protos.CreateCardCommand subBuilder = new global::Spelldawn.Protos.CreateCardCommand();
            if (commandCase_ == CommandOneofCase.CreateCard) {
              subBuilder.MergeFrom(CreateCard);
            }
            input.ReadMessage(subBuilder);
            CreateCard = subBuilder;
            break;
          }
          case 34: {
            global::Spelldawn.Protos.UpdateCardCommand subBuilder = new global::Spelldawn.Protos.UpdateCardCommand();
            if (commandCase_ == CommandOneofCase.UpdateCard) {
              subBuilder.MergeFrom(UpdateCard);
            }
            input.ReadMessage(subBuilder);
            UpdateCard = subBuilder;
            break;
          }
          case 42: {
            global::Spelldawn.Protos.MoveCardCommand subBuilder = new global::Spelldawn.Protos.MoveCardCommand();
            if (commandCase_ == CommandOneofCase.MoveCard) {
              subBuilder.MergeFrom(MoveCard);
            }
            input.ReadMessage(subBuilder);
            MoveCard = subBuilder;
            break;
          }
          case 50: {
            global::Spelldawn.Protos.DestroyCardCommand subBuilder = new global::Spelldawn.Protos.DestroyCardCommand();
            if (commandCase_ == CommandOneofCase.DestroyCard) {
              subBuilder.MergeFrom(DestroyCard);
            }
            input.ReadMessage(subBuilder);
            DestroyCard = subBuilder;
            break;
          }
          case 58: {
            global::Spelldawn.Protos.UpdatePlayerStateCommand subBuilder = new global::Spelldawn.Protos.UpdatePlayerStateCommand();
            if (commandCase_ == CommandOneofCase.UpdatePlayerState) {
              subBuilder.MergeFrom(UpdatePlayerState);
            }
            input.ReadMessage(subBuilder);
            UpdatePlayerState = subBuilder;
            break;
          }
          case 66: {
            global::Spelldawn.Protos.CreateOrUpdateRoomCommand subBuilder = new global::Spelldawn.Protos.CreateOrUpdateRoomCommand();
            if (commandCase_ == CommandOneofCase.CreateOrUpdateRoom) {
              subBuilder.MergeFrom(CreateOrUpdateRoom);
            }
            input.ReadMessage(subBuilder);
            CreateOrUpdateRoom = subBuilder;
            break;
          }
          case 74: {
            global::Spelldawn.Protos.DestroyRoomCommand subBuilder = new global::Spelldawn.Protos.DestroyRoomCommand();
            if (commandCase_ == CommandOneofCase.DestroyRoom) {
              subBuilder.MergeFrom(DestroyRoom);
            }
            input.ReadMessage(subBuilder);
            DestroyRoom = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
