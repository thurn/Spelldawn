// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: spelldawn.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spelldawn.Protos {

  /// <summary>Holder for reflection information generated from spelldawn.proto</summary>
  public static partial class SpelldawnReflection {

    #region Descriptor
    /// <summary>File descriptor for spelldawn.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpelldawnReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9zcGVsbGRhd24ucHJvdG8SCXNwZWxsZGF3bhoeZ29vZ2xlL3Byb3RvYnVm",
            "L3dyYXBwZXJzLnByb3RvGhlnb29nbGUvcHJvdG9idWYvYW55LnByb3RvIkQK",
            "CUZsZXhDb2xvchILCgNyZWQYASABKAISDQoFZ3JlZW4YAiABKAISDAoEYmx1",
            "ZRgDIAEoAhINCgVhbHBoYRgEIAEoAiIgCg1TcHJpdGVBZGRyZXNzEg8KB2Fk",
            "ZHJlc3MYASABKAkiHgoLRm9udEFkZHJlc3MSDwoHYWRkcmVzcxgBIAEoCSIk",
            "ChFQcm9qZWN0aWxlQWRkcmVzcxIPCgdhZGRyZXNzGAEgASgJIiAKDUVmZmVj",
            "dEFkZHJlc3MSDwoHYWRkcmVzcxgBIAEoCSIjChBBdWRpb0NsaXBBZGRyZXNz",
            "Eg8KB2FkZHJlc3MYASABKAkiIwoLRmxleFZlY3RvcjISCQoBeBgBIAEoAhIJ",
            "CgF5GAIgASgCIi4KC0ZsZXhWZWN0b3IzEgkKAXgYASABKAISCQoBeRgCIAEo",
            "AhIJCgF6GAMgASgCIkIKCURpbWVuc2lvbhImCgR1bml0GAEgASgOMhguc3Bl",
            "bGxkYXduLkRpbWVuc2lvblVuaXQSDQoFdmFsdWUYAiABKAIiogEKDkRpbWVu",
            "c2lvbkdyb3VwEiEKA3RvcBgBIAEoCzIULnNwZWxsZGF3bi5EaW1lbnNpb24S",
            "IwoFcmlnaHQYAiABKAsyFC5zcGVsbGRhd24uRGltZW5zaW9uEiQKBmJvdHRv",
            "bRgDIAEoCzIULnNwZWxsZGF3bi5EaW1lbnNpb24SIgoEbGVmdBgEIAEoCzIU",
            "LnNwZWxsZGF3bi5EaW1lbnNpb24iRwoLQm9yZGVyV2lkdGgSCwoDdG9wGAEg",
            "ASgCEg0KBXJpZ2h0GAIgASgCEg4KBmJvdHRvbRgDIAEoAhIMCgRsZWZ0GAQg",
            "ASgCIp8BCgtCb3JkZXJDb2xvchIhCgN0b3AYASABKAsyFC5zcGVsbGRhd24u",
            "RmxleENvbG9yEiMKBXJpZ2h0GAIgASgLMhQuc3BlbGxkYXduLkZsZXhDb2xv",
            "chIkCgZib3R0b20YAyABKAsyFC5zcGVsbGRhd24uRmxleENvbG9yEiIKBGxl",
            "ZnQYBCABKAsyFC5zcGVsbGRhd24uRmxleENvbG9yIrYBCgxCb3JkZXJSYWRp",
            "dXMSJgoIdG9wX2xlZnQYASABKAsyFC5zcGVsbGRhd24uRGltZW5zaW9uEicK",
            "CXRvcF9yaWdodBgCIAEoCzIULnNwZWxsZGF3bi5EaW1lbnNpb24SKgoMYm90",
            "dG9tX3JpZ2h0GAMgASgLMhQuc3BlbGxkYXduLkRpbWVuc2lvbhIpCgtib3R0",
            "b21fbGVmdBgEIAEoCzIULnNwZWxsZGF3bi5EaW1lbnNpb24iHQoKRmxleFJv",
            "dGF0ZRIPCgdkZWdyZWVzGAEgASgCIlwKDUZsZXhUcmFuc2xhdGUSHwoBeBgB",
            "IAEoCzIULnNwZWxsZGF3bi5EaW1lbnNpb24SHwoBeRgCIAEoCzIULnNwZWxs",
            "ZGF3bi5EaW1lbnNpb24SCQoBehgDIAEoAiIzCglGbGV4U2NhbGUSJgoGYW1v",
            "dW50GAEgASgLMhYuc3BlbGxkYXduLkZsZXhWZWN0b3IzIm4KClRleHRTaGFk",
            "b3cSJgoGb2Zmc2V0GAEgASgLMhYuc3BlbGxkYXduLkZsZXhWZWN0b3IyEhMK",
            "C2JsdXJfcmFkaXVzGAIgASgCEiMKBWNvbG9yGAMgASgLMhQuc3BlbGxkYXdu",
            "LkZsZXhDb2xvciIhCglUaW1lVmFsdWUSFAoMbWlsbGlzZWNvbmRzGAEgASgN",
            "IkYKCkltYWdlU2xpY2USCwoDdG9wGAEgASgNEg0KBXJpZ2h0GAIgASgNEg4K",
            "BmJvdHRvbRgDIAEoDRIMCgRsZWZ0GAQgASgNItcUCglGbGV4U3R5bGUSKwoN",
            "YWxpZ25fY29udGVudBgBIAEoDjIULnNwZWxsZGF3bi5GbGV4QWxpZ24SKQoL",
            "YWxpZ25faXRlbXMYAiABKA4yFC5zcGVsbGRhd24uRmxleEFsaWduEigKCmFs",
            "aWduX3NlbGYYAyABKA4yFC5zcGVsbGRhd24uRmxleEFsaWduEi4KEGJhY2tn",
            "cm91bmRfY29sb3IYBCABKAsyFC5zcGVsbGRhd24uRmxleENvbG9yEjIKEGJh",
            "Y2tncm91bmRfaW1hZ2UYBSABKAsyGC5zcGVsbGRhd24uU3ByaXRlQWRkcmVz",
            "cxIsCgxib3JkZXJfY29sb3IYBiABKAsyFi5zcGVsbGRhd24uQm9yZGVyQ29s",
            "b3ISLgoNYm9yZGVyX3JhZGl1cxgHIAEoCzIXLnNwZWxsZGF3bi5Cb3JkZXJS",
            "YWRpdXMSLAoMYm9yZGVyX3dpZHRoGAggASgLMhYuc3BlbGxkYXduLkJvcmRl",
            "cldpZHRoEigKBWluc2V0GAkgASgLMhkuc3BlbGxkYXduLkRpbWVuc2lvbkdy",
            "b3VwEiMKBWNvbG9yGAogASgLMhQuc3BlbGxkYXduLkZsZXhDb2xvchIsCgdk",
            "aXNwbGF5GAsgASgOMhsuc3BlbGxkYXduLkZsZXhEaXNwbGF5U3R5bGUSKAoK",
            "ZmxleF9iYXNpcxgMIAEoCzIULnNwZWxsZGF3bi5EaW1lbnNpb24SMAoOZmxl",
            "eF9kaXJlY3Rpb24YDSABKA4yGC5zcGVsbGRhd24uRmxleERpcmVjdGlvbhIu",
            "CglmbGV4X2dyb3cYDiABKAsyGy5nb29nbGUucHJvdG9idWYuRmxvYXRWYWx1",
            "ZRIwCgtmbGV4X3NocmluaxgPIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GbG9h",
            "dFZhbHVlEiEKBHdyYXAYECABKA4yEy5zcGVsbGRhd24uRmxleFdyYXASJwoJ",
            "Zm9udF9zaXplGBEgASgLMhQuc3BlbGxkYXduLkRpbWVuc2lvbhIkCgZoZWln",
            "aHQYEiABKAsyFC5zcGVsbGRhd24uRGltZW5zaW9uEi8KD2p1c3RpZnlfY29u",
            "dGVudBgTIAEoDjIWLnNwZWxsZGF3bi5GbGV4SnVzdGlmeRIsCg5sZXR0ZXJf",
            "c3BhY2luZxgUIAEoCzIULnNwZWxsZGF3bi5EaW1lbnNpb24SKQoGbWFyZ2lu",
            "GBUgASgLMhkuc3BlbGxkYXduLkRpbWVuc2lvbkdyb3VwEigKCm1heF9oZWln",
            "aHQYFiABKAsyFC5zcGVsbGRhd24uRGltZW5zaW9uEicKCW1heF93aWR0aBgX",
            "IAEoCzIULnNwZWxsZGF3bi5EaW1lbnNpb24SKAoKbWluX2hlaWdodBgYIAEo",
            "CzIULnNwZWxsZGF3bi5EaW1lbnNpb24SJwoJbWluX3dpZHRoGBkgASgLMhQu",
            "c3BlbGxkYXduLkRpbWVuc2lvbhIsCgdvcGFjaXR5GBogASgLMhsuZ29vZ2xl",
            "LnByb3RvYnVmLkZsb2F0VmFsdWUSKQoIb3ZlcmZsb3cYGyABKA4yFy5zcGVs",
            "bGRhd24uRmxleE92ZXJmbG93EioKB3BhZGRpbmcYHCABKAsyGS5zcGVsbGRh",
            "d24uRGltZW5zaW9uR3JvdXASKQoIcG9zaXRpb24YHSABKA4yFy5zcGVsbGRh",
            "d24uRmxleFBvc2l0aW9uEiUKBnJvdGF0ZRgeIAEoCzIVLnNwZWxsZGF3bi5G",
            "bGV4Um90YXRlEiMKBXNjYWxlGB8gASgLMhQuc3BlbGxkYXduLkZsZXhTY2Fs",
            "ZRIuCg10ZXh0X292ZXJmbG93GCAgASgOMhcuc3BlbGxkYXduLlRleHRPdmVy",
            "ZmxvdxIqCgt0ZXh0X3NoYWRvdxghIAEoCzIVLnNwZWxsZGF3bi5UZXh0U2hh",
            "ZG93EjIKEHRyYW5zZm9ybV9vcmlnaW4YIiABKAsyGC5zcGVsbGRhd24uRmxl",
            "eFRyYW5zbGF0ZRIvChF0cmFuc2l0aW9uX2RlbGF5cxgjIAMoCzIULnNwZWxs",
            "ZGF3bi5UaW1lVmFsdWUSMgoUdHJhbnNpdGlvbl9kdXJhdGlvbnMYJCADKAsy",
            "FC5zcGVsbGRhd24uVGltZVZhbHVlEh0KFXRyYW5zaXRpb25fcHJvcGVydGll",
            "cxglIAMoCRI2Chd0cmFuc2l0aW9uX2Vhc2luZ19tb2RlcxgmIAMoDjIVLnNw",
            "ZWxsZGF3bi5FYXNpbmdNb2RlEisKCXRyYW5zbGF0ZRgnIAEoCzIYLnNwZWxs",
            "ZGF3bi5GbGV4VHJhbnNsYXRlEjkKG2JhY2tncm91bmRfaW1hZ2VfdGludF9j",
            "b2xvchgoIAEoCzIULnNwZWxsZGF3bi5GbGV4Q29sb3ISPgobYmFja2dyb3Vu",
            "ZF9pbWFnZV9zY2FsZV9tb2RlGCkgASgOMhkuc3BlbGxkYXduLkltYWdlU2Nh",
            "bGVNb2RlEiQKBGZvbnQYKiABKAsyFi5zcGVsbGRhd24uRm9udEFkZHJlc3MS",
            "KAoKZm9udF9zdHlsZRgrIAEoDjIULnNwZWxsZGF3bi5Gb250U3R5bGUSNQoR",
            "b3ZlcmZsb3dfY2xpcF9ib3gYLCABKA4yGi5zcGVsbGRhd24uT3ZlcmZsb3dD",
            "bGlwQm94Ei8KEXBhcmFncmFwaF9zcGFjaW5nGC0gASgLMhQuc3BlbGxkYXdu",
            "LkRpbWVuc2lvbhIqCgtpbWFnZV9zbGljZRguIAEoCzIVLnNwZWxsZGF3bi5J",
            "bWFnZVNsaWNlEigKCnRleHRfYWxpZ24YLyABKA4yFC5zcGVsbGRhd24uVGV4",
            "dEFsaWduEjAKEnRleHRfb3V0bGluZV9jb2xvchgwIAEoCzIULnNwZWxsZGF3",
            "bi5GbGV4Q29sb3ISNwoSdGV4dF9vdXRsaW5lX3dpZHRoGDEgASgLMhsuZ29v",
            "Z2xlLnByb3RvYnVmLkZsb2F0VmFsdWUSPwoWdGV4dF9vdmVyZmxvd19wb3Np",
            "dGlvbhgyIAEoDjIfLnNwZWxsZGF3bi5UZXh0T3ZlcmZsb3dQb3NpdGlvbhIt",
            "Cgp2aXNpYmlsaXR5GDMgASgOMhkuc3BlbGxkYXduLkZsZXhWaXNpYmlsaXR5",
            "EioKC3doaXRlX3NwYWNlGDQgASgOMhUuc3BlbGxkYXduLldoaXRlU3BhY2US",
            "IwoFd2lkdGgYNSABKAsyFC5zcGVsbGRhd24uRGltZW5zaW9uEioKDHdvcmRf",
            "c3BhY2luZxg2IAEoCzIULnNwZWxsZGF3bi5EaW1lbnNpb24SRgohYmFja2dy",
            "b3VuZF9pbWFnZV9zY2FsZV9tdWx0aXBsaWVyGDcgASgLMhsuZ29vZ2xlLnBy",
            "b3RvYnVmLkZsb2F0VmFsdWUSKwojZml4ZWRfYmFja2dyb3VuZF9pbWFnZV9h",
            "c3BlY3RfcmF0aW8YOCABKAgSMAoMcGlja2luZ19tb2RlGDkgASgOMhouc3Bl",
            "bGxkYXduLkZsZXhQaWNraW5nTW9kZSIJCgdGbGV4Ym94IhUKBFRleHQSDQoF",
            "bGFiZWwYASABKAkiOAoNRXZlbnRIYW5kbGVycxInCghvbl9jbGljaxgBIAEo",
            "CzIVLnNwZWxsZGF3bi5HYW1lQWN0aW9uIjgKCE5vZGVUeXBlEh8KBHRleHQY",
            "ASABKAsyDy5zcGVsbGRhd24uVGV4dEgAQgsKCW5vZGVfdHlwZSKaAgoETm9k",
            "ZRIKCgJpZBgBIAEoCRIMCgRuYW1lGAIgASgJEiYKCW5vZGVfdHlwZRgDIAEo",
            "CzITLnNwZWxsZGF3bi5Ob2RlVHlwZRIhCghjaGlsZHJlbhgEIAMoCzIPLnNw",
            "ZWxsZGF3bi5Ob2RlEjAKDmV2ZW50X2hhbmRsZXJzGAUgASgLMhguc3BlbGxk",
            "YXduLkV2ZW50SGFuZGxlcnMSIwoFc3R5bGUYBiABKAsyFC5zcGVsbGRhd24u",
            "RmxleFN0eWxlEikKC2hvdmVyX3N0eWxlGAcgASgLMhQuc3BlbGxkYXduLkZs",
            "ZXhTdHlsZRIrCg1wcmVzc2VkX3N0eWxlGAggASgLMhQuc3BlbGxkYXduLkZs",
            "ZXhTdHlsZSIfCg5HYW1lSWRlbnRpZmllchINCgV2YWx1ZRgBIAEoBCJECg5D",
            "YXJkSWRlbnRpZmllchIjCgRzaWRlGAEgASgOMhUuc3BlbGxkYXduLlBsYXll",
            "clNpZGUSDQoFaW5kZXgYAiABKA0iywEKFEdhbWVPYmplY3RJZGVudGlmaWVy",
            "EiwKB2NhcmRfaWQYASABKAsyGS5zcGVsbGRhd24uQ2FyZElkZW50aWZpZXJI",
            "ABIpCghpZGVudGl0eRgCIAEoDjIVLnNwZWxsZGF3bi5QbGF5ZXJOYW1lSAAS",
            "JQoEZGVjaxgDIAEoDjIVLnNwZWxsZGF3bi5QbGF5ZXJOYW1lSAASLQoMZGlz",
            "Y2FyZF9waWxlGAQgASgOMhUuc3BlbGxkYXduLlBsYXllck5hbWVIAEIECgJp",
            "ZCKbAQoIQ2FyZEljb24SLAoKYmFja2dyb3VuZBgBIAEoCzIYLnNwZWxsZGF3",
            "bi5TcHJpdGVBZGRyZXNzEioKBHRleHQYAiABKAsyHC5nb29nbGUucHJvdG9i",
            "dWYuU3RyaW5nVmFsdWUSNQoQYmFja2dyb3VuZF9zY2FsZRgDIAEoCzIbLmdv",
            "b2dsZS5wcm90b2J1Zi5GbG9hdFZhbHVlIuwBCglDYXJkSWNvbnMSKgoNdG9w",
            "X2xlZnRfaWNvbhgBIAEoCzITLnNwZWxsZGF3bi5DYXJkSWNvbhIrCg50b3Bf",
            "cmlnaHRfaWNvbhgCIAEoCzITLnNwZWxsZGF3bi5DYXJkSWNvbhIuChFib3R0",
            "b21fcmlnaHRfaWNvbhgDIAEoCzITLnNwZWxsZGF3bi5DYXJkSWNvbhItChBi",
            "b3R0b21fbGVmdF9pY29uGAQgASgLMhMuc3BlbGxkYXduLkNhcmRJY29uEicK",
            "CmFyZW5hX2ljb24YBSABKAsyEy5zcGVsbGRhd24uQ2FyZEljb24iGQoJQ2Fy",
            "ZFRpdGxlEgwKBHRleHQYASABKAkiGQoJUnVsZXNUZXh0EgwKBHRleHQYASAB",
            "KAkiCgoIUGlja1Jvb20iRgoNQ2FyZFRhcmdldGluZxIoCglwaWNrX3Jvb20Y",
            "ASABKAsyEy5zcGVsbGRhd24uUGlja1Jvb21IAEILCgl0YXJnZXRpbmciGQoX",
            "T2JqZWN0UG9zaXRpb25PZmZzY3JlZW4idgoST2JqZWN0UG9zaXRpb25Sb29t",
            "EioKB3Jvb21faWQYASABKA4yGS5zcGVsbGRhd24uUm9vbUlkZW50aWZpZXIS",
            "NAoNcm9vbV9sb2NhdGlvbhgCIAEoDjIdLnNwZWxsZGF3bi5DbGllbnRSb29t",
            "TG9jYXRpb24iSgoST2JqZWN0UG9zaXRpb25JdGVtEjQKDWl0ZW1fbG9jYXRp",
            "b24YASABKA4yHS5zcGVsbGRhd24uQ2xpZW50SXRlbUxvY2F0aW9uIhcKFU9i",
            "amVjdFBvc2l0aW9uU3RhZ2luZyI6ChJPYmplY3RQb3NpdGlvbkhhbmQSJAoF",
            "b3duZXIYASABKA4yFS5zcGVsbGRhd24uUGxheWVyTmFtZSI6ChJPYmplY3RQ",
            "b3NpdGlvbkRlY2sSJAoFb3duZXIYASABKA4yFS5zcGVsbGRhd24uUGxheWVy",
            "TmFtZSJDChtPYmplY3RQb3NpdGlvbkRlY2tDb250YWluZXISJAoFb3duZXIY",
            "ASABKA4yFS5zcGVsbGRhd24uUGxheWVyTmFtZSJBChlPYmplY3RQb3NpdGlv",
            "bkRpc2NhcmRQaWxlEiQKBW93bmVyGAEgASgOMhUuc3BlbGxkYXduLlBsYXll",
            "ck5hbWUiSgoiT2JqZWN0UG9zaXRpb25EaXNjYXJkUGlsZUNvbnRhaW5lchIk",
            "CgVvd25lchgBIAEoDjIVLnNwZWxsZGF3bi5QbGF5ZXJOYW1lIh4KHE9iamVj",
            "dFBvc2l0aW9uU2NvcmVBbmltYXRpb24iFAoST2JqZWN0UG9zaXRpb25SYWlk",
            "IhcKFU9iamVjdFBvc2l0aW9uQnJvd3NlciI+ChZPYmplY3RQb3NpdGlvbklk",
            "ZW50aXR5EiQKBW93bmVyGAEgASgOMhUuc3BlbGxkYXduLlBsYXllck5hbWUi",
            "RwofT2JqZWN0UG9zaXRpb25JZGVudGl0eUNvbnRhaW5lchIkCgVvd25lchgB",
            "IAEoDjIVLnNwZWxsZGF3bi5QbGF5ZXJOYW1lIhsKGU9iamVjdFBvc2l0aW9u",
            "UmV3YXJkQ2hlc3Qi1QYKDk9iamVjdFBvc2l0aW9uEhMKC3NvcnRpbmdfa2V5",
            "GAEgASgNEjcKCW9mZnNjcmVlbhgCIAEoCzIiLnNwZWxsZGF3bi5PYmplY3RQ",
            "b3NpdGlvbk9mZnNjcmVlbkgAEi0KBHJvb20YAyABKAsyHS5zcGVsbGRhd24u",
            "T2JqZWN0UG9zaXRpb25Sb29tSAASLQoEaXRlbRgEIAEoCzIdLnNwZWxsZGF3",
            "bi5PYmplY3RQb3NpdGlvbkl0ZW1IABIzCgdzdGFnaW5nGAUgASgLMiAuc3Bl",
            "bGxkYXduLk9iamVjdFBvc2l0aW9uU3RhZ2luZ0gAEi0KBGhhbmQYBiABKAsy",
            "HS5zcGVsbGRhd24uT2JqZWN0UG9zaXRpb25IYW5kSAASLQoEZGVjaxgHIAEo",
            "CzIdLnNwZWxsZGF3bi5PYmplY3RQb3NpdGlvbkRlY2tIABJACg5kZWNrX2Nv",
            "bnRhaW5lchgIIAEoCzImLnNwZWxsZGF3bi5PYmplY3RQb3NpdGlvbkRlY2tD",
            "b250YWluZXJIABI8CgxkaXNjYXJkX3BpbGUYCSABKAsyJC5zcGVsbGRhd24u",
            "T2JqZWN0UG9zaXRpb25EaXNjYXJkUGlsZUgAEk8KFmRpc2NhcmRfcGlsZV9j",
            "b250YWluZXIYCiABKAsyLS5zcGVsbGRhd24uT2JqZWN0UG9zaXRpb25EaXNj",
            "YXJkUGlsZUNvbnRhaW5lckgAEkIKD3Njb3JlX2FuaW1hdGlvbhgLIAEoCzIn",
            "LnNwZWxsZGF3bi5PYmplY3RQb3NpdGlvblNjb3JlQW5pbWF0aW9uSAASLQoE",
            "cmFpZBgMIAEoCzIdLnNwZWxsZGF3bi5PYmplY3RQb3NpdGlvblJhaWRIABIz",
            "Cgdicm93c2VyGA0gASgLMiAuc3BlbGxkYXduLk9iamVjdFBvc2l0aW9uQnJv",
            "d3NlckgAEjUKCGlkZW50aXR5GA4gASgLMiEuc3BlbGxkYXduLk9iamVjdFBv",
            "c2l0aW9uSWRlbnRpdHlIABJIChJpZGVudGl0eV9jb250YWluZXIYDyABKAsy",
            "Ki5zcGVsbGRhd24uT2JqZWN0UG9zaXRpb25JZGVudGl0eUNvbnRhaW5lckgA",
            "QgoKCHBvc2l0aW9uItMDChBSZXZlYWxlZENhcmRWaWV3EiwKCmNhcmRfZnJh",
            "bWUYASABKAsyGC5zcGVsbGRhd24uU3ByaXRlQWRkcmVzcxIyChB0aXRsZV9i",
            "YWNrZ3JvdW5kGAIgASgLMhguc3BlbGxkYXduLlNwcml0ZUFkZHJlc3MSJwoF",
            "amV3ZWwYAyABKAsyGC5zcGVsbGRhd24uU3ByaXRlQWRkcmVzcxInCgVpbWFn",
            "ZRgEIAEoCzIYLnNwZWxsZGF3bi5TcHJpdGVBZGRyZXNzEiMKBXRpdGxlGAUg",
            "ASgLMhQuc3BlbGxkYXduLkNhcmRUaXRsZRIoCgpydWxlc190ZXh0GAYgASgL",
            "MhQuc3BlbGxkYXduLlJ1bGVzVGV4dBIZChFyZXZlYWxlZF9pbl9hcmVuYRgH",
            "IAEoCBIrCgl0YXJnZXRpbmcYCCABKAsyGC5zcGVsbGRhd24uQ2FyZFRhcmdl",
            "dGluZxI2ChNvbl9yZWxlYXNlX3Bvc2l0aW9uGAkgASgLMhkuc3BlbGxkYXdu",
            "Lk9iamVjdFBvc2l0aW9uEhAKCGNhbl9wbGF5GAogASgIEioKEXN1cHBsZW1l",
            "bnRhbF9pbmZvGAsgASgLMg8uc3BlbGxkYXduLk5vZGUi8QEKCENhcmRWaWV3",
            "EioKB2NhcmRfaWQYASABKAsyGS5zcGVsbGRhd24uQ2FyZElkZW50aWZpZXIS",
            "KAoKY2FyZF9pY29ucxgCIAEoCzIULnNwZWxsZGF3bi5DYXJkSWNvbnMSLQoL",
            "YXJlbmFfZnJhbWUYAyABKAsyGC5zcGVsbGRhd24uU3ByaXRlQWRkcmVzcxIs",
            "Cg1vd25pbmdfcGxheWVyGAQgASgOMhUuc3BlbGxkYXduLlBsYXllck5hbWUS",
            "MgoNcmV2ZWFsZWRfY2FyZBgFIAEoCzIbLnNwZWxsZGF3bi5SZXZlYWxlZENh",
            "cmRWaWV3Ii4KCEhhbmRWaWV3EiIKBWNhcmRzGAEgAygLMhMuc3BlbGxkYXdu",
            "LkNhcmRWaWV3IjUKD0Rpc2NhcmRQaWxlVmlldxIiCgVjYXJkcxgBIAMoCzIT",
            "LnNwZWxsZGF3bi5DYXJkVmlldyLDAQoKUGxheWVySW5mbxIqCgRuYW1lGAEg",
            "ASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEioKCHBvcnRyYWl0",
            "GAIgASgLMhguc3BlbGxkYXduLlNwcml0ZUFkZHJlc3MSMAoOcG9ydHJhaXRf",
            "ZnJhbWUYAyABKAsyGC5zcGVsbGRhd24uU3ByaXRlQWRkcmVzcxIrCgljYXJk",
            "X2JhY2sYBCABKAsyGC5zcGVsbGRhd24uU3ByaXRlQWRkcmVzcyIaCghNYW5h",
            "VmlldxIOCgZhbW91bnQYASABKA0iGgoJU2NvcmVWaWV3Eg0KBXNjb3JlGAEg",
            "ASgNIokBCghSb29tVmlldxIqCgdyb29tX2lkGAEgASgOMhkuc3BlbGxkYXdu",
            "LlJvb21JZGVudGlmaWVyEicKCmJhY2tfY2FyZHMYAiADKAsyEy5zcGVsbGRh",
            "d24uQ2FyZFZpZXcSKAoLZnJvbnRfY2FyZHMYAyADKAsyEy5zcGVsbGRhd24u",
            "Q2FyZFZpZXciMwoRQWN0aW9uVHJhY2tlclZpZXcSHgoWYXZhaWxhYmxlX2Fj",
            "dGlvbl9jb3VudBgBIAEoDSIyCghEZWNrVmlldxImCgl0b3BfY2FyZHMYASAD",
            "KAsyEy5zcGVsbGRhd24uQ2FyZFZpZXci2wEKClBsYXllclZpZXcSIwoEc2lk",
            "ZRgBIAEoDjIVLnNwZWxsZGF3bi5QbGF5ZXJTaWRlEioKC3BsYXllcl9pbmZv",
            "GAIgASgLMhUuc3BlbGxkYXduLlBsYXllckluZm8SIwoFc2NvcmUYAyABKAsy",
            "FC5zcGVsbGRhd24uU2NvcmVWaWV3EiEKBG1hbmEYBCABKAsyEy5zcGVsbGRh",
            "d24uTWFuYVZpZXcSNAoOYWN0aW9uX3RyYWNrZXIYBSABKAsyHC5zcGVsbGRh",
            "d24uQWN0aW9uVHJhY2tlclZpZXciygEKCEdhbWVWaWV3EioKB2dhbWVfaWQY",
            "ASABKAsyGS5zcGVsbGRhd24uR2FtZUlkZW50aWZpZXISIwoEdXNlchgCIAEo",
            "CzIVLnNwZWxsZGF3bi5QbGF5ZXJWaWV3EicKCG9wcG9uZW50GAMgASgLMhUu",
            "c3BlbGxkYXduLlBsYXllclZpZXcSLwoQY3VycmVudF9wcmlvcml0eRgEIAEo",
            "DjIVLnNwZWxsZGF3bi5QbGF5ZXJOYW1lEhMKC3JhaWRfYWN0aXZlGAUgASgI",
            "InYKDlN0YW5kYXJkQWN0aW9uEg8KB3BheWxvYWQYASABKAwSJgoGdXBkYXRl",
            "GAIgASgLMhYuc3BlbGxkYXduLkNvbW1hbmRMaXN0EisKDWRlYnVnX3BheWxv",
            "YWQYAyABKAsyFC5nb29nbGUucHJvdG9idWYuQW55IhAKDkdhaW5NYW5hQWN0",
            "aW9uIhAKDkRyYXdDYXJkQWN0aW9uIj8KEUxldmVsVXBSb29tQWN0aW9uEioK",
            "B3Jvb21faWQYASABKA4yGS5zcGVsbGRhd24uUm9vbUlkZW50aWZpZXIiSQoK",
            "Q2FyZFRhcmdldBIsCgdyb29tX2lkGAEgASgOMhkuc3BlbGxkYXduLlJvb21J",
            "ZGVudGlmaWVySABCDQoLY2FyZF90YXJnZXQiYwoOUGxheUNhcmRBY3Rpb24S",
            "KgoHY2FyZF9pZBgBIAEoCzIZLnNwZWxsZGF3bi5DYXJkSWRlbnRpZmllchIl",
            "CgZ0YXJnZXQYAiABKAsyFS5zcGVsbGRhd24uQ2FyZFRhcmdldCJAChJJbml0",
            "aWF0ZVJhaWRBY3Rpb24SKgoHcm9vbV9pZBgBIAEoDjIZLnNwZWxsZGF3bi5S",
            "b29tSWRlbnRpZmllciJRChFUb2dnbGVQYW5lbEFjdGlvbhIuCg1wYW5lbF9h",
            "ZGRyZXNzGAEgASgOMhcuc3BlbGxkYXduLlBhbmVsQWRkcmVzcxIMCgRvcGVu",
            "GAIgASgIIoEDCgpHYW1lQWN0aW9uEjQKD3N0YW5kYXJkX2FjdGlvbhgBIAEo",
            "CzIZLnNwZWxsZGF3bi5TdGFuZGFyZEFjdGlvbkgAEjQKDHRvZ2dsZV9wYW5l",
            "bBgCIAEoCzIcLnNwZWxsZGF3bi5Ub2dnbGVQYW5lbEFjdGlvbkgAEi4KCWdh",
            "aW5fbWFuYRgDIAEoCzIZLnNwZWxsZGF3bi5HYWluTWFuYUFjdGlvbkgAEi4K",
            "CWRyYXdfY2FyZBgEIAEoCzIZLnNwZWxsZGF3bi5EcmF3Q2FyZEFjdGlvbkgA",
            "Ei4KCXBsYXlfY2FyZBgFIAEoCzIZLnNwZWxsZGF3bi5QbGF5Q2FyZEFjdGlv",
            "bkgAEjUKDWxldmVsX3VwX3Jvb20YBiABKAsyHC5zcGVsbGRhd24uTGV2ZWxV",
            "cFJvb21BY3Rpb25IABI2Cg1pbml0aWF0ZV9yYWlkGAcgASgLMh0uc3BlbGxk",
            "YXduLkluaXRpYXRlUmFpZEFjdGlvbkgAQggKBmFjdGlvbiJxCgtHYW1lUmVx",
            "dWVzdBIlCgZhY3Rpb24YASABKAsyFS5zcGVsbGRhd24uR2FtZUFjdGlvbhIq",
            "CgdnYW1lX2lkGAIgASgLMhkuc3BlbGxkYXduLkdhbWVJZGVudGlmaWVyEg8K",
            "B3VzZXJfaWQYAyABKAQiIgoPRGVidWdMb2dDb21tYW5kEg8KB21lc3NhZ2UY",
            "ASABKAkiQAoUUnVuSW5QYXJhbGxlbENvbW1hbmQSKAoIY29tbWFuZHMYASAD",
            "KAsyFi5zcGVsbGRhd24uQ29tbWFuZExpc3QiNgoMRGVsYXlDb21tYW5kEiYK",
            "CGR1cmF0aW9uGAEgASgLMhQuc3BlbGxkYXduLlRpbWVWYWx1ZSJZCg5JbnRl",
            "cmZhY2VQYW5lbBIoCgdhZGRyZXNzGAEgASgOMhcuc3BlbGxkYXduLlBhbmVs",
            "QWRkcmVzcxIdCgRub2RlGAIgASgLMg8uc3BlbGxkYXduLk5vZGUiNgoVSW50",
            "ZXJmYWNlTWFpbkNvbnRyb2xzEh0KBG5vZGUYASABKAsyDy5zcGVsbGRhd24u",
            "Tm9kZSKXAQoOQ2FyZEFuY2hvck5vZGUSKgoHY2FyZF9pZBgBIAEoCzIZLnNw",
            "ZWxsZGF3bi5DYXJkSWRlbnRpZmllchIdCgRub2RlGAIgASgLMg8uc3BlbGxk",
            "YXduLk5vZGUSOgoPYW5jaG9yX3Bvc2l0aW9uGAMgASgOMiEuc3BlbGxkYXdu",
            "LkNhcmROb2RlQW5jaG9yUG9zaXRpb24isgEKFlJlbmRlckludGVyZmFjZUNv",
            "bW1hbmQSKQoGcGFuZWxzGAEgAygLMhkuc3BlbGxkYXduLkludGVyZmFjZVBh",
            "bmVsEjcKDW1haW5fY29udHJvbHMYAiABKAsyIC5zcGVsbGRhd24uSW50ZXJm",
            "YWNlTWFpbkNvbnRyb2xzEjQKEWNhcmRfYW5jaG9yX25vZGVzGAMgAygLMhku",
            "c3BlbGxkYXduLkNhcmRBbmNob3JOb2RlIjoKFVVwZGF0ZUdhbWVWaWV3Q29t",
            "bWFuZBIhCgRnYW1lGAEgASgLMhMuc3BlbGxkYXduLkdhbWVWaWV3IpYBChBW",
            "aXNpdFJvb21Db21tYW5kEigKCWluaXRpYXRvchgBIAEoDjIVLnNwZWxsZGF3",
            "bi5QbGF5ZXJOYW1lEioKB3Jvb21faWQYAiABKA4yGS5zcGVsbGRhd24uUm9v",
            "bUlkZW50aWZpZXISLAoKdmlzaXRfdHlwZRgDIAEoDjIYLnNwZWxsZGF3bi5S",
            "b29tVmlzaXRUeXBlIs4BChlDcmVhdGVPclVwZGF0ZUNhcmRDb21tYW5kEiEK",
            "BGNhcmQYASABKAsyEy5zcGVsbGRhd24uQ2FyZFZpZXcSMgoPY3JlYXRlX3Bv",
            "c2l0aW9uGAIgASgLMhkuc3BlbGxkYXduLk9iamVjdFBvc2l0aW9uEjoKEGNy",
            "ZWF0ZV9hbmltYXRpb24YAyABKA4yIC5zcGVsbGRhd24uQ2FyZENyZWF0aW9u",
            "QW5pbWF0aW9uEh4KFmRpc2FibGVfZmxpcF9hbmltYXRpb24YBCABKAgiQAoS",
            "RGVzdHJveUNhcmRDb21tYW5kEioKB2NhcmRfaWQYASABKAsyGS5zcGVsbGRh",
            "d24uQ2FyZElkZW50aWZpZXIijgEKFk1vdmVHYW1lT2JqZWN0c0NvbW1hbmQS",
            "LAoDaWRzGAEgAygLMh8uc3BlbGxkYXduLkdhbWVPYmplY3RJZGVudGlmaWVy",
            "EisKCHBvc2l0aW9uGAIgASgLMhkuc3BlbGxkYXduLk9iamVjdFBvc2l0aW9u",
            "EhkKEWRpc2FibGVfYW5pbWF0aW9uGAMgASgIIqUBCiBNb3ZlR2FtZU9iamVj",
            "dHNBdFBvc2l0aW9uQ29tbWFuZBIyCg9zb3VyY2VfcG9zaXRpb24YASABKAsy",
            "GS5zcGVsbGRhd24uT2JqZWN0UG9zaXRpb24SMgoPdGFyZ2V0X3Bvc2l0aW9u",
            "GAIgASgLMhkuc3BlbGxkYXduLk9iamVjdFBvc2l0aW9uEhkKEWRpc2FibGVf",
            "YW5pbWF0aW9uGAMgASgIIj4KEFBsYXlTb3VuZENvbW1hbmQSKgoFc291bmQY",
            "ASABKAsyGy5zcGVsbGRhd24uQXVkaW9DbGlwQWRkcmVzcyI9Cg9TZXRNdXNp",
            "Y0NvbW1hbmQSKgoLbXVzaWNfc3RhdGUYASABKA4yFS5zcGVsbGRhd24uTXVz",
            "aWNTdGF0ZSKhBAoVRmlyZVByb2plY3RpbGVDb21tYW5kEjIKCXNvdXJjZV9p",
            "ZBgBIAEoCzIfLnNwZWxsZGF3bi5HYW1lT2JqZWN0SWRlbnRpZmllchIyCgl0",
            "YXJnZXRfaWQYAiABKAsyHy5zcGVsbGRhd24uR2FtZU9iamVjdElkZW50aWZp",
            "ZXISMAoKcHJvamVjdGlsZRgDIAEoCzIcLnNwZWxsZGF3bi5Qcm9qZWN0aWxl",
            "QWRkcmVzcxItCg90cmF2ZWxfZHVyYXRpb24YBCABKAsyFC5zcGVsbGRhd24u",
            "VGltZVZhbHVlEi8KCmZpcmVfc291bmQYBSABKAsyGy5zcGVsbGRhd24uQXVk",
            "aW9DbGlwQWRkcmVzcxIxCgxpbXBhY3Rfc291bmQYBiABKAsyGy5zcGVsbGRh",
            "d24uQXVkaW9DbGlwQWRkcmVzcxIwCg5hZGRpdGlvbmFsX2hpdBgHIAEoCzIY",
            "LnNwZWxsZGF3bi5FZmZlY3RBZGRyZXNzEjIKFGFkZGl0aW9uYWxfaGl0X2Rl",
            "bGF5GAggASgLMhQuc3BlbGxkYXduLlRpbWVWYWx1ZRIrCg13YWl0X2R1cmF0",
            "aW9uGAkgASgLMhQuc3BlbGxkYXduLlRpbWVWYWx1ZRITCgtoaWRlX29uX2hp",
            "dBgKIAEoCBIzChBqdW1wX3RvX3Bvc2l0aW9uGAsgASgLMhkuc3BlbGxkYXdu",
            "Lk9iamVjdFBvc2l0aW9uIl8KElBsYXlFZmZlY3RQb3NpdGlvbhI2CgtnYW1l",
            "X29iamVjdBgBIAEoCzIfLnNwZWxsZGF3bi5HYW1lT2JqZWN0SWRlbnRpZmll",
            "ckgAQhEKD2VmZmVjdF9wb3NpdGlvbiLuAQoRUGxheUVmZmVjdENvbW1hbmQS",
            "KAoGZWZmZWN0GAEgASgLMhguc3BlbGxkYXduLkVmZmVjdEFkZHJlc3MSLwoI",
            "cG9zaXRpb24YAiABKAsyHS5zcGVsbGRhd24uUGxheUVmZmVjdFBvc2l0aW9u",
            "EioKBXNjYWxlGAMgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkZsb2F0VmFsdWUS",
            "JgoIZHVyYXRpb24YBCABKAsyFC5zcGVsbGRhd24uVGltZVZhbHVlEioKBXNv",
            "dW5kGAUgASgLMhsuc3BlbGxkYXduLkF1ZGlvQ2xpcEFkZHJlc3MiTQoZRGlz",
            "cGxheUdhbWVNZXNzYWdlQ29tbWFuZBIwCgxtZXNzYWdlX3R5cGUYASABKA4y",
            "Gi5zcGVsbGRhd24uR2FtZU1lc3NhZ2VUeXBlIjwKHFNldEdhbWVPYmplY3Rz",
            "RW5hYmxlZENvbW1hbmQSHAoUZ2FtZV9vYmplY3RzX2VuYWJsZWQYASABKAgi",
            "PQoVRGlzcGxheVJld2FyZHNDb21tYW5kEiQKB3Jld2FyZHMYASADKAsyEy5z",
            "cGVsbGRhd24uQ2FyZFZpZXciTgoQTG9hZFNjZW5lQ29tbWFuZBISCgpzY2Vu",
            "ZV9uYW1lGAEgASgJEiYKBG1vZGUYAiABKA4yGC5zcGVsbGRhd24uU2NlbmVM",
            "b2FkTW9kZSLHCAoLR2FtZUNvbW1hbmQSLwoJZGVidWdfbG9nGAEgASgLMhou",
            "c3BlbGxkYXduLkRlYnVnTG9nQ29tbWFuZEgAEjoKD3J1bl9pbl9wYXJhbGxl",
            "bBgCIAEoCzIfLnNwZWxsZGF3bi5SdW5JblBhcmFsbGVsQ29tbWFuZEgAEigK",
            "BWRlbGF5GAMgASgLMhcuc3BlbGxkYXduLkRlbGF5Q29tbWFuZEgAEj0KEHJl",
            "bmRlcl9pbnRlcmZhY2UYBCABKAsyIS5zcGVsbGRhd24uUmVuZGVySW50ZXJm",
            "YWNlQ29tbWFuZEgAEjwKEHVwZGF0ZV9nYW1lX3ZpZXcYBSABKAsyIC5zcGVs",
            "bGRhd24uVXBkYXRlR2FtZVZpZXdDb21tYW5kSAASMQoKdmlzaXRfcm9vbRgI",
            "IAEoCzIbLnNwZWxsZGF3bi5WaXNpdFJvb21Db21tYW5kSAASRQoVY3JlYXRl",
            "X29yX3VwZGF0ZV9jYXJkGAkgASgLMiQuc3BlbGxkYXduLkNyZWF0ZU9yVXBk",
            "YXRlQ2FyZENvbW1hbmRIABI1CgxkZXN0cm95X2NhcmQYCiABKAsyHS5zcGVs",
            "bGRhd24uRGVzdHJveUNhcmRDb21tYW5kSAASPgoRbW92ZV9nYW1lX29iamVj",
            "dHMYCyABKAsyIS5zcGVsbGRhd24uTW92ZUdhbWVPYmplY3RzQ29tbWFuZEgA",
            "Ek8KGG1vdmVfb2JqZWN0c19hdF9wb3NpdGlvbhgMIAEoCzIrLnNwZWxsZGF3",
            "bi5Nb3ZlR2FtZU9iamVjdHNBdFBvc2l0aW9uQ29tbWFuZEgAEjEKCnBsYXlf",
            "c291bmQYDSABKAsyGy5zcGVsbGRhd24uUGxheVNvdW5kQ29tbWFuZEgAEi8K",
            "CXNldF9tdXNpYxgOIAEoCzIaLnNwZWxsZGF3bi5TZXRNdXNpY0NvbW1hbmRI",
            "ABI7Cg9maXJlX3Byb2plY3RpbGUYDyABKAsyIC5zcGVsbGRhd24uRmlyZVBy",
            "b2plY3RpbGVDb21tYW5kSAASMwoLcGxheV9lZmZlY3QYECABKAsyHC5zcGVs",
            "bGRhd24uUGxheUVmZmVjdENvbW1hbmRIABJEChRkaXNwbGF5X2dhbWVfbWVz",
            "c2FnZRgRIAEoCzIkLnNwZWxsZGF3bi5EaXNwbGF5R2FtZU1lc3NhZ2VDb21t",
            "YW5kSAASSwoYc2V0X2dhbWVfb2JqZWN0c19lbmFibGVkGBIgASgLMicuc3Bl",
            "bGxkYXduLlNldEdhbWVPYmplY3RzRW5hYmxlZENvbW1hbmRIABI7Cg9kaXNw",
            "bGF5X3Jld2FyZHMYEyABKAsyIC5zcGVsbGRhd24uRGlzcGxheVJld2FyZHND",
            "b21tYW5kSAASMQoKbG9hZF9zY2VuZRgUIAEoCzIbLnNwZWxsZGF3bi5Mb2Fk",
            "U2NlbmVDb21tYW5kSABCCQoHY29tbWFuZCI3CgtDb21tYW5kTGlzdBIoCghj",
            "b21tYW5kcxgBIAMoCzIWLnNwZWxsZGF3bi5HYW1lQ29tbWFuZCJgCg5Db25u",
            "ZWN0UmVxdWVzdBIqCgdnYW1lX2lkGAEgASgLMhkuc3BlbGxkYXduLkdhbWVJ",
            "ZGVudGlmaWVyEg8KB3VzZXJfaWQYAiABKAQSEQoJdGVzdF9tb2RlGAMgASgI",
            "Kp8BCglGbGV4QWxpZ24SGgoWRkxFWF9BTElHTl9VTlNQRUNJRklFRBAAEhMK",
            "D0ZMRVhfQUxJR05fQVVUTxABEhkKFUZMRVhfQUxJR05fRkxFWF9TVEFSVBAC",
            "EhUKEUZMRVhfQUxJR05fQ0VOVEVSEAMSFwoTRkxFWF9BTElHTl9GTEVYX0VO",
            "RBAEEhYKEkZMRVhfQUxJR05fU1RSRVRDSBAFKnAKEEZsZXhEaXNwbGF5U3R5",
            "bGUSIgoeRkxFWF9ESVNQTEFZX1NUWUxFX1VOU1BFQ0lGSUVEEAASGwoXRkxF",
            "WF9ESVNQTEFZX1NUWUxFX0ZMRVgQARIbChdGTEVYX0RJU1BMQVlfU1RZTEVf",
            "Tk9ORRACKqUBCg1GbGV4RGlyZWN0aW9uEh4KGkZMRVhfRElSRUNUSU9OX1VO",
            "U1BFQ0lGSUVEEAASGQoVRkxFWF9ESVJFQ1RJT05fQ09MVU1OEAESIQodRkxF",
            "WF9ESVJFQ1RJT05fQ09MVU1OX1JFVkVSU0UQAhIWChJGTEVYX0RJUkVDVElP",
            "Tl9ST1cQAxIeChpGTEVYX0RJUkVDVElPTl9ST1dfUkVWRVJTRRAEKmwKCEZs",
            "ZXhXcmFwEhkKFUZMRVhfV1JBUF9VTlNQRUNJRklFRBAAEhUKEUZMRVhfV1JB",
            "UF9OT19XUkFQEAESEgoORkxFWF9XUkFQX1dSQVAQAhIaChZGTEVYX1dSQVBf",
            "V1JBUF9SRVZFUlNFEAMquwEKC0ZsZXhKdXN0aWZ5EhwKGEZMRVhfSlVTVElG",
            "WV9VTlNQRUNJRklFRBAAEhsKF0ZMRVhfSlVTVElGWV9GTEVYX1NUQVJUEAES",
            "FwoTRkxFWF9KVVNUSUZZX0NFTlRFUhACEhkKFUZMRVhfSlVTVElGWV9GTEVY",
            "X0VORBADEh4KGkZMRVhfSlVTVElGWV9TUEFDRV9CRVRXRUVOEAQSHQoZRkxF",
            "WF9KVVNUSUZZX1NQQUNFX0FST1VORBAFKmIKDEZsZXhPdmVyZmxvdxIdChlG",
            "TEVYX09WRVJGTE9XX1VOU1BFQ0lGSUVEEAASGQoVRkxFWF9PVkVSRkxPV19W",
            "SVNJQkxFEAESGAoURkxFWF9PVkVSRkxPV19ISURERU4QAiplCgxGbGV4UG9z",
            "aXRpb24SHQoZRkxFWF9QT1NJVElPTl9VTlNQRUNJRklFRBAAEhoKFkZMRVhf",
            "UE9TSVRJT05fUkVMQVRJVkUQARIaChZGTEVYX1BPU0lUSU9OX0FCU09MVVRF",
            "EAIqYQoMVGV4dE92ZXJmbG93Eh0KGVRFWFRfT1ZFUkZMT1dfVU5TUEVDSUZJ",
            "RUQQABIWChJURVhUX09WRVJGTE9XX0NMSVAQARIaChZURVhUX09WRVJGTE9X",
            "X0VMTElQU0lTEAIq8wUKCkVhc2luZ01vZGUSGwoXRUFTSU5HX01PREVfVU5T",
            "UEVDSUZJRUQQABIUChBFQVNJTkdfTU9ERV9FQVNFEAESFwoTRUFTSU5HX01P",
            "REVfRUFTRV9JThACEhgKFEVBU0lOR19NT0RFX0VBU0VfT1VUEAMSGwoXRUFT",
            "SU5HX01PREVfRUFTRV9JTl9PVVQQBBIWChJFQVNJTkdfTU9ERV9MSU5FQVIQ",
            "BRIcChhFQVNJTkdfTU9ERV9FQVNFX0lOX1NJTkUQBhIdChlFQVNJTkdfTU9E",
            "RV9FQVNFX09VVF9TSU5FEAcSIAocRUFTSU5HX01PREVfRUFTRV9JTl9PVVRf",
            "U0lORRAIEh0KGUVBU0lOR19NT0RFX0VBU0VfSU5fQ1VCSUMQCRIeChpFQVNJ",
            "TkdfTU9ERV9FQVNFX09VVF9DVUJJQxAKEiEKHUVBU0lOR19NT0RFX0VBU0Vf",
            "SU5fT1VUX0NVQklDEAsSHAoYRUFTSU5HX01PREVfRUFTRV9JTl9DSVJDEAwS",
            "HQoZRUFTSU5HX01PREVfRUFTRV9PVVRfQ0lSQxANEiAKHEVBU0lOR19NT0RF",
            "X0VBU0VfSU5fT1VUX0NJUkMQDhIfChtFQVNJTkdfTU9ERV9FQVNFX0lOX0VM",
            "QVNUSUMQDxIgChxFQVNJTkdfTU9ERV9FQVNFX09VVF9FTEFTVElDEBASIwof",
            "RUFTSU5HX01PREVfRUFTRV9JTl9PVVRfRUxBU1RJQxAREhwKGEVBU0lOR19N",
            "T0RFX0VBU0VfSU5fQkFDSxASEh0KGUVBU0lOR19NT0RFX0VBU0VfT1VUX0JB",
            "Q0sQExIgChxFQVNJTkdfTU9ERV9FQVNFX0lOX09VVF9CQUNLEBQSHgoaRUFT",
            "SU5HX01PREVfRUFTRV9JTl9CT1VOQ0UQFRIfChtFQVNJTkdfTU9ERV9FQVNF",
            "X09VVF9CT1VOQ0UQFhIiCh5FQVNJTkdfTU9ERV9FQVNFX0lOX09VVF9CT1VO",
            "Q0UQFyqgAQoOSW1hZ2VTY2FsZU1vZGUSIAocSU1BR0VfU0NBTEVfTU9ERV9V",
            "TlNQRUNJRklFRBAAEiQKIElNQUdFX1NDQUxFX01PREVfU1RSRVRDSF9UT19G",
            "SUxMEAESIwofSU1BR0VfU0NBTEVfTU9ERV9TQ0FMRV9BTkRfQ1JPUBACEiEK",
            "HUlNQUdFX1NDQUxFX01PREVfU0NBTEVfVE9fRklUEAMqigEKCUZvbnRTdHls",
            "ZRIaChZGT05UX1NUWUxFX1VOU1BFQ0lGSUVEEAASFQoRRk9OVF9TVFlMRV9O",
            "T1JNQUwQARITCg9GT05UX1NUWUxFX0JPTEQQAhIVChFGT05UX1NUWUxFX0lU",
            "QUxJQxADEh4KGkZPTlRfU1RZTEVfQk9MRF9BTkRfSVRBTElDEAQqegoPT3Zl",
            "cmZsb3dDbGlwQm94EiEKHU9WRVJGTE9XX0NMSVBfQk9YX1VOU1BFQ0lGSUVE",
            "EAASIQodT1ZFUkZMT1dfQ0xJUF9CT1hfUEFERElOR19CT1gQARIhCh1PVkVS",
            "RkxPV19DTElQX0JPWF9DT05URU5UX0JPWBACKqYCCglUZXh0QWxpZ24SGgoW",
            "VEVYVF9BTElHTl9VTlNQRUNJRklFRBAAEhkKFVRFWFRfQUxJR05fVVBQRVJf",
            "TEVGVBABEhsKF1RFWFRfQUxJR05fVVBQRVJfQ0VOVEVSEAISGgoWVEVYVF9B",
            "TElHTl9VUFBFUl9SSUdIVBADEhoKFlRFWFRfQUxJR05fTUlERExFX0xFRlQQ",
            "BBIcChhURVhUX0FMSUdOX01JRERMRV9DRU5URVIQBRIbChdURVhUX0FMSUdO",
            "X01JRERMRV9SSUdIVBAGEhkKFVRFWFRfQUxJR05fTE9XRVJfTEVGVBAHEhsK",
            "F1RFWFRfQUxJR05fTE9XRVJfQ0VOVEVSEAgSGgoWVEVYVF9BTElHTl9MT1dF",
            "Ul9SSUdIVBAJKqMBChRUZXh0T3ZlcmZsb3dQb3NpdGlvbhImCiJURVhUX09W",
            "RVJGTE9XX1BPU0lUSU9OX1VOU1BFQ0lGSUVEEAASHgoaVEVYVF9PVkVSRkxP",
            "V19QT1NJVElPTl9FTkQQARIgChxURVhUX09WRVJGTE9XX1BPU0lUSU9OX1NU",
            "QVJUEAISIQodVEVYVF9PVkVSRkxPV19QT1NJVElPTl9NSURETEUQAypqCg5G",
            "bGV4VmlzaWJpbGl0eRIfChtGTEVYX1ZJU0lCSUxJVFlfVU5TUEVDSUZJRUQQ",
            "ABIbChdGTEVYX1ZJU0lCSUxJVFlfVklTSUJMRRABEhoKFkZMRVhfVklTSUJJ",
            "TElUWV9ISURERU4QAipaCgpXaGl0ZVNwYWNlEhsKF1dISVRFX1NQQUNFX1VO",
            "U1BFQ0lGSUVEEAASFgoSV0hJVEVfU1BBQ0VfTk9STUFMEAESFwoTV0hJVEVf",
            "U1BBQ0VfTk9fV1JBUBACKmkKDURpbWVuc2lvblVuaXQSHgoaRElNRU5TSU9O",
            "X1VOSVRfVU5TUEVDSUZJRUQQABIZChVESU1FTlNJT05fVU5JVF9QSVhFTFMQ",
            "ARIdChlESU1FTlNJT05fVU5JVF9QRVJDRU5UQUdFEAIqcgoPRmxleFBpY2tp",
            "bmdNb2RlEiEKHUZMRVhfUElDS0lOR19NT0RFX1VOU1BFQ0lGSUVEEAASHgoa",
            "RkxFWF9QSUNLSU5HX01PREVfUE9TSVRJT04QARIcChhGTEVYX1BJQ0tJTkdf",
            "TU9ERV9JR05PUkUQAipdCgpQbGF5ZXJTaWRlEhsKF1BMQVlFUl9TSURFX1VO",
            "U1BFQ0lGSUVEEAASGAoUUExBWUVSX1NJREVfT1ZFUkxPUkQQARIYChRQTEFZ",
            "RVJfU0lERV9DSEFNUElPThACKlkKClBsYXllck5hbWUSGwoXUExBWUVSX05B",
            "TUVfVU5TUEVDSUZJRUQQABIUChBQTEFZRVJfTkFNRV9VU0VSEAESGAoUUExB",
            "WUVSX05BTUVfT1BQT05FTlQQAiqRAgoOUm9vbUlkZW50aWZpZXISHwobUk9P",
            "TV9JREVOVElGSUVSX1VOU1BFQ0lGSUVEEAASGQoVUk9PTV9JREVOVElGSUVS",
            "X1ZBVUxUEAESGwoXUk9PTV9JREVOVElGSUVSX1NBTkNUVU0QAhIaChZST09N",
            "X0lERU5USUZJRVJfQ1JZUFRTEAMSGgoWUk9PTV9JREVOVElGSUVSX1JPT01f",
            "QRAEEhoKFlJPT01fSURFTlRJRklFUl9ST09NX0IQBRIaChZST09NX0lERU5U",
            "SUZJRVJfUk9PTV9DEAYSGgoWUk9PTV9JREVOVElGSUVSX1JPT01fRBAHEhoK",
            "FlJPT01fSURFTlRJRklFUl9ST09NX0UQCCp/Cg5UYXJnZXRpbmdBcnJvdxIf",
            "ChtUQVJHRVRJTkdfQVJST1dfVU5TUEVDSUZJRUQQABIXChNUQVJHRVRJTkdf",
            "QVJST1dfUkVEEAESGAoUVEFSR0VUSU5HX0FSUk9XX0JMVUUQAhIZChVUQVJH",
            "RVRJTkdfQVJST1dfR1JFRU4QAyp5ChJDbGllbnRSb29tTG9jYXRpb24SJAog",
            "Q0xJRU5UX1JPT01fTE9DQVRJT05fVU5TUEVDSUZJRUQQABIdChlDTElFTlRf",
            "Uk9PTV9MT0NBVElPTl9CQUNLEAESHgoaQ0xJRU5UX1JPT01fTE9DQVRJT05f",
            "RlJPTlQQAip5ChJDbGllbnRJdGVtTG9jYXRpb24SJAogQ0xJRU5UX0lURU1f",
            "TE9DQVRJT05fVU5TUEVDSUZJRUQQABIdChlDTElFTlRfSVRFTV9MT0NBVElP",
            "Tl9MRUZUEAESHgoaQ0xJRU5UX0lURU1fTE9DQVRJT05fUklHSFQQAipMCgxQ",
            "YW5lbEFkZHJlc3MSHQoZUEFORUxfQUREUkVTU19VTlNQRUNJRklFRBAAEh0K",
            "GVBBTkVMX0FERFJFU1NfREVCVUdfUEFORUwQASqyAQoWQ2FyZE5vZGVBbmNo",
            "b3JQb3NpdGlvbhIpCiVDQVJEX05PREVfQU5DSE9SX1BPU0lUSU9OX1VOU1BF",
            "Q0lGSUVEEAASJAogQ0FSRF9OT0RFX0FOQ0hPUl9QT1NJVElPTl9CT1RUT00Q",
            "ARIiCh5DQVJEX05PREVfQU5DSE9SX1BPU0lUSU9OX0xFRlQQAhIjCh9DQVJE",
            "X05PREVfQU5DSE9SX1BPU0lUSU9OX1JJR0hUEAMqdgoNUm9vbVZpc2l0VHlw",
            "ZRIfChtST09NX1ZJU0lUX1RZUEVfVU5TUEVDSUZJRUQQABIhCh1ST09NX1ZJ",
            "U0lUX1RZUEVfSU5JVElBVEVfUkFJRBABEiEKHVJPT01fVklTSVRfVFlQRV9M",
            "RVZFTF9VUF9ST09NEAIqZwoVQ2FyZENyZWF0aW9uQW5pbWF0aW9uEicKI0NB",
            "UkRfQ1JFQVRJT05fQU5JTUFUSU9OX1VOU1BFQ0lGSUVEEAASJQohQ0FSRF9D",
            "UkVBVElPTl9BTklNQVRJT05fRFJBV19DQVJEEAEqcQoKTXVzaWNTdGF0ZRIb",
            "ChdNVVNJQ19TVEFURV9VTlNQRUNJRklFRBAAEhYKEk1VU0lDX1NUQVRFX1NJ",
            "TEVOVBABEhgKFE1VU0lDX1NUQVRFX0dBTUVQTEFZEAISFAoQTVVTSUNfU1RB",
            "VEVfUkFJRBADKqkBCg9HYW1lTWVzc2FnZVR5cGUSIQodR0FNRV9NRVNTQUdF",
            "X1RZUEVfVU5TUEVDSUZJRUQQABIaChZHQU1FX01FU1NBR0VfVFlQRV9EQVdO",
            "EAESGgoWR0FNRV9NRVNTQUdFX1RZUEVfRFVTSxACEh0KGUdBTUVfTUVTU0FH",
            "RV9UWVBFX1ZJQ1RPUlkQAxIcChhHQU1FX01FU1NBR0VfVFlQRV9ERUZFQVQQ",
            "BCpqCg1TY2VuZUxvYWRNb2RlEh8KG1NDRU5FX0xPQURfTU9ERV9VTlNQRUNJ",
            "RklFRBAAEhoKFlNDRU5FX0xPQURfTU9ERV9TSU5HTEUQARIcChhTQ0VORV9M",
            "T0FEX01PREVfQURESVRJVkUQAjKMAQoJU3BlbGxkYXduEj4KB0Nvbm5lY3QS",
            "GS5zcGVsbGRhd24uQ29ubmVjdFJlcXVlc3QaFi5zcGVsbGRhd24uQ29tbWFu",
            "ZExpc3QwARI/Cg1QZXJmb3JtQWN0aW9uEhYuc3BlbGxkYXduLkdhbWVSZXF1",
            "ZXN0GhYuc3BlbGxkYXduLkNvbW1hbmRMaXN0QhOqAhBTcGVsbGRhd24uUHJv",
            "dG9zYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Spelldawn.Protos.FlexAlign), typeof(global::Spelldawn.Protos.FlexDisplayStyle), typeof(global::Spelldawn.Protos.FlexDirection), typeof(global::Spelldawn.Protos.FlexWrap), typeof(global::Spelldawn.Protos.FlexJustify), typeof(global::Spelldawn.Protos.FlexOverflow), typeof(global::Spelldawn.Protos.FlexPosition), typeof(global::Spelldawn.Protos.TextOverflow), typeof(global::Spelldawn.Protos.EasingMode), typeof(global::Spelldawn.Protos.ImageScaleMode), typeof(global::Spelldawn.Protos.FontStyle), typeof(global::Spelldawn.Protos.OverflowClipBox), typeof(global::Spelldawn.Protos.TextAlign), typeof(global::Spelldawn.Protos.TextOverflowPosition), typeof(global::Spelldawn.Protos.FlexVisibility), typeof(global::Spelldawn.Protos.WhiteSpace), typeof(global::Spelldawn.Protos.DimensionUnit), typeof(global::Spelldawn.Protos.FlexPickingMode), typeof(global::Spelldawn.Protos.PlayerSide), typeof(global::Spelldawn.Protos.PlayerName), typeof(global::Spelldawn.Protos.RoomIdentifier), typeof(global::Spelldawn.Protos.TargetingArrow), typeof(global::Spelldawn.Protos.ClientRoomLocation), typeof(global::Spelldawn.Protos.ClientItemLocation), typeof(global::Spelldawn.Protos.PanelAddress), typeof(global::Spelldawn.Protos.CardNodeAnchorPosition), typeof(global::Spelldawn.Protos.RoomVisitType), typeof(global::Spelldawn.Protos.CardCreationAnimation), typeof(global::Spelldawn.Protos.MusicState), typeof(global::Spelldawn.Protos.GameMessageType), typeof(global::Spelldawn.Protos.SceneLoadMode), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.FlexColor), global::Spelldawn.Protos.FlexColor.Parser, new[]{ "Red", "Green", "Blue", "Alpha" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.SpriteAddress), global::Spelldawn.Protos.SpriteAddress.Parser, new[]{ "Address" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.FontAddress), global::Spelldawn.Protos.FontAddress.Parser, new[]{ "Address" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ProjectileAddress), global::Spelldawn.Protos.ProjectileAddress.Parser, new[]{ "Address" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.EffectAddress), global::Spelldawn.Protos.EffectAddress.Parser, new[]{ "Address" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.AudioClipAddress), global::Spelldawn.Protos.AudioClipAddress.Parser, new[]{ "Address" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.FlexVector2), global::Spelldawn.Protos.FlexVector2.Parser, new[]{ "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.FlexVector3), global::Spelldawn.Protos.FlexVector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.Dimension), global::Spelldawn.Protos.Dimension.Parser, new[]{ "Unit", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.DimensionGroup), global::Spelldawn.Protos.DimensionGroup.Parser, new[]{ "Top", "Right", "Bottom", "Left" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.BorderWidth), global::Spelldawn.Protos.BorderWidth.Parser, new[]{ "Top", "Right", "Bottom", "Left" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.BorderColor), global::Spelldawn.Protos.BorderColor.Parser, new[]{ "Top", "Right", "Bottom", "Left" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.BorderRadius), global::Spelldawn.Protos.BorderRadius.Parser, new[]{ "TopLeft", "TopRight", "BottomRight", "BottomLeft" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.FlexRotate), global::Spelldawn.Protos.FlexRotate.Parser, new[]{ "Degrees" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.FlexTranslate), global::Spelldawn.Protos.FlexTranslate.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.FlexScale), global::Spelldawn.Protos.FlexScale.Parser, new[]{ "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.TextShadow), global::Spelldawn.Protos.TextShadow.Parser, new[]{ "Offset", "BlurRadius", "Color" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.TimeValue), global::Spelldawn.Protos.TimeValue.Parser, new[]{ "Milliseconds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ImageSlice), global::Spelldawn.Protos.ImageSlice.Parser, new[]{ "Top", "Right", "Bottom", "Left" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.FlexStyle), global::Spelldawn.Protos.FlexStyle.Parser, new[]{ "AlignContent", "AlignItems", "AlignSelf", "BackgroundColor", "BackgroundImage", "BorderColor", "BorderRadius", "BorderWidth", "Inset", "Color", "Display", "FlexBasis", "FlexDirection", "FlexGrow", "FlexShrink", "Wrap", "FontSize", "Height", "JustifyContent", "LetterSpacing", "Margin", "MaxHeight", "MaxWidth", "MinHeight", "MinWidth", "Opacity", "Overflow", "Padding", "Position", "Rotate", "Scale", "TextOverflow", "TextShadow", "TransformOrigin", "TransitionDelays", "TransitionDurations", "TransitionProperties", "TransitionEasingModes", "Translate", "BackgroundImageTintColor", "BackgroundImageScaleMode", "Font", "FontStyle", "OverflowClipBox", "ParagraphSpacing", "ImageSlice", "TextAlign", "TextOutlineColor", "TextOutlineWidth", "TextOverflowPosition", "Visibility", "WhiteSpace", "Width", "WordSpacing", "BackgroundImageScaleMultiplier", "FixedBackgroundImageAspectRatio", "PickingMode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.Flexbox), global::Spelldawn.Protos.Flexbox.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.Text), global::Spelldawn.Protos.Text.Parser, new[]{ "Label" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.EventHandlers), global::Spelldawn.Protos.EventHandlers.Parser, new[]{ "OnClick" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.NodeType), global::Spelldawn.Protos.NodeType.Parser, new[]{ "Text" }, new[]{ "NodeType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.Node), global::Spelldawn.Protos.Node.Parser, new[]{ "Id", "Name", "NodeType", "Children", "EventHandlers", "Style", "HoverStyle", "PressedStyle" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.GameIdentifier), global::Spelldawn.Protos.GameIdentifier.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.CardIdentifier), global::Spelldawn.Protos.CardIdentifier.Parser, new[]{ "Side", "Index" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.GameObjectIdentifier), global::Spelldawn.Protos.GameObjectIdentifier.Parser, new[]{ "CardId", "Identity", "Deck", "DiscardPile" }, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.CardIcon), global::Spelldawn.Protos.CardIcon.Parser, new[]{ "Background", "Text", "BackgroundScale" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.CardIcons), global::Spelldawn.Protos.CardIcons.Parser, new[]{ "TopLeftIcon", "TopRightIcon", "BottomRightIcon", "BottomLeftIcon", "ArenaIcon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.CardTitle), global::Spelldawn.Protos.CardTitle.Parser, new[]{ "Text" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.RulesText), global::Spelldawn.Protos.RulesText.Parser, new[]{ "Text" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.PickRoom), global::Spelldawn.Protos.PickRoom.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.CardTargeting), global::Spelldawn.Protos.CardTargeting.Parser, new[]{ "PickRoom" }, new[]{ "Targeting" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionOffscreen), global::Spelldawn.Protos.ObjectPositionOffscreen.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionRoom), global::Spelldawn.Protos.ObjectPositionRoom.Parser, new[]{ "RoomId", "RoomLocation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionItem), global::Spelldawn.Protos.ObjectPositionItem.Parser, new[]{ "ItemLocation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionStaging), global::Spelldawn.Protos.ObjectPositionStaging.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionHand), global::Spelldawn.Protos.ObjectPositionHand.Parser, new[]{ "Owner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionDeck), global::Spelldawn.Protos.ObjectPositionDeck.Parser, new[]{ "Owner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionDeckContainer), global::Spelldawn.Protos.ObjectPositionDeckContainer.Parser, new[]{ "Owner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionDiscardPile), global::Spelldawn.Protos.ObjectPositionDiscardPile.Parser, new[]{ "Owner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionDiscardPileContainer), global::Spelldawn.Protos.ObjectPositionDiscardPileContainer.Parser, new[]{ "Owner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionScoreAnimation), global::Spelldawn.Protos.ObjectPositionScoreAnimation.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionRaid), global::Spelldawn.Protos.ObjectPositionRaid.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionBrowser), global::Spelldawn.Protos.ObjectPositionBrowser.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionIdentity), global::Spelldawn.Protos.ObjectPositionIdentity.Parser, new[]{ "Owner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionIdentityContainer), global::Spelldawn.Protos.ObjectPositionIdentityContainer.Parser, new[]{ "Owner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionRewardChest), global::Spelldawn.Protos.ObjectPositionRewardChest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPosition), global::Spelldawn.Protos.ObjectPosition.Parser, new[]{ "SortingKey", "Offscreen", "Room", "Item", "Staging", "Hand", "Deck", "DeckContainer", "DiscardPile", "DiscardPileContainer", "ScoreAnimation", "Raid", "Browser", "Identity", "IdentityContainer" }, new[]{ "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.RevealedCardView), global::Spelldawn.Protos.RevealedCardView.Parser, new[]{ "CardFrame", "TitleBackground", "Jewel", "Image", "Title", "RulesText", "RevealedInArena", "Targeting", "OnReleasePosition", "CanPlay", "SupplementalInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.CardView), global::Spelldawn.Protos.CardView.Parser, new[]{ "CardId", "CardIcons", "ArenaFrame", "OwningPlayer", "RevealedCard" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.HandView), global::Spelldawn.Protos.HandView.Parser, new[]{ "Cards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.DiscardPileView), global::Spelldawn.Protos.DiscardPileView.Parser, new[]{ "Cards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.PlayerInfo), global::Spelldawn.Protos.PlayerInfo.Parser, new[]{ "Name", "Portrait", "PortraitFrame", "CardBack" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ManaView), global::Spelldawn.Protos.ManaView.Parser, new[]{ "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ScoreView), global::Spelldawn.Protos.ScoreView.Parser, new[]{ "Score" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.RoomView), global::Spelldawn.Protos.RoomView.Parser, new[]{ "RoomId", "BackCards", "FrontCards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ActionTrackerView), global::Spelldawn.Protos.ActionTrackerView.Parser, new[]{ "AvailableActionCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.DeckView), global::Spelldawn.Protos.DeckView.Parser, new[]{ "TopCards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.PlayerView), global::Spelldawn.Protos.PlayerView.Parser, new[]{ "Side", "PlayerInfo", "Score", "Mana", "ActionTracker" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.GameView), global::Spelldawn.Protos.GameView.Parser, new[]{ "GameId", "User", "Opponent", "CurrentPriority", "RaidActive" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.StandardAction), global::Spelldawn.Protos.StandardAction.Parser, new[]{ "Payload", "Update", "DebugPayload" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.GainManaAction), global::Spelldawn.Protos.GainManaAction.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.DrawCardAction), global::Spelldawn.Protos.DrawCardAction.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.LevelUpRoomAction), global::Spelldawn.Protos.LevelUpRoomAction.Parser, new[]{ "RoomId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.CardTarget), global::Spelldawn.Protos.CardTarget.Parser, new[]{ "RoomId" }, new[]{ "CardTarget" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.PlayCardAction), global::Spelldawn.Protos.PlayCardAction.Parser, new[]{ "CardId", "Target" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.InitiateRaidAction), global::Spelldawn.Protos.InitiateRaidAction.Parser, new[]{ "RoomId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.TogglePanelAction), global::Spelldawn.Protos.TogglePanelAction.Parser, new[]{ "PanelAddress", "Open" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.GameAction), global::Spelldawn.Protos.GameAction.Parser, new[]{ "StandardAction", "TogglePanel", "GainMana", "DrawCard", "PlayCard", "LevelUpRoom", "InitiateRaid" }, new[]{ "Action" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.GameRequest), global::Spelldawn.Protos.GameRequest.Parser, new[]{ "Action", "GameId", "UserId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.DebugLogCommand), global::Spelldawn.Protos.DebugLogCommand.Parser, new[]{ "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.RunInParallelCommand), global::Spelldawn.Protos.RunInParallelCommand.Parser, new[]{ "Commands" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.DelayCommand), global::Spelldawn.Protos.DelayCommand.Parser, new[]{ "Duration" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.InterfacePanel), global::Spelldawn.Protos.InterfacePanel.Parser, new[]{ "Address", "Node" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.InterfaceMainControls), global::Spelldawn.Protos.InterfaceMainControls.Parser, new[]{ "Node" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.CardAnchorNode), global::Spelldawn.Protos.CardAnchorNode.Parser, new[]{ "CardId", "Node", "AnchorPosition" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.RenderInterfaceCommand), global::Spelldawn.Protos.RenderInterfaceCommand.Parser, new[]{ "Panels", "MainControls", "CardAnchorNodes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.UpdateGameViewCommand), global::Spelldawn.Protos.UpdateGameViewCommand.Parser, new[]{ "Game" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.VisitRoomCommand), global::Spelldawn.Protos.VisitRoomCommand.Parser, new[]{ "Initiator", "RoomId", "VisitType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.CreateOrUpdateCardCommand), global::Spelldawn.Protos.CreateOrUpdateCardCommand.Parser, new[]{ "Card", "CreatePosition", "CreateAnimation", "DisableFlipAnimation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.DestroyCardCommand), global::Spelldawn.Protos.DestroyCardCommand.Parser, new[]{ "CardId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.MoveGameObjectsCommand), global::Spelldawn.Protos.MoveGameObjectsCommand.Parser, new[]{ "Ids", "Position", "DisableAnimation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.MoveGameObjectsAtPositionCommand), global::Spelldawn.Protos.MoveGameObjectsAtPositionCommand.Parser, new[]{ "SourcePosition", "TargetPosition", "DisableAnimation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.PlaySoundCommand), global::Spelldawn.Protos.PlaySoundCommand.Parser, new[]{ "Sound" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.SetMusicCommand), global::Spelldawn.Protos.SetMusicCommand.Parser, new[]{ "MusicState" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.FireProjectileCommand), global::Spelldawn.Protos.FireProjectileCommand.Parser, new[]{ "SourceId", "TargetId", "Projectile", "TravelDuration", "FireSound", "ImpactSound", "AdditionalHit", "AdditionalHitDelay", "WaitDuration", "HideOnHit", "JumpToPosition" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.PlayEffectPosition), global::Spelldawn.Protos.PlayEffectPosition.Parser, new[]{ "GameObject" }, new[]{ "EffectPosition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.PlayEffectCommand), global::Spelldawn.Protos.PlayEffectCommand.Parser, new[]{ "Effect", "Position", "Scale", "Duration", "Sound" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.DisplayGameMessageCommand), global::Spelldawn.Protos.DisplayGameMessageCommand.Parser, new[]{ "MessageType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.SetGameObjectsEnabledCommand), global::Spelldawn.Protos.SetGameObjectsEnabledCommand.Parser, new[]{ "GameObjectsEnabled" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.DisplayRewardsCommand), global::Spelldawn.Protos.DisplayRewardsCommand.Parser, new[]{ "Rewards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.LoadSceneCommand), global::Spelldawn.Protos.LoadSceneCommand.Parser, new[]{ "SceneName", "Mode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.GameCommand), global::Spelldawn.Protos.GameCommand.Parser, new[]{ "DebugLog", "RunInParallel", "Delay", "RenderInterface", "UpdateGameView", "VisitRoom", "CreateOrUpdateCard", "DestroyCard", "MoveGameObjects", "MoveObjectsAtPosition", "PlaySound", "SetMusic", "FireProjectile", "PlayEffect", "DisplayGameMessage", "SetGameObjectsEnabled", "DisplayRewards", "LoadScene" }, new[]{ "Command" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.CommandList), global::Spelldawn.Protos.CommandList.Parser, new[]{ "Commands" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ConnectRequest), global::Spelldawn.Protos.ConnectRequest.Parser, new[]{ "GameId", "UserId", "TestMode" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum FlexAlign {
    [pbr::OriginalName("FLEX_ALIGN_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("FLEX_ALIGN_AUTO")] Auto = 1,
    [pbr::OriginalName("FLEX_ALIGN_FLEX_START")] FlexStart = 2,
    [pbr::OriginalName("FLEX_ALIGN_CENTER")] Center = 3,
    [pbr::OriginalName("FLEX_ALIGN_FLEX_END")] FlexEnd = 4,
    [pbr::OriginalName("FLEX_ALIGN_STRETCH")] Stretch = 5,
  }

  public enum FlexDisplayStyle {
    [pbr::OriginalName("FLEX_DISPLAY_STYLE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("FLEX_DISPLAY_STYLE_FLEX")] Flex = 1,
    [pbr::OriginalName("FLEX_DISPLAY_STYLE_NONE")] None = 2,
  }

  public enum FlexDirection {
    [pbr::OriginalName("FLEX_DIRECTION_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("FLEX_DIRECTION_COLUMN")] Column = 1,
    [pbr::OriginalName("FLEX_DIRECTION_COLUMN_REVERSE")] ColumnReverse = 2,
    [pbr::OriginalName("FLEX_DIRECTION_ROW")] Row = 3,
    [pbr::OriginalName("FLEX_DIRECTION_ROW_REVERSE")] RowReverse = 4,
  }

  public enum FlexWrap {
    [pbr::OriginalName("FLEX_WRAP_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("FLEX_WRAP_NO_WRAP")] NoWrap = 1,
    [pbr::OriginalName("FLEX_WRAP_WRAP")] Wrap = 2,
    [pbr::OriginalName("FLEX_WRAP_WRAP_REVERSE")] WrapReverse = 3,
  }

  public enum FlexJustify {
    [pbr::OriginalName("FLEX_JUSTIFY_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("FLEX_JUSTIFY_FLEX_START")] FlexStart = 1,
    [pbr::OriginalName("FLEX_JUSTIFY_CENTER")] Center = 2,
    [pbr::OriginalName("FLEX_JUSTIFY_FLEX_END")] FlexEnd = 3,
    [pbr::OriginalName("FLEX_JUSTIFY_SPACE_BETWEEN")] SpaceBetween = 4,
    [pbr::OriginalName("FLEX_JUSTIFY_SPACE_AROUND")] SpaceAround = 5,
  }

  public enum FlexOverflow {
    [pbr::OriginalName("FLEX_OVERFLOW_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("FLEX_OVERFLOW_VISIBLE")] Visible = 1,
    [pbr::OriginalName("FLEX_OVERFLOW_HIDDEN")] Hidden = 2,
  }

  public enum FlexPosition {
    [pbr::OriginalName("FLEX_POSITION_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("FLEX_POSITION_RELATIVE")] Relative = 1,
    [pbr::OriginalName("FLEX_POSITION_ABSOLUTE")] Absolute = 2,
  }

  public enum TextOverflow {
    [pbr::OriginalName("TEXT_OVERFLOW_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("TEXT_OVERFLOW_CLIP")] Clip = 1,
    [pbr::OriginalName("TEXT_OVERFLOW_ELLIPSIS")] Ellipsis = 2,
  }

  public enum EasingMode {
    [pbr::OriginalName("EASING_MODE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("EASING_MODE_EASE")] Ease = 1,
    [pbr::OriginalName("EASING_MODE_EASE_IN")] EaseIn = 2,
    [pbr::OriginalName("EASING_MODE_EASE_OUT")] EaseOut = 3,
    [pbr::OriginalName("EASING_MODE_EASE_IN_OUT")] EaseInOut = 4,
    [pbr::OriginalName("EASING_MODE_LINEAR")] Linear = 5,
    [pbr::OriginalName("EASING_MODE_EASE_IN_SINE")] EaseInSine = 6,
    [pbr::OriginalName("EASING_MODE_EASE_OUT_SINE")] EaseOutSine = 7,
    [pbr::OriginalName("EASING_MODE_EASE_IN_OUT_SINE")] EaseInOutSine = 8,
    [pbr::OriginalName("EASING_MODE_EASE_IN_CUBIC")] EaseInCubic = 9,
    [pbr::OriginalName("EASING_MODE_EASE_OUT_CUBIC")] EaseOutCubic = 10,
    [pbr::OriginalName("EASING_MODE_EASE_IN_OUT_CUBIC")] EaseInOutCubic = 11,
    [pbr::OriginalName("EASING_MODE_EASE_IN_CIRC")] EaseInCirc = 12,
    [pbr::OriginalName("EASING_MODE_EASE_OUT_CIRC")] EaseOutCirc = 13,
    [pbr::OriginalName("EASING_MODE_EASE_IN_OUT_CIRC")] EaseInOutCirc = 14,
    [pbr::OriginalName("EASING_MODE_EASE_IN_ELASTIC")] EaseInElastic = 15,
    [pbr::OriginalName("EASING_MODE_EASE_OUT_ELASTIC")] EaseOutElastic = 16,
    [pbr::OriginalName("EASING_MODE_EASE_IN_OUT_ELASTIC")] EaseInOutElastic = 17,
    [pbr::OriginalName("EASING_MODE_EASE_IN_BACK")] EaseInBack = 18,
    [pbr::OriginalName("EASING_MODE_EASE_OUT_BACK")] EaseOutBack = 19,
    [pbr::OriginalName("EASING_MODE_EASE_IN_OUT_BACK")] EaseInOutBack = 20,
    [pbr::OriginalName("EASING_MODE_EASE_IN_BOUNCE")] EaseInBounce = 21,
    [pbr::OriginalName("EASING_MODE_EASE_OUT_BOUNCE")] EaseOutBounce = 22,
    [pbr::OriginalName("EASING_MODE_EASE_IN_OUT_BOUNCE")] EaseInOutBounce = 23,
  }

  public enum ImageScaleMode {
    [pbr::OriginalName("IMAGE_SCALE_MODE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("IMAGE_SCALE_MODE_STRETCH_TO_FILL")] StretchToFill = 1,
    [pbr::OriginalName("IMAGE_SCALE_MODE_SCALE_AND_CROP")] ScaleAndCrop = 2,
    [pbr::OriginalName("IMAGE_SCALE_MODE_SCALE_TO_FIT")] ScaleToFit = 3,
  }

  public enum FontStyle {
    [pbr::OriginalName("FONT_STYLE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("FONT_STYLE_NORMAL")] Normal = 1,
    [pbr::OriginalName("FONT_STYLE_BOLD")] Bold = 2,
    [pbr::OriginalName("FONT_STYLE_ITALIC")] Italic = 3,
    [pbr::OriginalName("FONT_STYLE_BOLD_AND_ITALIC")] BoldAndItalic = 4,
  }

  public enum OverflowClipBox {
    [pbr::OriginalName("OVERFLOW_CLIP_BOX_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("OVERFLOW_CLIP_BOX_PADDING_BOX")] PaddingBox = 1,
    [pbr::OriginalName("OVERFLOW_CLIP_BOX_CONTENT_BOX")] ContentBox = 2,
  }

  public enum TextAlign {
    [pbr::OriginalName("TEXT_ALIGN_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("TEXT_ALIGN_UPPER_LEFT")] UpperLeft = 1,
    [pbr::OriginalName("TEXT_ALIGN_UPPER_CENTER")] UpperCenter = 2,
    [pbr::OriginalName("TEXT_ALIGN_UPPER_RIGHT")] UpperRight = 3,
    [pbr::OriginalName("TEXT_ALIGN_MIDDLE_LEFT")] MiddleLeft = 4,
    [pbr::OriginalName("TEXT_ALIGN_MIDDLE_CENTER")] MiddleCenter = 5,
    [pbr::OriginalName("TEXT_ALIGN_MIDDLE_RIGHT")] MiddleRight = 6,
    [pbr::OriginalName("TEXT_ALIGN_LOWER_LEFT")] LowerLeft = 7,
    [pbr::OriginalName("TEXT_ALIGN_LOWER_CENTER")] LowerCenter = 8,
    [pbr::OriginalName("TEXT_ALIGN_LOWER_RIGHT")] LowerRight = 9,
  }

  public enum TextOverflowPosition {
    [pbr::OriginalName("TEXT_OVERFLOW_POSITION_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("TEXT_OVERFLOW_POSITION_END")] End = 1,
    [pbr::OriginalName("TEXT_OVERFLOW_POSITION_START")] Start = 2,
    [pbr::OriginalName("TEXT_OVERFLOW_POSITION_MIDDLE")] Middle = 3,
  }

  public enum FlexVisibility {
    [pbr::OriginalName("FLEX_VISIBILITY_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("FLEX_VISIBILITY_VISIBLE")] Visible = 1,
    [pbr::OriginalName("FLEX_VISIBILITY_HIDDEN")] Hidden = 2,
  }

  public enum WhiteSpace {
    [pbr::OriginalName("WHITE_SPACE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("WHITE_SPACE_NORMAL")] Normal = 1,
    [pbr::OriginalName("WHITE_SPACE_NO_WRAP")] NoWrap = 2,
  }

  public enum DimensionUnit {
    [pbr::OriginalName("DIMENSION_UNIT_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// Measurement in Pixels.
    /// This is Unity density-independent pixels, not real physical pixels.
    /// </summary>
    [pbr::OriginalName("DIMENSION_UNIT_PIXELS")] Pixels = 1,
    /// <summary>
    /// Percentage of parent container
    /// </summary>
    [pbr::OriginalName("DIMENSION_UNIT_PERCENTAGE")] Percentage = 2,
  }

  /// <summary>
  /// Controls whether elements respond to interface events.
  /// </summary>
  public enum FlexPickingMode {
    /// <summary>
    /// Unspecified, currently identical to 'position'.
    /// </summary>
    [pbr::OriginalName("FLEX_PICKING_MODE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// Picking enabled, events will be recognized.
    /// </summary>
    [pbr::OriginalName("FLEX_PICKING_MODE_POSITION")] Position = 1,
    /// <summary>
    /// Picking disabled, events ignored.
    /// </summary>
    [pbr::OriginalName("FLEX_PICKING_MODE_IGNORE")] Ignore = 2,
  }

  public enum PlayerSide {
    [pbr::OriginalName("PLAYER_SIDE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("PLAYER_SIDE_OVERLORD")] Overlord = 1,
    [pbr::OriginalName("PLAYER_SIDE_CHAMPION")] Champion = 2,
  }

  public enum PlayerName {
    [pbr::OriginalName("PLAYER_NAME_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("PLAYER_NAME_USER")] User = 1,
    [pbr::OriginalName("PLAYER_NAME_OPPONENT")] Opponent = 2,
  }

  public enum RoomIdentifier {
    [pbr::OriginalName("ROOM_IDENTIFIER_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("ROOM_IDENTIFIER_VAULT")] Vault = 1,
    [pbr::OriginalName("ROOM_IDENTIFIER_SANCTUM")] Sanctum = 2,
    [pbr::OriginalName("ROOM_IDENTIFIER_CRYPTS")] Crypts = 3,
    [pbr::OriginalName("ROOM_IDENTIFIER_ROOM_A")] RoomA = 4,
    [pbr::OriginalName("ROOM_IDENTIFIER_ROOM_B")] RoomB = 5,
    [pbr::OriginalName("ROOM_IDENTIFIER_ROOM_C")] RoomC = 6,
    [pbr::OriginalName("ROOM_IDENTIFIER_ROOM_D")] RoomD = 7,
    [pbr::OriginalName("ROOM_IDENTIFIER_ROOM_E")] RoomE = 8,
  }

  public enum TargetingArrow {
    [pbr::OriginalName("TARGETING_ARROW_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("TARGETING_ARROW_RED")] Red = 1,
    [pbr::OriginalName("TARGETING_ARROW_BLUE")] Blue = 2,
    [pbr::OriginalName("TARGETING_ARROW_GREEN")] Green = 3,
  }

  public enum ClientRoomLocation {
    [pbr::OriginalName("CLIENT_ROOM_LOCATION_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("CLIENT_ROOM_LOCATION_BACK")] Back = 1,
    [pbr::OriginalName("CLIENT_ROOM_LOCATION_FRONT")] Front = 2,
  }

  public enum ClientItemLocation {
    [pbr::OriginalName("CLIENT_ITEM_LOCATION_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("CLIENT_ITEM_LOCATION_LEFT")] Left = 1,
    [pbr::OriginalName("CLIENT_ITEM_LOCATION_RIGHT")] Right = 2,
  }

  public enum PanelAddress {
    [pbr::OriginalName("PANEL_ADDRESS_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("PANEL_ADDRESS_DEBUG_PANEL")] DebugPanel = 1,
  }

  public enum CardNodeAnchorPosition {
    [pbr::OriginalName("CARD_NODE_ANCHOR_POSITION_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("CARD_NODE_ANCHOR_POSITION_BOTTOM")] Bottom = 1,
    [pbr::OriginalName("CARD_NODE_ANCHOR_POSITION_LEFT")] Left = 2,
    [pbr::OriginalName("CARD_NODE_ANCHOR_POSITION_RIGHT")] Right = 3,
  }

  public enum RoomVisitType {
    [pbr::OriginalName("ROOM_VISIT_TYPE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("ROOM_VISIT_TYPE_INITIATE_RAID")] InitiateRaid = 1,
    [pbr::OriginalName("ROOM_VISIT_TYPE_LEVEL_UP_ROOM")] LevelUpRoom = 2,
  }

  public enum CardCreationAnimation {
    [pbr::OriginalName("CARD_CREATION_ANIMATION_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// Animates the card moving from the deck to the staging area. 
    /// </summary>
    [pbr::OriginalName("CARD_CREATION_ANIMATION_DRAW_CARD")] DrawCard = 1,
  }

  public enum MusicState {
    [pbr::OriginalName("MUSIC_STATE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("MUSIC_STATE_SILENT")] Silent = 1,
    [pbr::OriginalName("MUSIC_STATE_GAMEPLAY")] Gameplay = 2,
    [pbr::OriginalName("MUSIC_STATE_RAID")] Raid = 3,
  }

  public enum GameMessageType {
    [pbr::OriginalName("GAME_MESSAGE_TYPE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("GAME_MESSAGE_TYPE_DAWN")] Dawn = 1,
    [pbr::OriginalName("GAME_MESSAGE_TYPE_DUSK")] Dusk = 2,
    [pbr::OriginalName("GAME_MESSAGE_TYPE_VICTORY")] Victory = 3,
    [pbr::OriginalName("GAME_MESSAGE_TYPE_DEFEAT")] Defeat = 4,
  }

  public enum SceneLoadMode {
    [pbr::OriginalName("SCENE_LOAD_MODE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// Close all currently open scenes before loading.
    /// </summary>
    [pbr::OriginalName("SCENE_LOAD_MODE_SINGLE")] Single = 1,
    /// <summary>
    /// Adds a scene to the current loaded scenes.
    /// </summary>
    [pbr::OriginalName("SCENE_LOAD_MODE_ADDITIVE")] Additive = 2,
  }

  #endregion

  #region Messages
  public sealed partial class FlexColor : pb::IMessage<FlexColor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FlexColor> _parser = new pb::MessageParser<FlexColor>(() => new FlexColor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlexColor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexColor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexColor(FlexColor other) : this() {
      red_ = other.red_;
      green_ = other.green_;
      blue_ = other.blue_;
      alpha_ = other.alpha_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexColor Clone() {
      return new FlexColor(this);
    }

    /// <summary>Field number for the "red" field.</summary>
    public const int RedFieldNumber = 1;
    private float red_;
    /// <summary>
    /// Red color component, specified in the range 0.0 to 1.0 inclusive. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Red {
      get { return red_; }
      set {
        red_ = value;
      }
    }

    /// <summary>Field number for the "green" field.</summary>
    public const int GreenFieldNumber = 2;
    private float green_;
    /// <summary>
    /// Green color component, specified in the range 0.0 to 1.0 inclusive. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Green {
      get { return green_; }
      set {
        green_ = value;
      }
    }

    /// <summary>Field number for the "blue" field.</summary>
    public const int BlueFieldNumber = 3;
    private float blue_;
    /// <summary>
    /// Blue color component, specified in the range 0.0 to 1.0 inclusive. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Blue {
      get { return blue_; }
      set {
        blue_ = value;
      }
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 4;
    private float alpha_;
    /// <summary>
    ///
    /// Alpha color component, specified in the range 0.0 (transparent) to 1.0
    /// (opaque) inclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlexColor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlexColor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Red, other.Red)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Green, other.Green)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Blue, other.Blue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Alpha, other.Alpha)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Red != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Red);
      if (Green != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Green);
      if (Blue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Blue);
      if (Alpha != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Alpha);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Red != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Red);
      }
      if (Green != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Green);
      }
      if (Blue != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Blue);
      }
      if (Alpha != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Alpha);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Red != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Red);
      }
      if (Green != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Green);
      }
      if (Blue != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Blue);
      }
      if (Alpha != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Alpha);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Red != 0F) {
        size += 1 + 4;
      }
      if (Green != 0F) {
        size += 1 + 4;
      }
      if (Blue != 0F) {
        size += 1 + 4;
      }
      if (Alpha != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlexColor other) {
      if (other == null) {
        return;
      }
      if (other.Red != 0F) {
        Red = other.Red;
      }
      if (other.Green != 0F) {
        Green = other.Green;
      }
      if (other.Blue != 0F) {
        Blue = other.Blue;
      }
      if (other.Alpha != 0F) {
        Alpha = other.Alpha;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Red = input.ReadFloat();
            break;
          }
          case 21: {
            Green = input.ReadFloat();
            break;
          }
          case 29: {
            Blue = input.ReadFloat();
            break;
          }
          case 37: {
            Alpha = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Red = input.ReadFloat();
            break;
          }
          case 21: {
            Green = input.ReadFloat();
            break;
          }
          case 29: {
            Blue = input.ReadFloat();
            break;
          }
          case 37: {
            Alpha = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SpriteAddress : pb::IMessage<SpriteAddress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpriteAddress> _parser = new pb::MessageParser<SpriteAddress>(() => new SpriteAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpriteAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpriteAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpriteAddress(SpriteAddress other) : this() {
      address_ = other.address_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpriteAddress Clone() {
      return new SpriteAddress(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpriteAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpriteAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpriteAddress other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FontAddress : pb::IMessage<FontAddress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FontAddress> _parser = new pb::MessageParser<FontAddress>(() => new FontAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FontAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontAddress(FontAddress other) : this() {
      address_ = other.address_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontAddress Clone() {
      return new FontAddress(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FontAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FontAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FontAddress other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ProjectileAddress : pb::IMessage<ProjectileAddress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProjectileAddress> _parser = new pb::MessageParser<ProjectileAddress>(() => new ProjectileAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProjectileAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectileAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectileAddress(ProjectileAddress other) : this() {
      address_ = other.address_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectileAddress Clone() {
      return new ProjectileAddress(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProjectileAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProjectileAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProjectileAddress other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EffectAddress : pb::IMessage<EffectAddress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EffectAddress> _parser = new pb::MessageParser<EffectAddress>(() => new EffectAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EffectAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectAddress(EffectAddress other) : this() {
      address_ = other.address_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectAddress Clone() {
      return new EffectAddress(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EffectAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EffectAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EffectAddress other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AudioClipAddress : pb::IMessage<AudioClipAddress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AudioClipAddress> _parser = new pb::MessageParser<AudioClipAddress>(() => new AudioClipAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AudioClipAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioClipAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioClipAddress(AudioClipAddress other) : this() {
      address_ = other.address_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioClipAddress Clone() {
      return new AudioClipAddress(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AudioClipAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AudioClipAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AudioClipAddress other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FlexVector2 : pb::IMessage<FlexVector2>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FlexVector2> _parser = new pb::MessageParser<FlexVector2>(() => new FlexVector2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlexVector2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexVector2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexVector2(FlexVector2 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexVector2 Clone() {
      return new FlexVector2(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlexVector2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlexVector2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlexVector2 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FlexVector3 : pb::IMessage<FlexVector3>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FlexVector3> _parser = new pb::MessageParser<FlexVector3>(() => new FlexVector3());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlexVector3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexVector3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexVector3(FlexVector3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexVector3 Clone() {
      return new FlexVector3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlexVector3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlexVector3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlexVector3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Dimension : pb::IMessage<Dimension>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Dimension> _parser = new pb::MessageParser<Dimension>(() => new Dimension());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Dimension> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dimension() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dimension(Dimension other) : this() {
      unit_ = other.unit_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dimension Clone() {
      return new Dimension(this);
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 1;
    private global::Spelldawn.Protos.DimensionUnit unit_ = global::Spelldawn.Protos.DimensionUnit.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.DimensionUnit Unit {
      get { return unit_; }
      set {
        unit_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private float value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Dimension);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Dimension other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Unit != other.Unit) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Unit != global::Spelldawn.Protos.DimensionUnit.Unspecified) hash ^= Unit.GetHashCode();
      if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Unit != global::Spelldawn.Protos.DimensionUnit.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Unit);
      }
      if (Value != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Unit != global::Spelldawn.Protos.DimensionUnit.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Unit);
      }
      if (Value != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Unit != global::Spelldawn.Protos.DimensionUnit.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Unit);
      }
      if (Value != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Dimension other) {
      if (other == null) {
        return;
      }
      if (other.Unit != global::Spelldawn.Protos.DimensionUnit.Unspecified) {
        Unit = other.Unit;
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Unit = (global::Spelldawn.Protos.DimensionUnit) input.ReadEnum();
            break;
          }
          case 21: {
            Value = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Unit = (global::Spelldawn.Protos.DimensionUnit) input.ReadEnum();
            break;
          }
          case 21: {
            Value = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DimensionGroup : pb::IMessage<DimensionGroup>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DimensionGroup> _parser = new pb::MessageParser<DimensionGroup>(() => new DimensionGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DimensionGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DimensionGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DimensionGroup(DimensionGroup other) : this() {
      top_ = other.top_ != null ? other.top_.Clone() : null;
      right_ = other.right_ != null ? other.right_.Clone() : null;
      bottom_ = other.bottom_ != null ? other.bottom_.Clone() : null;
      left_ = other.left_ != null ? other.left_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DimensionGroup Clone() {
      return new DimensionGroup(this);
    }

    /// <summary>Field number for the "top" field.</summary>
    public const int TopFieldNumber = 1;
    private global::Spelldawn.Protos.Dimension top_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension Top {
      get { return top_; }
      set {
        top_ = value;
      }
    }

    /// <summary>Field number for the "right" field.</summary>
    public const int RightFieldNumber = 2;
    private global::Spelldawn.Protos.Dimension right_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension Right {
      get { return right_; }
      set {
        right_ = value;
      }
    }

    /// <summary>Field number for the "bottom" field.</summary>
    public const int BottomFieldNumber = 3;
    private global::Spelldawn.Protos.Dimension bottom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension Bottom {
      get { return bottom_; }
      set {
        bottom_ = value;
      }
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 4;
    private global::Spelldawn.Protos.Dimension left_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DimensionGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DimensionGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Top, other.Top)) return false;
      if (!object.Equals(Right, other.Right)) return false;
      if (!object.Equals(Bottom, other.Bottom)) return false;
      if (!object.Equals(Left, other.Left)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (top_ != null) hash ^= Top.GetHashCode();
      if (right_ != null) hash ^= Right.GetHashCode();
      if (bottom_ != null) hash ^= Bottom.GetHashCode();
      if (left_ != null) hash ^= Left.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (top_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Top);
      }
      if (right_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Right);
      }
      if (bottom_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Bottom);
      }
      if (left_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Left);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (top_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Top);
      }
      if (right_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Right);
      }
      if (bottom_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Bottom);
      }
      if (left_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Left);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (top_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Top);
      }
      if (right_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Right);
      }
      if (bottom_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bottom);
      }
      if (left_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Left);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DimensionGroup other) {
      if (other == null) {
        return;
      }
      if (other.top_ != null) {
        if (top_ == null) {
          Top = new global::Spelldawn.Protos.Dimension();
        }
        Top.MergeFrom(other.Top);
      }
      if (other.right_ != null) {
        if (right_ == null) {
          Right = new global::Spelldawn.Protos.Dimension();
        }
        Right.MergeFrom(other.Right);
      }
      if (other.bottom_ != null) {
        if (bottom_ == null) {
          Bottom = new global::Spelldawn.Protos.Dimension();
        }
        Bottom.MergeFrom(other.Bottom);
      }
      if (other.left_ != null) {
        if (left_ == null) {
          Left = new global::Spelldawn.Protos.Dimension();
        }
        Left.MergeFrom(other.Left);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (top_ == null) {
              Top = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Top);
            break;
          }
          case 18: {
            if (right_ == null) {
              Right = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Right);
            break;
          }
          case 26: {
            if (bottom_ == null) {
              Bottom = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Bottom);
            break;
          }
          case 34: {
            if (left_ == null) {
              Left = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Left);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (top_ == null) {
              Top = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Top);
            break;
          }
          case 18: {
            if (right_ == null) {
              Right = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Right);
            break;
          }
          case 26: {
            if (bottom_ == null) {
              Bottom = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Bottom);
            break;
          }
          case 34: {
            if (left_ == null) {
              Left = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Left);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BorderWidth : pb::IMessage<BorderWidth>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BorderWidth> _parser = new pb::MessageParser<BorderWidth>(() => new BorderWidth());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BorderWidth> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderWidth() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderWidth(BorderWidth other) : this() {
      top_ = other.top_;
      right_ = other.right_;
      bottom_ = other.bottom_;
      left_ = other.left_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderWidth Clone() {
      return new BorderWidth(this);
    }

    /// <summary>Field number for the "top" field.</summary>
    public const int TopFieldNumber = 1;
    private float top_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Top {
      get { return top_; }
      set {
        top_ = value;
      }
    }

    /// <summary>Field number for the "right" field.</summary>
    public const int RightFieldNumber = 2;
    private float right_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Right {
      get { return right_; }
      set {
        right_ = value;
      }
    }

    /// <summary>Field number for the "bottom" field.</summary>
    public const int BottomFieldNumber = 3;
    private float bottom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Bottom {
      get { return bottom_; }
      set {
        bottom_ = value;
      }
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 4;
    private float left_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BorderWidth);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BorderWidth other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Top, other.Top)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Right, other.Right)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Bottom, other.Bottom)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Left, other.Left)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Top != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Top);
      if (Right != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Right);
      if (Bottom != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Bottom);
      if (Left != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Left);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Top != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Top);
      }
      if (Right != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Right);
      }
      if (Bottom != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Bottom);
      }
      if (Left != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Left);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Top != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Top);
      }
      if (Right != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Right);
      }
      if (Bottom != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Bottom);
      }
      if (Left != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Left);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Top != 0F) {
        size += 1 + 4;
      }
      if (Right != 0F) {
        size += 1 + 4;
      }
      if (Bottom != 0F) {
        size += 1 + 4;
      }
      if (Left != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BorderWidth other) {
      if (other == null) {
        return;
      }
      if (other.Top != 0F) {
        Top = other.Top;
      }
      if (other.Right != 0F) {
        Right = other.Right;
      }
      if (other.Bottom != 0F) {
        Bottom = other.Bottom;
      }
      if (other.Left != 0F) {
        Left = other.Left;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Top = input.ReadFloat();
            break;
          }
          case 21: {
            Right = input.ReadFloat();
            break;
          }
          case 29: {
            Bottom = input.ReadFloat();
            break;
          }
          case 37: {
            Left = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Top = input.ReadFloat();
            break;
          }
          case 21: {
            Right = input.ReadFloat();
            break;
          }
          case 29: {
            Bottom = input.ReadFloat();
            break;
          }
          case 37: {
            Left = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BorderColor : pb::IMessage<BorderColor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BorderColor> _parser = new pb::MessageParser<BorderColor>(() => new BorderColor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BorderColor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderColor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderColor(BorderColor other) : this() {
      top_ = other.top_ != null ? other.top_.Clone() : null;
      right_ = other.right_ != null ? other.right_.Clone() : null;
      bottom_ = other.bottom_ != null ? other.bottom_.Clone() : null;
      left_ = other.left_ != null ? other.left_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderColor Clone() {
      return new BorderColor(this);
    }

    /// <summary>Field number for the "top" field.</summary>
    public const int TopFieldNumber = 1;
    private global::Spelldawn.Protos.FlexColor top_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexColor Top {
      get { return top_; }
      set {
        top_ = value;
      }
    }

    /// <summary>Field number for the "right" field.</summary>
    public const int RightFieldNumber = 2;
    private global::Spelldawn.Protos.FlexColor right_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexColor Right {
      get { return right_; }
      set {
        right_ = value;
      }
    }

    /// <summary>Field number for the "bottom" field.</summary>
    public const int BottomFieldNumber = 3;
    private global::Spelldawn.Protos.FlexColor bottom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexColor Bottom {
      get { return bottom_; }
      set {
        bottom_ = value;
      }
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 4;
    private global::Spelldawn.Protos.FlexColor left_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexColor Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BorderColor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BorderColor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Top, other.Top)) return false;
      if (!object.Equals(Right, other.Right)) return false;
      if (!object.Equals(Bottom, other.Bottom)) return false;
      if (!object.Equals(Left, other.Left)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (top_ != null) hash ^= Top.GetHashCode();
      if (right_ != null) hash ^= Right.GetHashCode();
      if (bottom_ != null) hash ^= Bottom.GetHashCode();
      if (left_ != null) hash ^= Left.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (top_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Top);
      }
      if (right_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Right);
      }
      if (bottom_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Bottom);
      }
      if (left_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Left);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (top_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Top);
      }
      if (right_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Right);
      }
      if (bottom_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Bottom);
      }
      if (left_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Left);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (top_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Top);
      }
      if (right_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Right);
      }
      if (bottom_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bottom);
      }
      if (left_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Left);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BorderColor other) {
      if (other == null) {
        return;
      }
      if (other.top_ != null) {
        if (top_ == null) {
          Top = new global::Spelldawn.Protos.FlexColor();
        }
        Top.MergeFrom(other.Top);
      }
      if (other.right_ != null) {
        if (right_ == null) {
          Right = new global::Spelldawn.Protos.FlexColor();
        }
        Right.MergeFrom(other.Right);
      }
      if (other.bottom_ != null) {
        if (bottom_ == null) {
          Bottom = new global::Spelldawn.Protos.FlexColor();
        }
        Bottom.MergeFrom(other.Bottom);
      }
      if (other.left_ != null) {
        if (left_ == null) {
          Left = new global::Spelldawn.Protos.FlexColor();
        }
        Left.MergeFrom(other.Left);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (top_ == null) {
              Top = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(Top);
            break;
          }
          case 18: {
            if (right_ == null) {
              Right = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(Right);
            break;
          }
          case 26: {
            if (bottom_ == null) {
              Bottom = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(Bottom);
            break;
          }
          case 34: {
            if (left_ == null) {
              Left = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(Left);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (top_ == null) {
              Top = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(Top);
            break;
          }
          case 18: {
            if (right_ == null) {
              Right = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(Right);
            break;
          }
          case 26: {
            if (bottom_ == null) {
              Bottom = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(Bottom);
            break;
          }
          case 34: {
            if (left_ == null) {
              Left = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(Left);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BorderRadius : pb::IMessage<BorderRadius>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BorderRadius> _parser = new pb::MessageParser<BorderRadius>(() => new BorderRadius());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BorderRadius> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderRadius() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderRadius(BorderRadius other) : this() {
      topLeft_ = other.topLeft_ != null ? other.topLeft_.Clone() : null;
      topRight_ = other.topRight_ != null ? other.topRight_.Clone() : null;
      bottomRight_ = other.bottomRight_ != null ? other.bottomRight_.Clone() : null;
      bottomLeft_ = other.bottomLeft_ != null ? other.bottomLeft_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderRadius Clone() {
      return new BorderRadius(this);
    }

    /// <summary>Field number for the "top_left" field.</summary>
    public const int TopLeftFieldNumber = 1;
    private global::Spelldawn.Protos.Dimension topLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension TopLeft {
      get { return topLeft_; }
      set {
        topLeft_ = value;
      }
    }

    /// <summary>Field number for the "top_right" field.</summary>
    public const int TopRightFieldNumber = 2;
    private global::Spelldawn.Protos.Dimension topRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension TopRight {
      get { return topRight_; }
      set {
        topRight_ = value;
      }
    }

    /// <summary>Field number for the "bottom_right" field.</summary>
    public const int BottomRightFieldNumber = 3;
    private global::Spelldawn.Protos.Dimension bottomRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension BottomRight {
      get { return bottomRight_; }
      set {
        bottomRight_ = value;
      }
    }

    /// <summary>Field number for the "bottom_left" field.</summary>
    public const int BottomLeftFieldNumber = 4;
    private global::Spelldawn.Protos.Dimension bottomLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension BottomLeft {
      get { return bottomLeft_; }
      set {
        bottomLeft_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BorderRadius);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BorderRadius other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TopLeft, other.TopLeft)) return false;
      if (!object.Equals(TopRight, other.TopRight)) return false;
      if (!object.Equals(BottomRight, other.BottomRight)) return false;
      if (!object.Equals(BottomLeft, other.BottomLeft)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (topLeft_ != null) hash ^= TopLeft.GetHashCode();
      if (topRight_ != null) hash ^= TopRight.GetHashCode();
      if (bottomRight_ != null) hash ^= BottomRight.GetHashCode();
      if (bottomLeft_ != null) hash ^= BottomLeft.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (topLeft_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TopLeft);
      }
      if (topRight_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TopRight);
      }
      if (bottomRight_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BottomRight);
      }
      if (bottomLeft_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BottomLeft);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (topLeft_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TopLeft);
      }
      if (topRight_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TopRight);
      }
      if (bottomRight_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BottomRight);
      }
      if (bottomLeft_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BottomLeft);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (topLeft_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TopLeft);
      }
      if (topRight_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TopRight);
      }
      if (bottomRight_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BottomRight);
      }
      if (bottomLeft_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BottomLeft);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BorderRadius other) {
      if (other == null) {
        return;
      }
      if (other.topLeft_ != null) {
        if (topLeft_ == null) {
          TopLeft = new global::Spelldawn.Protos.Dimension();
        }
        TopLeft.MergeFrom(other.TopLeft);
      }
      if (other.topRight_ != null) {
        if (topRight_ == null) {
          TopRight = new global::Spelldawn.Protos.Dimension();
        }
        TopRight.MergeFrom(other.TopRight);
      }
      if (other.bottomRight_ != null) {
        if (bottomRight_ == null) {
          BottomRight = new global::Spelldawn.Protos.Dimension();
        }
        BottomRight.MergeFrom(other.BottomRight);
      }
      if (other.bottomLeft_ != null) {
        if (bottomLeft_ == null) {
          BottomLeft = new global::Spelldawn.Protos.Dimension();
        }
        BottomLeft.MergeFrom(other.BottomLeft);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (topLeft_ == null) {
              TopLeft = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(TopLeft);
            break;
          }
          case 18: {
            if (topRight_ == null) {
              TopRight = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(TopRight);
            break;
          }
          case 26: {
            if (bottomRight_ == null) {
              BottomRight = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(BottomRight);
            break;
          }
          case 34: {
            if (bottomLeft_ == null) {
              BottomLeft = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(BottomLeft);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (topLeft_ == null) {
              TopLeft = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(TopLeft);
            break;
          }
          case 18: {
            if (topRight_ == null) {
              TopRight = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(TopRight);
            break;
          }
          case 26: {
            if (bottomRight_ == null) {
              BottomRight = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(BottomRight);
            break;
          }
          case 34: {
            if (bottomLeft_ == null) {
              BottomLeft = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(BottomLeft);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FlexRotate : pb::IMessage<FlexRotate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FlexRotate> _parser = new pb::MessageParser<FlexRotate>(() => new FlexRotate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlexRotate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexRotate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexRotate(FlexRotate other) : this() {
      degrees_ = other.degrees_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexRotate Clone() {
      return new FlexRotate(this);
    }

    /// <summary>Field number for the "degrees" field.</summary>
    public const int DegreesFieldNumber = 1;
    private float degrees_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Degrees {
      get { return degrees_; }
      set {
        degrees_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlexRotate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlexRotate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Degrees, other.Degrees)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Degrees != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Degrees);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Degrees != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Degrees);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Degrees != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Degrees);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Degrees != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlexRotate other) {
      if (other == null) {
        return;
      }
      if (other.Degrees != 0F) {
        Degrees = other.Degrees;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Degrees = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Degrees = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FlexTranslate : pb::IMessage<FlexTranslate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FlexTranslate> _parser = new pb::MessageParser<FlexTranslate>(() => new FlexTranslate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlexTranslate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexTranslate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexTranslate(FlexTranslate other) : this() {
      x_ = other.x_ != null ? other.x_.Clone() : null;
      y_ = other.y_ != null ? other.y_.Clone() : null;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexTranslate Clone() {
      return new FlexTranslate(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private global::Spelldawn.Protos.Dimension x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private global::Spelldawn.Protos.Dimension y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlexTranslate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlexTranslate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(X, other.X)) return false;
      if (!object.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (x_ != null) hash ^= X.GetHashCode();
      if (y_ != null) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (x_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(X);
      }
      if (y_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (x_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(X);
      }
      if (y_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (x_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(X);
      }
      if (y_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Y);
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlexTranslate other) {
      if (other == null) {
        return;
      }
      if (other.x_ != null) {
        if (x_ == null) {
          X = new global::Spelldawn.Protos.Dimension();
        }
        X.MergeFrom(other.X);
      }
      if (other.y_ != null) {
        if (y_ == null) {
          Y = new global::Spelldawn.Protos.Dimension();
        }
        Y.MergeFrom(other.Y);
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (x_ == null) {
              X = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(X);
            break;
          }
          case 18: {
            if (y_ == null) {
              Y = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Y);
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (x_ == null) {
              X = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(X);
            break;
          }
          case 18: {
            if (y_ == null) {
              Y = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Y);
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FlexScale : pb::IMessage<FlexScale>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FlexScale> _parser = new pb::MessageParser<FlexScale>(() => new FlexScale());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlexScale> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexScale() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexScale(FlexScale other) : this() {
      amount_ = other.amount_ != null ? other.amount_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexScale Clone() {
      return new FlexScale(this);
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 1;
    private global::Spelldawn.Protos.FlexVector3 amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexVector3 Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlexScale);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlexScale other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Amount, other.Amount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (amount_ != null) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (amount_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (amount_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (amount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlexScale other) {
      if (other == null) {
        return;
      }
      if (other.amount_ != null) {
        if (amount_ == null) {
          Amount = new global::Spelldawn.Protos.FlexVector3();
        }
        Amount.MergeFrom(other.Amount);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (amount_ == null) {
              Amount = new global::Spelldawn.Protos.FlexVector3();
            }
            input.ReadMessage(Amount);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (amount_ == null) {
              Amount = new global::Spelldawn.Protos.FlexVector3();
            }
            input.ReadMessage(Amount);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TextShadow : pb::IMessage<TextShadow>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TextShadow> _parser = new pb::MessageParser<TextShadow>(() => new TextShadow());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextShadow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextShadow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextShadow(TextShadow other) : this() {
      offset_ = other.offset_ != null ? other.offset_.Clone() : null;
      blurRadius_ = other.blurRadius_;
      color_ = other.color_ != null ? other.color_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextShadow Clone() {
      return new TextShadow(this);
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 1;
    private global::Spelldawn.Protos.FlexVector2 offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexVector2 Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "blur_radius" field.</summary>
    public const int BlurRadiusFieldNumber = 2;
    private float blurRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BlurRadius {
      get { return blurRadius_; }
      set {
        blurRadius_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 3;
    private global::Spelldawn.Protos.FlexColor color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexColor Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextShadow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextShadow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Offset, other.Offset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BlurRadius, other.BlurRadius)) return false;
      if (!object.Equals(Color, other.Color)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (offset_ != null) hash ^= Offset.GetHashCode();
      if (BlurRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BlurRadius);
      if (color_ != null) hash ^= Color.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (offset_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Offset);
      }
      if (BlurRadius != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(BlurRadius);
      }
      if (color_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Color);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (offset_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Offset);
      }
      if (BlurRadius != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(BlurRadius);
      }
      if (color_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Color);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (offset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offset);
      }
      if (BlurRadius != 0F) {
        size += 1 + 4;
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextShadow other) {
      if (other == null) {
        return;
      }
      if (other.offset_ != null) {
        if (offset_ == null) {
          Offset = new global::Spelldawn.Protos.FlexVector2();
        }
        Offset.MergeFrom(other.Offset);
      }
      if (other.BlurRadius != 0F) {
        BlurRadius = other.BlurRadius;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          Color = new global::Spelldawn.Protos.FlexColor();
        }
        Color.MergeFrom(other.Color);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (offset_ == null) {
              Offset = new global::Spelldawn.Protos.FlexVector2();
            }
            input.ReadMessage(Offset);
            break;
          }
          case 21: {
            BlurRadius = input.ReadFloat();
            break;
          }
          case 26: {
            if (color_ == null) {
              Color = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(Color);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (offset_ == null) {
              Offset = new global::Spelldawn.Protos.FlexVector2();
            }
            input.ReadMessage(Offset);
            break;
          }
          case 21: {
            BlurRadius = input.ReadFloat();
            break;
          }
          case 26: {
            if (color_ == null) {
              Color = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(Color);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TimeValue : pb::IMessage<TimeValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimeValue> _parser = new pb::MessageParser<TimeValue>(() => new TimeValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeValue(TimeValue other) : this() {
      milliseconds_ = other.milliseconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeValue Clone() {
      return new TimeValue(this);
    }

    /// <summary>Field number for the "milliseconds" field.</summary>
    public const int MillisecondsFieldNumber = 1;
    private uint milliseconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Milliseconds {
      get { return milliseconds_; }
      set {
        milliseconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Milliseconds != other.Milliseconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Milliseconds != 0) hash ^= Milliseconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Milliseconds != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Milliseconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Milliseconds != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Milliseconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Milliseconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Milliseconds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeValue other) {
      if (other == null) {
        return;
      }
      if (other.Milliseconds != 0) {
        Milliseconds = other.Milliseconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Milliseconds = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Milliseconds = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ImageSlice : pb::IMessage<ImageSlice>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ImageSlice> _parser = new pb::MessageParser<ImageSlice>(() => new ImageSlice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageSlice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageSlice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageSlice(ImageSlice other) : this() {
      top_ = other.top_;
      right_ = other.right_;
      bottom_ = other.bottom_;
      left_ = other.left_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageSlice Clone() {
      return new ImageSlice(this);
    }

    /// <summary>Field number for the "top" field.</summary>
    public const int TopFieldNumber = 1;
    private uint top_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Top {
      get { return top_; }
      set {
        top_ = value;
      }
    }

    /// <summary>Field number for the "right" field.</summary>
    public const int RightFieldNumber = 2;
    private uint right_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Right {
      get { return right_; }
      set {
        right_ = value;
      }
    }

    /// <summary>Field number for the "bottom" field.</summary>
    public const int BottomFieldNumber = 3;
    private uint bottom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Bottom {
      get { return bottom_; }
      set {
        bottom_ = value;
      }
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 4;
    private uint left_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageSlice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageSlice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Top != other.Top) return false;
      if (Right != other.Right) return false;
      if (Bottom != other.Bottom) return false;
      if (Left != other.Left) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Top != 0) hash ^= Top.GetHashCode();
      if (Right != 0) hash ^= Right.GetHashCode();
      if (Bottom != 0) hash ^= Bottom.GetHashCode();
      if (Left != 0) hash ^= Left.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Top != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Top);
      }
      if (Right != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Right);
      }
      if (Bottom != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Bottom);
      }
      if (Left != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Left);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Top != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Top);
      }
      if (Right != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Right);
      }
      if (Bottom != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Bottom);
      }
      if (Left != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Left);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Top != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Top);
      }
      if (Right != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Right);
      }
      if (Bottom != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Bottom);
      }
      if (Left != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Left);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageSlice other) {
      if (other == null) {
        return;
      }
      if (other.Top != 0) {
        Top = other.Top;
      }
      if (other.Right != 0) {
        Right = other.Right;
      }
      if (other.Bottom != 0) {
        Bottom = other.Bottom;
      }
      if (other.Left != 0) {
        Left = other.Left;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Top = input.ReadUInt32();
            break;
          }
          case 16: {
            Right = input.ReadUInt32();
            break;
          }
          case 24: {
            Bottom = input.ReadUInt32();
            break;
          }
          case 32: {
            Left = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Top = input.ReadUInt32();
            break;
          }
          case 16: {
            Right = input.ReadUInt32();
            break;
          }
          case 24: {
            Bottom = input.ReadUInt32();
            break;
          }
          case 32: {
            Left = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FlexStyle : pb::IMessage<FlexStyle>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FlexStyle> _parser = new pb::MessageParser<FlexStyle>(() => new FlexStyle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlexStyle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexStyle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexStyle(FlexStyle other) : this() {
      alignContent_ = other.alignContent_;
      alignItems_ = other.alignItems_;
      alignSelf_ = other.alignSelf_;
      backgroundColor_ = other.backgroundColor_ != null ? other.backgroundColor_.Clone() : null;
      backgroundImage_ = other.backgroundImage_ != null ? other.backgroundImage_.Clone() : null;
      borderColor_ = other.borderColor_ != null ? other.borderColor_.Clone() : null;
      borderRadius_ = other.borderRadius_ != null ? other.borderRadius_.Clone() : null;
      borderWidth_ = other.borderWidth_ != null ? other.borderWidth_.Clone() : null;
      inset_ = other.inset_ != null ? other.inset_.Clone() : null;
      color_ = other.color_ != null ? other.color_.Clone() : null;
      display_ = other.display_;
      flexBasis_ = other.flexBasis_ != null ? other.flexBasis_.Clone() : null;
      flexDirection_ = other.flexDirection_;
      FlexGrow = other.FlexGrow;
      FlexShrink = other.FlexShrink;
      wrap_ = other.wrap_;
      fontSize_ = other.fontSize_ != null ? other.fontSize_.Clone() : null;
      height_ = other.height_ != null ? other.height_.Clone() : null;
      justifyContent_ = other.justifyContent_;
      letterSpacing_ = other.letterSpacing_ != null ? other.letterSpacing_.Clone() : null;
      margin_ = other.margin_ != null ? other.margin_.Clone() : null;
      maxHeight_ = other.maxHeight_ != null ? other.maxHeight_.Clone() : null;
      maxWidth_ = other.maxWidth_ != null ? other.maxWidth_.Clone() : null;
      minHeight_ = other.minHeight_ != null ? other.minHeight_.Clone() : null;
      minWidth_ = other.minWidth_ != null ? other.minWidth_.Clone() : null;
      Opacity = other.Opacity;
      overflow_ = other.overflow_;
      padding_ = other.padding_ != null ? other.padding_.Clone() : null;
      position_ = other.position_;
      rotate_ = other.rotate_ != null ? other.rotate_.Clone() : null;
      scale_ = other.scale_ != null ? other.scale_.Clone() : null;
      textOverflow_ = other.textOverflow_;
      textShadow_ = other.textShadow_ != null ? other.textShadow_.Clone() : null;
      transformOrigin_ = other.transformOrigin_ != null ? other.transformOrigin_.Clone() : null;
      transitionDelays_ = other.transitionDelays_.Clone();
      transitionDurations_ = other.transitionDurations_.Clone();
      transitionProperties_ = other.transitionProperties_.Clone();
      transitionEasingModes_ = other.transitionEasingModes_.Clone();
      translate_ = other.translate_ != null ? other.translate_.Clone() : null;
      backgroundImageTintColor_ = other.backgroundImageTintColor_ != null ? other.backgroundImageTintColor_.Clone() : null;
      backgroundImageScaleMode_ = other.backgroundImageScaleMode_;
      font_ = other.font_ != null ? other.font_.Clone() : null;
      fontStyle_ = other.fontStyle_;
      overflowClipBox_ = other.overflowClipBox_;
      paragraphSpacing_ = other.paragraphSpacing_ != null ? other.paragraphSpacing_.Clone() : null;
      imageSlice_ = other.imageSlice_ != null ? other.imageSlice_.Clone() : null;
      textAlign_ = other.textAlign_;
      textOutlineColor_ = other.textOutlineColor_ != null ? other.textOutlineColor_.Clone() : null;
      TextOutlineWidth = other.TextOutlineWidth;
      textOverflowPosition_ = other.textOverflowPosition_;
      visibility_ = other.visibility_;
      whiteSpace_ = other.whiteSpace_;
      width_ = other.width_ != null ? other.width_.Clone() : null;
      wordSpacing_ = other.wordSpacing_ != null ? other.wordSpacing_.Clone() : null;
      BackgroundImageScaleMultiplier = other.BackgroundImageScaleMultiplier;
      fixedBackgroundImageAspectRatio_ = other.fixedBackgroundImageAspectRatio_;
      pickingMode_ = other.pickingMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexStyle Clone() {
      return new FlexStyle(this);
    }

    /// <summary>Field number for the "align_content" field.</summary>
    public const int AlignContentFieldNumber = 1;
    private global::Spelldawn.Protos.FlexAlign alignContent_ = global::Spelldawn.Protos.FlexAlign.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexAlign AlignContent {
      get { return alignContent_; }
      set {
        alignContent_ = value;
      }
    }

    /// <summary>Field number for the "align_items" field.</summary>
    public const int AlignItemsFieldNumber = 2;
    private global::Spelldawn.Protos.FlexAlign alignItems_ = global::Spelldawn.Protos.FlexAlign.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexAlign AlignItems {
      get { return alignItems_; }
      set {
        alignItems_ = value;
      }
    }

    /// <summary>Field number for the "align_self" field.</summary>
    public const int AlignSelfFieldNumber = 3;
    private global::Spelldawn.Protos.FlexAlign alignSelf_ = global::Spelldawn.Protos.FlexAlign.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexAlign AlignSelf {
      get { return alignSelf_; }
      set {
        alignSelf_ = value;
      }
    }

    /// <summary>Field number for the "background_color" field.</summary>
    public const int BackgroundColorFieldNumber = 4;
    private global::Spelldawn.Protos.FlexColor backgroundColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexColor BackgroundColor {
      get { return backgroundColor_; }
      set {
        backgroundColor_ = value;
      }
    }

    /// <summary>Field number for the "background_image" field.</summary>
    public const int BackgroundImageFieldNumber = 5;
    private global::Spelldawn.Protos.SpriteAddress backgroundImage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.SpriteAddress BackgroundImage {
      get { return backgroundImage_; }
      set {
        backgroundImage_ = value;
      }
    }

    /// <summary>Field number for the "border_color" field.</summary>
    public const int BorderColorFieldNumber = 6;
    private global::Spelldawn.Protos.BorderColor borderColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.BorderColor BorderColor {
      get { return borderColor_; }
      set {
        borderColor_ = value;
      }
    }

    /// <summary>Field number for the "border_radius" field.</summary>
    public const int BorderRadiusFieldNumber = 7;
    private global::Spelldawn.Protos.BorderRadius borderRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.BorderRadius BorderRadius {
      get { return borderRadius_; }
      set {
        borderRadius_ = value;
      }
    }

    /// <summary>Field number for the "border_width" field.</summary>
    public const int BorderWidthFieldNumber = 8;
    private global::Spelldawn.Protos.BorderWidth borderWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.BorderWidth BorderWidth {
      get { return borderWidth_; }
      set {
        borderWidth_ = value;
      }
    }

    /// <summary>Field number for the "inset" field.</summary>
    public const int InsetFieldNumber = 9;
    private global::Spelldawn.Protos.DimensionGroup inset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.DimensionGroup Inset {
      get { return inset_; }
      set {
        inset_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 10;
    private global::Spelldawn.Protos.FlexColor color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexColor Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 11;
    private global::Spelldawn.Protos.FlexDisplayStyle display_ = global::Spelldawn.Protos.FlexDisplayStyle.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexDisplayStyle Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "flex_basis" field.</summary>
    public const int FlexBasisFieldNumber = 12;
    private global::Spelldawn.Protos.Dimension flexBasis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension FlexBasis {
      get { return flexBasis_; }
      set {
        flexBasis_ = value;
      }
    }

    /// <summary>Field number for the "flex_direction" field.</summary>
    public const int FlexDirectionFieldNumber = 13;
    private global::Spelldawn.Protos.FlexDirection flexDirection_ = global::Spelldawn.Protos.FlexDirection.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexDirection FlexDirection {
      get { return flexDirection_; }
      set {
        flexDirection_ = value;
      }
    }

    /// <summary>Field number for the "flex_grow" field.</summary>
    public const int FlexGrowFieldNumber = 14;
    private static readonly pb::FieldCodec<float?> _single_flexGrow_codec = pb::FieldCodec.ForStructWrapper<float>(114);
    private float? flexGrow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? FlexGrow {
      get { return flexGrow_; }
      set {
        flexGrow_ = value;
      }
    }


    /// <summary>Field number for the "flex_shrink" field.</summary>
    public const int FlexShrinkFieldNumber = 15;
    private static readonly pb::FieldCodec<float?> _single_flexShrink_codec = pb::FieldCodec.ForStructWrapper<float>(122);
    private float? flexShrink_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? FlexShrink {
      get { return flexShrink_; }
      set {
        flexShrink_ = value;
      }
    }


    /// <summary>Field number for the "wrap" field.</summary>
    public const int WrapFieldNumber = 16;
    private global::Spelldawn.Protos.FlexWrap wrap_ = global::Spelldawn.Protos.FlexWrap.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexWrap Wrap {
      get { return wrap_; }
      set {
        wrap_ = value;
      }
    }

    /// <summary>Field number for the "font_size" field.</summary>
    public const int FontSizeFieldNumber = 17;
    private global::Spelldawn.Protos.Dimension fontSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension FontSize {
      get { return fontSize_; }
      set {
        fontSize_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 18;
    private global::Spelldawn.Protos.Dimension height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "justify_content" field.</summary>
    public const int JustifyContentFieldNumber = 19;
    private global::Spelldawn.Protos.FlexJustify justifyContent_ = global::Spelldawn.Protos.FlexJustify.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexJustify JustifyContent {
      get { return justifyContent_; }
      set {
        justifyContent_ = value;
      }
    }

    /// <summary>Field number for the "letter_spacing" field.</summary>
    public const int LetterSpacingFieldNumber = 20;
    private global::Spelldawn.Protos.Dimension letterSpacing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension LetterSpacing {
      get { return letterSpacing_; }
      set {
        letterSpacing_ = value;
      }
    }

    /// <summary>Field number for the "margin" field.</summary>
    public const int MarginFieldNumber = 21;
    private global::Spelldawn.Protos.DimensionGroup margin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.DimensionGroup Margin {
      get { return margin_; }
      set {
        margin_ = value;
      }
    }

    /// <summary>Field number for the "max_height" field.</summary>
    public const int MaxHeightFieldNumber = 22;
    private global::Spelldawn.Protos.Dimension maxHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension MaxHeight {
      get { return maxHeight_; }
      set {
        maxHeight_ = value;
      }
    }

    /// <summary>Field number for the "max_width" field.</summary>
    public const int MaxWidthFieldNumber = 23;
    private global::Spelldawn.Protos.Dimension maxWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension MaxWidth {
      get { return maxWidth_; }
      set {
        maxWidth_ = value;
      }
    }

    /// <summary>Field number for the "min_height" field.</summary>
    public const int MinHeightFieldNumber = 24;
    private global::Spelldawn.Protos.Dimension minHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension MinHeight {
      get { return minHeight_; }
      set {
        minHeight_ = value;
      }
    }

    /// <summary>Field number for the "min_width" field.</summary>
    public const int MinWidthFieldNumber = 25;
    private global::Spelldawn.Protos.Dimension minWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension MinWidth {
      get { return minWidth_; }
      set {
        minWidth_ = value;
      }
    }

    /// <summary>Field number for the "opacity" field.</summary>
    public const int OpacityFieldNumber = 26;
    private static readonly pb::FieldCodec<float?> _single_opacity_codec = pb::FieldCodec.ForStructWrapper<float>(210);
    private float? opacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? Opacity {
      get { return opacity_; }
      set {
        opacity_ = value;
      }
    }


    /// <summary>Field number for the "overflow" field.</summary>
    public const int OverflowFieldNumber = 27;
    private global::Spelldawn.Protos.FlexOverflow overflow_ = global::Spelldawn.Protos.FlexOverflow.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexOverflow Overflow {
      get { return overflow_; }
      set {
        overflow_ = value;
      }
    }

    /// <summary>Field number for the "padding" field.</summary>
    public const int PaddingFieldNumber = 28;
    private global::Spelldawn.Protos.DimensionGroup padding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.DimensionGroup Padding {
      get { return padding_; }
      set {
        padding_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 29;
    private global::Spelldawn.Protos.FlexPosition position_ = global::Spelldawn.Protos.FlexPosition.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexPosition Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "rotate" field.</summary>
    public const int RotateFieldNumber = 30;
    private global::Spelldawn.Protos.FlexRotate rotate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexRotate Rotate {
      get { return rotate_; }
      set {
        rotate_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 31;
    private global::Spelldawn.Protos.FlexScale scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexScale Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "text_overflow" field.</summary>
    public const int TextOverflowFieldNumber = 32;
    private global::Spelldawn.Protos.TextOverflow textOverflow_ = global::Spelldawn.Protos.TextOverflow.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.TextOverflow TextOverflow {
      get { return textOverflow_; }
      set {
        textOverflow_ = value;
      }
    }

    /// <summary>Field number for the "text_shadow" field.</summary>
    public const int TextShadowFieldNumber = 33;
    private global::Spelldawn.Protos.TextShadow textShadow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.TextShadow TextShadow {
      get { return textShadow_; }
      set {
        textShadow_ = value;
      }
    }

    /// <summary>Field number for the "transform_origin" field.</summary>
    public const int TransformOriginFieldNumber = 34;
    private global::Spelldawn.Protos.FlexTranslate transformOrigin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexTranslate TransformOrigin {
      get { return transformOrigin_; }
      set {
        transformOrigin_ = value;
      }
    }

    /// <summary>Field number for the "transition_delays" field.</summary>
    public const int TransitionDelaysFieldNumber = 35;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.TimeValue> _repeated_transitionDelays_codec
        = pb::FieldCodec.ForMessage(282, global::Spelldawn.Protos.TimeValue.Parser);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.TimeValue> transitionDelays_ = new pbc::RepeatedField<global::Spelldawn.Protos.TimeValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.TimeValue> TransitionDelays {
      get { return transitionDelays_; }
    }

    /// <summary>Field number for the "transition_durations" field.</summary>
    public const int TransitionDurationsFieldNumber = 36;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.TimeValue> _repeated_transitionDurations_codec
        = pb::FieldCodec.ForMessage(290, global::Spelldawn.Protos.TimeValue.Parser);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.TimeValue> transitionDurations_ = new pbc::RepeatedField<global::Spelldawn.Protos.TimeValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.TimeValue> TransitionDurations {
      get { return transitionDurations_; }
    }

    /// <summary>Field number for the "transition_properties" field.</summary>
    public const int TransitionPropertiesFieldNumber = 37;
    private static readonly pb::FieldCodec<string> _repeated_transitionProperties_codec
        = pb::FieldCodec.ForString(298);
    private readonly pbc::RepeatedField<string> transitionProperties_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TransitionProperties {
      get { return transitionProperties_; }
    }

    /// <summary>Field number for the "transition_easing_modes" field.</summary>
    public const int TransitionEasingModesFieldNumber = 38;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.EasingMode> _repeated_transitionEasingModes_codec
        = pb::FieldCodec.ForEnum(306, x => (int) x, x => (global::Spelldawn.Protos.EasingMode) x);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.EasingMode> transitionEasingModes_ = new pbc::RepeatedField<global::Spelldawn.Protos.EasingMode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.EasingMode> TransitionEasingModes {
      get { return transitionEasingModes_; }
    }

    /// <summary>Field number for the "translate" field.</summary>
    public const int TranslateFieldNumber = 39;
    private global::Spelldawn.Protos.FlexTranslate translate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexTranslate Translate {
      get { return translate_; }
      set {
        translate_ = value;
      }
    }

    /// <summary>Field number for the "background_image_tint_color" field.</summary>
    public const int BackgroundImageTintColorFieldNumber = 40;
    private global::Spelldawn.Protos.FlexColor backgroundImageTintColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexColor BackgroundImageTintColor {
      get { return backgroundImageTintColor_; }
      set {
        backgroundImageTintColor_ = value;
      }
    }

    /// <summary>Field number for the "background_image_scale_mode" field.</summary>
    public const int BackgroundImageScaleModeFieldNumber = 41;
    private global::Spelldawn.Protos.ImageScaleMode backgroundImageScaleMode_ = global::Spelldawn.Protos.ImageScaleMode.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ImageScaleMode BackgroundImageScaleMode {
      get { return backgroundImageScaleMode_; }
      set {
        backgroundImageScaleMode_ = value;
      }
    }

    /// <summary>Field number for the "font" field.</summary>
    public const int FontFieldNumber = 42;
    private global::Spelldawn.Protos.FontAddress font_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FontAddress Font {
      get { return font_; }
      set {
        font_ = value;
      }
    }

    /// <summary>Field number for the "font_style" field.</summary>
    public const int FontStyleFieldNumber = 43;
    private global::Spelldawn.Protos.FontStyle fontStyle_ = global::Spelldawn.Protos.FontStyle.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FontStyle FontStyle {
      get { return fontStyle_; }
      set {
        fontStyle_ = value;
      }
    }

    /// <summary>Field number for the "overflow_clip_box" field.</summary>
    public const int OverflowClipBoxFieldNumber = 44;
    private global::Spelldawn.Protos.OverflowClipBox overflowClipBox_ = global::Spelldawn.Protos.OverflowClipBox.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.OverflowClipBox OverflowClipBox {
      get { return overflowClipBox_; }
      set {
        overflowClipBox_ = value;
      }
    }

    /// <summary>Field number for the "paragraph_spacing" field.</summary>
    public const int ParagraphSpacingFieldNumber = 45;
    private global::Spelldawn.Protos.Dimension paragraphSpacing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension ParagraphSpacing {
      get { return paragraphSpacing_; }
      set {
        paragraphSpacing_ = value;
      }
    }

    /// <summary>Field number for the "image_slice" field.</summary>
    public const int ImageSliceFieldNumber = 46;
    private global::Spelldawn.Protos.ImageSlice imageSlice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ImageSlice ImageSlice {
      get { return imageSlice_; }
      set {
        imageSlice_ = value;
      }
    }

    /// <summary>Field number for the "text_align" field.</summary>
    public const int TextAlignFieldNumber = 47;
    private global::Spelldawn.Protos.TextAlign textAlign_ = global::Spelldawn.Protos.TextAlign.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.TextAlign TextAlign {
      get { return textAlign_; }
      set {
        textAlign_ = value;
      }
    }

    /// <summary>Field number for the "text_outline_color" field.</summary>
    public const int TextOutlineColorFieldNumber = 48;
    private global::Spelldawn.Protos.FlexColor textOutlineColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexColor TextOutlineColor {
      get { return textOutlineColor_; }
      set {
        textOutlineColor_ = value;
      }
    }

    /// <summary>Field number for the "text_outline_width" field.</summary>
    public const int TextOutlineWidthFieldNumber = 49;
    private static readonly pb::FieldCodec<float?> _single_textOutlineWidth_codec = pb::FieldCodec.ForStructWrapper<float>(394);
    private float? textOutlineWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? TextOutlineWidth {
      get { return textOutlineWidth_; }
      set {
        textOutlineWidth_ = value;
      }
    }


    /// <summary>Field number for the "text_overflow_position" field.</summary>
    public const int TextOverflowPositionFieldNumber = 50;
    private global::Spelldawn.Protos.TextOverflowPosition textOverflowPosition_ = global::Spelldawn.Protos.TextOverflowPosition.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.TextOverflowPosition TextOverflowPosition {
      get { return textOverflowPosition_; }
      set {
        textOverflowPosition_ = value;
      }
    }

    /// <summary>Field number for the "visibility" field.</summary>
    public const int VisibilityFieldNumber = 51;
    private global::Spelldawn.Protos.FlexVisibility visibility_ = global::Spelldawn.Protos.FlexVisibility.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexVisibility Visibility {
      get { return visibility_; }
      set {
        visibility_ = value;
      }
    }

    /// <summary>Field number for the "white_space" field.</summary>
    public const int WhiteSpaceFieldNumber = 52;
    private global::Spelldawn.Protos.WhiteSpace whiteSpace_ = global::Spelldawn.Protos.WhiteSpace.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.WhiteSpace WhiteSpace {
      get { return whiteSpace_; }
      set {
        whiteSpace_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 53;
    private global::Spelldawn.Protos.Dimension width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "word_spacing" field.</summary>
    public const int WordSpacingFieldNumber = 54;
    private global::Spelldawn.Protos.Dimension wordSpacing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension WordSpacing {
      get { return wordSpacing_; }
      set {
        wordSpacing_ = value;
      }
    }

    /// <summary>Field number for the "background_image_scale_multiplier" field.</summary>
    public const int BackgroundImageScaleMultiplierFieldNumber = 55;
    private static readonly pb::FieldCodec<float?> _single_backgroundImageScaleMultiplier_codec = pb::FieldCodec.ForStructWrapper<float>(442);
    private float? backgroundImageScaleMultiplier_;
    /// <summary>
    ///
    /// Overwrites both 'width' and 'height' by multiplying the dimensions of
    /// the provided 'background_image' (in units of raw pixels) by this
    /// constant.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? BackgroundImageScaleMultiplier {
      get { return backgroundImageScaleMultiplier_; }
      set {
        backgroundImageScaleMultiplier_ = value;
      }
    }


    /// <summary>Field number for the "fixed_background_image_aspect_ratio" field.</summary>
    public const int FixedBackgroundImageAspectRatioFieldNumber = 56;
    private bool fixedBackgroundImageAspectRatio_;
    /// <summary>
    ///
    /// Calculates the aspect ratio of the provided 'background_image' and uses
    /// it to set dimensions. If 'width' is set, the 'height' will be set based
    /// on the aspect ratio and vice versa. Does not support percentage values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FixedBackgroundImageAspectRatio {
      get { return fixedBackgroundImageAspectRatio_; }
      set {
        fixedBackgroundImageAspectRatio_ = value;
      }
    }

    /// <summary>Field number for the "picking_mode" field.</summary>
    public const int PickingModeFieldNumber = 57;
    private global::Spelldawn.Protos.FlexPickingMode pickingMode_ = global::Spelldawn.Protos.FlexPickingMode.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexPickingMode PickingMode {
      get { return pickingMode_; }
      set {
        pickingMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlexStyle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlexStyle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AlignContent != other.AlignContent) return false;
      if (AlignItems != other.AlignItems) return false;
      if (AlignSelf != other.AlignSelf) return false;
      if (!object.Equals(BackgroundColor, other.BackgroundColor)) return false;
      if (!object.Equals(BackgroundImage, other.BackgroundImage)) return false;
      if (!object.Equals(BorderColor, other.BorderColor)) return false;
      if (!object.Equals(BorderRadius, other.BorderRadius)) return false;
      if (!object.Equals(BorderWidth, other.BorderWidth)) return false;
      if (!object.Equals(Inset, other.Inset)) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (Display != other.Display) return false;
      if (!object.Equals(FlexBasis, other.FlexBasis)) return false;
      if (FlexDirection != other.FlexDirection) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(FlexGrow, other.FlexGrow)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(FlexShrink, other.FlexShrink)) return false;
      if (Wrap != other.Wrap) return false;
      if (!object.Equals(FontSize, other.FontSize)) return false;
      if (!object.Equals(Height, other.Height)) return false;
      if (JustifyContent != other.JustifyContent) return false;
      if (!object.Equals(LetterSpacing, other.LetterSpacing)) return false;
      if (!object.Equals(Margin, other.Margin)) return false;
      if (!object.Equals(MaxHeight, other.MaxHeight)) return false;
      if (!object.Equals(MaxWidth, other.MaxWidth)) return false;
      if (!object.Equals(MinHeight, other.MinHeight)) return false;
      if (!object.Equals(MinWidth, other.MinWidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Opacity, other.Opacity)) return false;
      if (Overflow != other.Overflow) return false;
      if (!object.Equals(Padding, other.Padding)) return false;
      if (Position != other.Position) return false;
      if (!object.Equals(Rotate, other.Rotate)) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      if (TextOverflow != other.TextOverflow) return false;
      if (!object.Equals(TextShadow, other.TextShadow)) return false;
      if (!object.Equals(TransformOrigin, other.TransformOrigin)) return false;
      if(!transitionDelays_.Equals(other.transitionDelays_)) return false;
      if(!transitionDurations_.Equals(other.transitionDurations_)) return false;
      if(!transitionProperties_.Equals(other.transitionProperties_)) return false;
      if(!transitionEasingModes_.Equals(other.transitionEasingModes_)) return false;
      if (!object.Equals(Translate, other.Translate)) return false;
      if (!object.Equals(BackgroundImageTintColor, other.BackgroundImageTintColor)) return false;
      if (BackgroundImageScaleMode != other.BackgroundImageScaleMode) return false;
      if (!object.Equals(Font, other.Font)) return false;
      if (FontStyle != other.FontStyle) return false;
      if (OverflowClipBox != other.OverflowClipBox) return false;
      if (!object.Equals(ParagraphSpacing, other.ParagraphSpacing)) return false;
      if (!object.Equals(ImageSlice, other.ImageSlice)) return false;
      if (TextAlign != other.TextAlign) return false;
      if (!object.Equals(TextOutlineColor, other.TextOutlineColor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(TextOutlineWidth, other.TextOutlineWidth)) return false;
      if (TextOverflowPosition != other.TextOverflowPosition) return false;
      if (Visibility != other.Visibility) return false;
      if (WhiteSpace != other.WhiteSpace) return false;
      if (!object.Equals(Width, other.Width)) return false;
      if (!object.Equals(WordSpacing, other.WordSpacing)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(BackgroundImageScaleMultiplier, other.BackgroundImageScaleMultiplier)) return false;
      if (FixedBackgroundImageAspectRatio != other.FixedBackgroundImageAspectRatio) return false;
      if (PickingMode != other.PickingMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AlignContent != global::Spelldawn.Protos.FlexAlign.Unspecified) hash ^= AlignContent.GetHashCode();
      if (AlignItems != global::Spelldawn.Protos.FlexAlign.Unspecified) hash ^= AlignItems.GetHashCode();
      if (AlignSelf != global::Spelldawn.Protos.FlexAlign.Unspecified) hash ^= AlignSelf.GetHashCode();
      if (backgroundColor_ != null) hash ^= BackgroundColor.GetHashCode();
      if (backgroundImage_ != null) hash ^= BackgroundImage.GetHashCode();
      if (borderColor_ != null) hash ^= BorderColor.GetHashCode();
      if (borderRadius_ != null) hash ^= BorderRadius.GetHashCode();
      if (borderWidth_ != null) hash ^= BorderWidth.GetHashCode();
      if (inset_ != null) hash ^= Inset.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (Display != global::Spelldawn.Protos.FlexDisplayStyle.Unspecified) hash ^= Display.GetHashCode();
      if (flexBasis_ != null) hash ^= FlexBasis.GetHashCode();
      if (FlexDirection != global::Spelldawn.Protos.FlexDirection.Unspecified) hash ^= FlexDirection.GetHashCode();
      if (flexGrow_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(FlexGrow);
      if (flexShrink_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(FlexShrink);
      if (Wrap != global::Spelldawn.Protos.FlexWrap.Unspecified) hash ^= Wrap.GetHashCode();
      if (fontSize_ != null) hash ^= FontSize.GetHashCode();
      if (height_ != null) hash ^= Height.GetHashCode();
      if (JustifyContent != global::Spelldawn.Protos.FlexJustify.Unspecified) hash ^= JustifyContent.GetHashCode();
      if (letterSpacing_ != null) hash ^= LetterSpacing.GetHashCode();
      if (margin_ != null) hash ^= Margin.GetHashCode();
      if (maxHeight_ != null) hash ^= MaxHeight.GetHashCode();
      if (maxWidth_ != null) hash ^= MaxWidth.GetHashCode();
      if (minHeight_ != null) hash ^= MinHeight.GetHashCode();
      if (minWidth_ != null) hash ^= MinWidth.GetHashCode();
      if (opacity_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Opacity);
      if (Overflow != global::Spelldawn.Protos.FlexOverflow.Unspecified) hash ^= Overflow.GetHashCode();
      if (padding_ != null) hash ^= Padding.GetHashCode();
      if (Position != global::Spelldawn.Protos.FlexPosition.Unspecified) hash ^= Position.GetHashCode();
      if (rotate_ != null) hash ^= Rotate.GetHashCode();
      if (scale_ != null) hash ^= Scale.GetHashCode();
      if (TextOverflow != global::Spelldawn.Protos.TextOverflow.Unspecified) hash ^= TextOverflow.GetHashCode();
      if (textShadow_ != null) hash ^= TextShadow.GetHashCode();
      if (transformOrigin_ != null) hash ^= TransformOrigin.GetHashCode();
      hash ^= transitionDelays_.GetHashCode();
      hash ^= transitionDurations_.GetHashCode();
      hash ^= transitionProperties_.GetHashCode();
      hash ^= transitionEasingModes_.GetHashCode();
      if (translate_ != null) hash ^= Translate.GetHashCode();
      if (backgroundImageTintColor_ != null) hash ^= BackgroundImageTintColor.GetHashCode();
      if (BackgroundImageScaleMode != global::Spelldawn.Protos.ImageScaleMode.Unspecified) hash ^= BackgroundImageScaleMode.GetHashCode();
      if (font_ != null) hash ^= Font.GetHashCode();
      if (FontStyle != global::Spelldawn.Protos.FontStyle.Unspecified) hash ^= FontStyle.GetHashCode();
      if (OverflowClipBox != global::Spelldawn.Protos.OverflowClipBox.Unspecified) hash ^= OverflowClipBox.GetHashCode();
      if (paragraphSpacing_ != null) hash ^= ParagraphSpacing.GetHashCode();
      if (imageSlice_ != null) hash ^= ImageSlice.GetHashCode();
      if (TextAlign != global::Spelldawn.Protos.TextAlign.Unspecified) hash ^= TextAlign.GetHashCode();
      if (textOutlineColor_ != null) hash ^= TextOutlineColor.GetHashCode();
      if (textOutlineWidth_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(TextOutlineWidth);
      if (TextOverflowPosition != global::Spelldawn.Protos.TextOverflowPosition.Unspecified) hash ^= TextOverflowPosition.GetHashCode();
      if (Visibility != global::Spelldawn.Protos.FlexVisibility.Unspecified) hash ^= Visibility.GetHashCode();
      if (WhiteSpace != global::Spelldawn.Protos.WhiteSpace.Unspecified) hash ^= WhiteSpace.GetHashCode();
      if (width_ != null) hash ^= Width.GetHashCode();
      if (wordSpacing_ != null) hash ^= WordSpacing.GetHashCode();
      if (backgroundImageScaleMultiplier_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(BackgroundImageScaleMultiplier);
      if (FixedBackgroundImageAspectRatio != false) hash ^= FixedBackgroundImageAspectRatio.GetHashCode();
      if (PickingMode != global::Spelldawn.Protos.FlexPickingMode.Unspecified) hash ^= PickingMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AlignContent != global::Spelldawn.Protos.FlexAlign.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AlignContent);
      }
      if (AlignItems != global::Spelldawn.Protos.FlexAlign.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AlignItems);
      }
      if (AlignSelf != global::Spelldawn.Protos.FlexAlign.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) AlignSelf);
      }
      if (backgroundColor_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BackgroundColor);
      }
      if (backgroundImage_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BackgroundImage);
      }
      if (borderColor_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(BorderColor);
      }
      if (borderRadius_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BorderRadius);
      }
      if (borderWidth_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(BorderWidth);
      }
      if (inset_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Inset);
      }
      if (color_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Color);
      }
      if (Display != global::Spelldawn.Protos.FlexDisplayStyle.Unspecified) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Display);
      }
      if (flexBasis_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(FlexBasis);
      }
      if (FlexDirection != global::Spelldawn.Protos.FlexDirection.Unspecified) {
        output.WriteRawTag(104);
        output.WriteEnum((int) FlexDirection);
      }
      if (flexGrow_ != null) {
        _single_flexGrow_codec.WriteTagAndValue(output, FlexGrow);
      }
      if (flexShrink_ != null) {
        _single_flexShrink_codec.WriteTagAndValue(output, FlexShrink);
      }
      if (Wrap != global::Spelldawn.Protos.FlexWrap.Unspecified) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) Wrap);
      }
      if (fontSize_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(FontSize);
      }
      if (height_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Height);
      }
      if (JustifyContent != global::Spelldawn.Protos.FlexJustify.Unspecified) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) JustifyContent);
      }
      if (letterSpacing_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(LetterSpacing);
      }
      if (margin_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Margin);
      }
      if (maxHeight_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(MaxHeight);
      }
      if (maxWidth_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(MaxWidth);
      }
      if (minHeight_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(MinHeight);
      }
      if (minWidth_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(MinWidth);
      }
      if (opacity_ != null) {
        _single_opacity_codec.WriteTagAndValue(output, Opacity);
      }
      if (Overflow != global::Spelldawn.Protos.FlexOverflow.Unspecified) {
        output.WriteRawTag(216, 1);
        output.WriteEnum((int) Overflow);
      }
      if (padding_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(Padding);
      }
      if (Position != global::Spelldawn.Protos.FlexPosition.Unspecified) {
        output.WriteRawTag(232, 1);
        output.WriteEnum((int) Position);
      }
      if (rotate_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Rotate);
      }
      if (scale_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(Scale);
      }
      if (TextOverflow != global::Spelldawn.Protos.TextOverflow.Unspecified) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) TextOverflow);
      }
      if (textShadow_ != null) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(TextShadow);
      }
      if (transformOrigin_ != null) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(TransformOrigin);
      }
      transitionDelays_.WriteTo(output, _repeated_transitionDelays_codec);
      transitionDurations_.WriteTo(output, _repeated_transitionDurations_codec);
      transitionProperties_.WriteTo(output, _repeated_transitionProperties_codec);
      transitionEasingModes_.WriteTo(output, _repeated_transitionEasingModes_codec);
      if (translate_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Translate);
      }
      if (backgroundImageTintColor_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(BackgroundImageTintColor);
      }
      if (BackgroundImageScaleMode != global::Spelldawn.Protos.ImageScaleMode.Unspecified) {
        output.WriteRawTag(200, 2);
        output.WriteEnum((int) BackgroundImageScaleMode);
      }
      if (font_ != null) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(Font);
      }
      if (FontStyle != global::Spelldawn.Protos.FontStyle.Unspecified) {
        output.WriteRawTag(216, 2);
        output.WriteEnum((int) FontStyle);
      }
      if (OverflowClipBox != global::Spelldawn.Protos.OverflowClipBox.Unspecified) {
        output.WriteRawTag(224, 2);
        output.WriteEnum((int) OverflowClipBox);
      }
      if (paragraphSpacing_ != null) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(ParagraphSpacing);
      }
      if (imageSlice_ != null) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(ImageSlice);
      }
      if (TextAlign != global::Spelldawn.Protos.TextAlign.Unspecified) {
        output.WriteRawTag(248, 2);
        output.WriteEnum((int) TextAlign);
      }
      if (textOutlineColor_ != null) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(TextOutlineColor);
      }
      if (textOutlineWidth_ != null) {
        _single_textOutlineWidth_codec.WriteTagAndValue(output, TextOutlineWidth);
      }
      if (TextOverflowPosition != global::Spelldawn.Protos.TextOverflowPosition.Unspecified) {
        output.WriteRawTag(144, 3);
        output.WriteEnum((int) TextOverflowPosition);
      }
      if (Visibility != global::Spelldawn.Protos.FlexVisibility.Unspecified) {
        output.WriteRawTag(152, 3);
        output.WriteEnum((int) Visibility);
      }
      if (WhiteSpace != global::Spelldawn.Protos.WhiteSpace.Unspecified) {
        output.WriteRawTag(160, 3);
        output.WriteEnum((int) WhiteSpace);
      }
      if (width_ != null) {
        output.WriteRawTag(170, 3);
        output.WriteMessage(Width);
      }
      if (wordSpacing_ != null) {
        output.WriteRawTag(178, 3);
        output.WriteMessage(WordSpacing);
      }
      if (backgroundImageScaleMultiplier_ != null) {
        _single_backgroundImageScaleMultiplier_codec.WriteTagAndValue(output, BackgroundImageScaleMultiplier);
      }
      if (FixedBackgroundImageAspectRatio != false) {
        output.WriteRawTag(192, 3);
        output.WriteBool(FixedBackgroundImageAspectRatio);
      }
      if (PickingMode != global::Spelldawn.Protos.FlexPickingMode.Unspecified) {
        output.WriteRawTag(200, 3);
        output.WriteEnum((int) PickingMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AlignContent != global::Spelldawn.Protos.FlexAlign.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AlignContent);
      }
      if (AlignItems != global::Spelldawn.Protos.FlexAlign.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AlignItems);
      }
      if (AlignSelf != global::Spelldawn.Protos.FlexAlign.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) AlignSelf);
      }
      if (backgroundColor_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BackgroundColor);
      }
      if (backgroundImage_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BackgroundImage);
      }
      if (borderColor_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(BorderColor);
      }
      if (borderRadius_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BorderRadius);
      }
      if (borderWidth_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(BorderWidth);
      }
      if (inset_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Inset);
      }
      if (color_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Color);
      }
      if (Display != global::Spelldawn.Protos.FlexDisplayStyle.Unspecified) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Display);
      }
      if (flexBasis_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(FlexBasis);
      }
      if (FlexDirection != global::Spelldawn.Protos.FlexDirection.Unspecified) {
        output.WriteRawTag(104);
        output.WriteEnum((int) FlexDirection);
      }
      if (flexGrow_ != null) {
        _single_flexGrow_codec.WriteTagAndValue(ref output, FlexGrow);
      }
      if (flexShrink_ != null) {
        _single_flexShrink_codec.WriteTagAndValue(ref output, FlexShrink);
      }
      if (Wrap != global::Spelldawn.Protos.FlexWrap.Unspecified) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) Wrap);
      }
      if (fontSize_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(FontSize);
      }
      if (height_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Height);
      }
      if (JustifyContent != global::Spelldawn.Protos.FlexJustify.Unspecified) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) JustifyContent);
      }
      if (letterSpacing_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(LetterSpacing);
      }
      if (margin_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Margin);
      }
      if (maxHeight_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(MaxHeight);
      }
      if (maxWidth_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(MaxWidth);
      }
      if (minHeight_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(MinHeight);
      }
      if (minWidth_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(MinWidth);
      }
      if (opacity_ != null) {
        _single_opacity_codec.WriteTagAndValue(ref output, Opacity);
      }
      if (Overflow != global::Spelldawn.Protos.FlexOverflow.Unspecified) {
        output.WriteRawTag(216, 1);
        output.WriteEnum((int) Overflow);
      }
      if (padding_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(Padding);
      }
      if (Position != global::Spelldawn.Protos.FlexPosition.Unspecified) {
        output.WriteRawTag(232, 1);
        output.WriteEnum((int) Position);
      }
      if (rotate_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Rotate);
      }
      if (scale_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(Scale);
      }
      if (TextOverflow != global::Spelldawn.Protos.TextOverflow.Unspecified) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) TextOverflow);
      }
      if (textShadow_ != null) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(TextShadow);
      }
      if (transformOrigin_ != null) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(TransformOrigin);
      }
      transitionDelays_.WriteTo(ref output, _repeated_transitionDelays_codec);
      transitionDurations_.WriteTo(ref output, _repeated_transitionDurations_codec);
      transitionProperties_.WriteTo(ref output, _repeated_transitionProperties_codec);
      transitionEasingModes_.WriteTo(ref output, _repeated_transitionEasingModes_codec);
      if (translate_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Translate);
      }
      if (backgroundImageTintColor_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(BackgroundImageTintColor);
      }
      if (BackgroundImageScaleMode != global::Spelldawn.Protos.ImageScaleMode.Unspecified) {
        output.WriteRawTag(200, 2);
        output.WriteEnum((int) BackgroundImageScaleMode);
      }
      if (font_ != null) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(Font);
      }
      if (FontStyle != global::Spelldawn.Protos.FontStyle.Unspecified) {
        output.WriteRawTag(216, 2);
        output.WriteEnum((int) FontStyle);
      }
      if (OverflowClipBox != global::Spelldawn.Protos.OverflowClipBox.Unspecified) {
        output.WriteRawTag(224, 2);
        output.WriteEnum((int) OverflowClipBox);
      }
      if (paragraphSpacing_ != null) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(ParagraphSpacing);
      }
      if (imageSlice_ != null) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(ImageSlice);
      }
      if (TextAlign != global::Spelldawn.Protos.TextAlign.Unspecified) {
        output.WriteRawTag(248, 2);
        output.WriteEnum((int) TextAlign);
      }
      if (textOutlineColor_ != null) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(TextOutlineColor);
      }
      if (textOutlineWidth_ != null) {
        _single_textOutlineWidth_codec.WriteTagAndValue(ref output, TextOutlineWidth);
      }
      if (TextOverflowPosition != global::Spelldawn.Protos.TextOverflowPosition.Unspecified) {
        output.WriteRawTag(144, 3);
        output.WriteEnum((int) TextOverflowPosition);
      }
      if (Visibility != global::Spelldawn.Protos.FlexVisibility.Unspecified) {
        output.WriteRawTag(152, 3);
        output.WriteEnum((int) Visibility);
      }
      if (WhiteSpace != global::Spelldawn.Protos.WhiteSpace.Unspecified) {
        output.WriteRawTag(160, 3);
        output.WriteEnum((int) WhiteSpace);
      }
      if (width_ != null) {
        output.WriteRawTag(170, 3);
        output.WriteMessage(Width);
      }
      if (wordSpacing_ != null) {
        output.WriteRawTag(178, 3);
        output.WriteMessage(WordSpacing);
      }
      if (backgroundImageScaleMultiplier_ != null) {
        _single_backgroundImageScaleMultiplier_codec.WriteTagAndValue(ref output, BackgroundImageScaleMultiplier);
      }
      if (FixedBackgroundImageAspectRatio != false) {
        output.WriteRawTag(192, 3);
        output.WriteBool(FixedBackgroundImageAspectRatio);
      }
      if (PickingMode != global::Spelldawn.Protos.FlexPickingMode.Unspecified) {
        output.WriteRawTag(200, 3);
        output.WriteEnum((int) PickingMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AlignContent != global::Spelldawn.Protos.FlexAlign.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AlignContent);
      }
      if (AlignItems != global::Spelldawn.Protos.FlexAlign.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AlignItems);
      }
      if (AlignSelf != global::Spelldawn.Protos.FlexAlign.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AlignSelf);
      }
      if (backgroundColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BackgroundColor);
      }
      if (backgroundImage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BackgroundImage);
      }
      if (borderColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BorderColor);
      }
      if (borderRadius_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BorderRadius);
      }
      if (borderWidth_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BorderWidth);
      }
      if (inset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Inset);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (Display != global::Spelldawn.Protos.FlexDisplayStyle.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Display);
      }
      if (flexBasis_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FlexBasis);
      }
      if (FlexDirection != global::Spelldawn.Protos.FlexDirection.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FlexDirection);
      }
      if (flexGrow_ != null) {
        size += _single_flexGrow_codec.CalculateSizeWithTag(FlexGrow);
      }
      if (flexShrink_ != null) {
        size += _single_flexShrink_codec.CalculateSizeWithTag(FlexShrink);
      }
      if (Wrap != global::Spelldawn.Protos.FlexWrap.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Wrap);
      }
      if (fontSize_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FontSize);
      }
      if (height_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Height);
      }
      if (JustifyContent != global::Spelldawn.Protos.FlexJustify.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) JustifyContent);
      }
      if (letterSpacing_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LetterSpacing);
      }
      if (margin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Margin);
      }
      if (maxHeight_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaxHeight);
      }
      if (maxWidth_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaxWidth);
      }
      if (minHeight_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinHeight);
      }
      if (minWidth_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinWidth);
      }
      if (opacity_ != null) {
        size += _single_opacity_codec.CalculateSizeWithTag(Opacity);
      }
      if (Overflow != global::Spelldawn.Protos.FlexOverflow.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Overflow);
      }
      if (padding_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Padding);
      }
      if (Position != global::Spelldawn.Protos.FlexPosition.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Position);
      }
      if (rotate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Rotate);
      }
      if (scale_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      if (TextOverflow != global::Spelldawn.Protos.TextOverflow.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TextOverflow);
      }
      if (textShadow_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TextShadow);
      }
      if (transformOrigin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransformOrigin);
      }
      size += transitionDelays_.CalculateSize(_repeated_transitionDelays_codec);
      size += transitionDurations_.CalculateSize(_repeated_transitionDurations_codec);
      size += transitionProperties_.CalculateSize(_repeated_transitionProperties_codec);
      size += transitionEasingModes_.CalculateSize(_repeated_transitionEasingModes_codec);
      if (translate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Translate);
      }
      if (backgroundImageTintColor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BackgroundImageTintColor);
      }
      if (BackgroundImageScaleMode != global::Spelldawn.Protos.ImageScaleMode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BackgroundImageScaleMode);
      }
      if (font_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Font);
      }
      if (FontStyle != global::Spelldawn.Protos.FontStyle.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FontStyle);
      }
      if (OverflowClipBox != global::Spelldawn.Protos.OverflowClipBox.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OverflowClipBox);
      }
      if (paragraphSpacing_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ParagraphSpacing);
      }
      if (imageSlice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ImageSlice);
      }
      if (TextAlign != global::Spelldawn.Protos.TextAlign.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TextAlign);
      }
      if (textOutlineColor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TextOutlineColor);
      }
      if (textOutlineWidth_ != null) {
        size += _single_textOutlineWidth_codec.CalculateSizeWithTag(TextOutlineWidth);
      }
      if (TextOverflowPosition != global::Spelldawn.Protos.TextOverflowPosition.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TextOverflowPosition);
      }
      if (Visibility != global::Spelldawn.Protos.FlexVisibility.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Visibility);
      }
      if (WhiteSpace != global::Spelldawn.Protos.WhiteSpace.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) WhiteSpace);
      }
      if (width_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Width);
      }
      if (wordSpacing_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WordSpacing);
      }
      if (backgroundImageScaleMultiplier_ != null) {
        size += _single_backgroundImageScaleMultiplier_codec.CalculateSizeWithTag(BackgroundImageScaleMultiplier);
      }
      if (FixedBackgroundImageAspectRatio != false) {
        size += 2 + 1;
      }
      if (PickingMode != global::Spelldawn.Protos.FlexPickingMode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PickingMode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlexStyle other) {
      if (other == null) {
        return;
      }
      if (other.AlignContent != global::Spelldawn.Protos.FlexAlign.Unspecified) {
        AlignContent = other.AlignContent;
      }
      if (other.AlignItems != global::Spelldawn.Protos.FlexAlign.Unspecified) {
        AlignItems = other.AlignItems;
      }
      if (other.AlignSelf != global::Spelldawn.Protos.FlexAlign.Unspecified) {
        AlignSelf = other.AlignSelf;
      }
      if (other.backgroundColor_ != null) {
        if (backgroundColor_ == null) {
          BackgroundColor = new global::Spelldawn.Protos.FlexColor();
        }
        BackgroundColor.MergeFrom(other.BackgroundColor);
      }
      if (other.backgroundImage_ != null) {
        if (backgroundImage_ == null) {
          BackgroundImage = new global::Spelldawn.Protos.SpriteAddress();
        }
        BackgroundImage.MergeFrom(other.BackgroundImage);
      }
      if (other.borderColor_ != null) {
        if (borderColor_ == null) {
          BorderColor = new global::Spelldawn.Protos.BorderColor();
        }
        BorderColor.MergeFrom(other.BorderColor);
      }
      if (other.borderRadius_ != null) {
        if (borderRadius_ == null) {
          BorderRadius = new global::Spelldawn.Protos.BorderRadius();
        }
        BorderRadius.MergeFrom(other.BorderRadius);
      }
      if (other.borderWidth_ != null) {
        if (borderWidth_ == null) {
          BorderWidth = new global::Spelldawn.Protos.BorderWidth();
        }
        BorderWidth.MergeFrom(other.BorderWidth);
      }
      if (other.inset_ != null) {
        if (inset_ == null) {
          Inset = new global::Spelldawn.Protos.DimensionGroup();
        }
        Inset.MergeFrom(other.Inset);
      }
      if (other.color_ != null) {
        if (color_ == null) {
          Color = new global::Spelldawn.Protos.FlexColor();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.Display != global::Spelldawn.Protos.FlexDisplayStyle.Unspecified) {
        Display = other.Display;
      }
      if (other.flexBasis_ != null) {
        if (flexBasis_ == null) {
          FlexBasis = new global::Spelldawn.Protos.Dimension();
        }
        FlexBasis.MergeFrom(other.FlexBasis);
      }
      if (other.FlexDirection != global::Spelldawn.Protos.FlexDirection.Unspecified) {
        FlexDirection = other.FlexDirection;
      }
      if (other.flexGrow_ != null) {
        if (flexGrow_ == null || other.FlexGrow != 0F) {
          FlexGrow = other.FlexGrow;
        }
      }
      if (other.flexShrink_ != null) {
        if (flexShrink_ == null || other.FlexShrink != 0F) {
          FlexShrink = other.FlexShrink;
        }
      }
      if (other.Wrap != global::Spelldawn.Protos.FlexWrap.Unspecified) {
        Wrap = other.Wrap;
      }
      if (other.fontSize_ != null) {
        if (fontSize_ == null) {
          FontSize = new global::Spelldawn.Protos.Dimension();
        }
        FontSize.MergeFrom(other.FontSize);
      }
      if (other.height_ != null) {
        if (height_ == null) {
          Height = new global::Spelldawn.Protos.Dimension();
        }
        Height.MergeFrom(other.Height);
      }
      if (other.JustifyContent != global::Spelldawn.Protos.FlexJustify.Unspecified) {
        JustifyContent = other.JustifyContent;
      }
      if (other.letterSpacing_ != null) {
        if (letterSpacing_ == null) {
          LetterSpacing = new global::Spelldawn.Protos.Dimension();
        }
        LetterSpacing.MergeFrom(other.LetterSpacing);
      }
      if (other.margin_ != null) {
        if (margin_ == null) {
          Margin = new global::Spelldawn.Protos.DimensionGroup();
        }
        Margin.MergeFrom(other.Margin);
      }
      if (other.maxHeight_ != null) {
        if (maxHeight_ == null) {
          MaxHeight = new global::Spelldawn.Protos.Dimension();
        }
        MaxHeight.MergeFrom(other.MaxHeight);
      }
      if (other.maxWidth_ != null) {
        if (maxWidth_ == null) {
          MaxWidth = new global::Spelldawn.Protos.Dimension();
        }
        MaxWidth.MergeFrom(other.MaxWidth);
      }
      if (other.minHeight_ != null) {
        if (minHeight_ == null) {
          MinHeight = new global::Spelldawn.Protos.Dimension();
        }
        MinHeight.MergeFrom(other.MinHeight);
      }
      if (other.minWidth_ != null) {
        if (minWidth_ == null) {
          MinWidth = new global::Spelldawn.Protos.Dimension();
        }
        MinWidth.MergeFrom(other.MinWidth);
      }
      if (other.opacity_ != null) {
        if (opacity_ == null || other.Opacity != 0F) {
          Opacity = other.Opacity;
        }
      }
      if (other.Overflow != global::Spelldawn.Protos.FlexOverflow.Unspecified) {
        Overflow = other.Overflow;
      }
      if (other.padding_ != null) {
        if (padding_ == null) {
          Padding = new global::Spelldawn.Protos.DimensionGroup();
        }
        Padding.MergeFrom(other.Padding);
      }
      if (other.Position != global::Spelldawn.Protos.FlexPosition.Unspecified) {
        Position = other.Position;
      }
      if (other.rotate_ != null) {
        if (rotate_ == null) {
          Rotate = new global::Spelldawn.Protos.FlexRotate();
        }
        Rotate.MergeFrom(other.Rotate);
      }
      if (other.scale_ != null) {
        if (scale_ == null) {
          Scale = new global::Spelldawn.Protos.FlexScale();
        }
        Scale.MergeFrom(other.Scale);
      }
      if (other.TextOverflow != global::Spelldawn.Protos.TextOverflow.Unspecified) {
        TextOverflow = other.TextOverflow;
      }
      if (other.textShadow_ != null) {
        if (textShadow_ == null) {
          TextShadow = new global::Spelldawn.Protos.TextShadow();
        }
        TextShadow.MergeFrom(other.TextShadow);
      }
      if (other.transformOrigin_ != null) {
        if (transformOrigin_ == null) {
          TransformOrigin = new global::Spelldawn.Protos.FlexTranslate();
        }
        TransformOrigin.MergeFrom(other.TransformOrigin);
      }
      transitionDelays_.Add(other.transitionDelays_);
      transitionDurations_.Add(other.transitionDurations_);
      transitionProperties_.Add(other.transitionProperties_);
      transitionEasingModes_.Add(other.transitionEasingModes_);
      if (other.translate_ != null) {
        if (translate_ == null) {
          Translate = new global::Spelldawn.Protos.FlexTranslate();
        }
        Translate.MergeFrom(other.Translate);
      }
      if (other.backgroundImageTintColor_ != null) {
        if (backgroundImageTintColor_ == null) {
          BackgroundImageTintColor = new global::Spelldawn.Protos.FlexColor();
        }
        BackgroundImageTintColor.MergeFrom(other.BackgroundImageTintColor);
      }
      if (other.BackgroundImageScaleMode != global::Spelldawn.Protos.ImageScaleMode.Unspecified) {
        BackgroundImageScaleMode = other.BackgroundImageScaleMode;
      }
      if (other.font_ != null) {
        if (font_ == null) {
          Font = new global::Spelldawn.Protos.FontAddress();
        }
        Font.MergeFrom(other.Font);
      }
      if (other.FontStyle != global::Spelldawn.Protos.FontStyle.Unspecified) {
        FontStyle = other.FontStyle;
      }
      if (other.OverflowClipBox != global::Spelldawn.Protos.OverflowClipBox.Unspecified) {
        OverflowClipBox = other.OverflowClipBox;
      }
      if (other.paragraphSpacing_ != null) {
        if (paragraphSpacing_ == null) {
          ParagraphSpacing = new global::Spelldawn.Protos.Dimension();
        }
        ParagraphSpacing.MergeFrom(other.ParagraphSpacing);
      }
      if (other.imageSlice_ != null) {
        if (imageSlice_ == null) {
          ImageSlice = new global::Spelldawn.Protos.ImageSlice();
        }
        ImageSlice.MergeFrom(other.ImageSlice);
      }
      if (other.TextAlign != global::Spelldawn.Protos.TextAlign.Unspecified) {
        TextAlign = other.TextAlign;
      }
      if (other.textOutlineColor_ != null) {
        if (textOutlineColor_ == null) {
          TextOutlineColor = new global::Spelldawn.Protos.FlexColor();
        }
        TextOutlineColor.MergeFrom(other.TextOutlineColor);
      }
      if (other.textOutlineWidth_ != null) {
        if (textOutlineWidth_ == null || other.TextOutlineWidth != 0F) {
          TextOutlineWidth = other.TextOutlineWidth;
        }
      }
      if (other.TextOverflowPosition != global::Spelldawn.Protos.TextOverflowPosition.Unspecified) {
        TextOverflowPosition = other.TextOverflowPosition;
      }
      if (other.Visibility != global::Spelldawn.Protos.FlexVisibility.Unspecified) {
        Visibility = other.Visibility;
      }
      if (other.WhiteSpace != global::Spelldawn.Protos.WhiteSpace.Unspecified) {
        WhiteSpace = other.WhiteSpace;
      }
      if (other.width_ != null) {
        if (width_ == null) {
          Width = new global::Spelldawn.Protos.Dimension();
        }
        Width.MergeFrom(other.Width);
      }
      if (other.wordSpacing_ != null) {
        if (wordSpacing_ == null) {
          WordSpacing = new global::Spelldawn.Protos.Dimension();
        }
        WordSpacing.MergeFrom(other.WordSpacing);
      }
      if (other.backgroundImageScaleMultiplier_ != null) {
        if (backgroundImageScaleMultiplier_ == null || other.BackgroundImageScaleMultiplier != 0F) {
          BackgroundImageScaleMultiplier = other.BackgroundImageScaleMultiplier;
        }
      }
      if (other.FixedBackgroundImageAspectRatio != false) {
        FixedBackgroundImageAspectRatio = other.FixedBackgroundImageAspectRatio;
      }
      if (other.PickingMode != global::Spelldawn.Protos.FlexPickingMode.Unspecified) {
        PickingMode = other.PickingMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AlignContent = (global::Spelldawn.Protos.FlexAlign) input.ReadEnum();
            break;
          }
          case 16: {
            AlignItems = (global::Spelldawn.Protos.FlexAlign) input.ReadEnum();
            break;
          }
          case 24: {
            AlignSelf = (global::Spelldawn.Protos.FlexAlign) input.ReadEnum();
            break;
          }
          case 34: {
            if (backgroundColor_ == null) {
              BackgroundColor = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(BackgroundColor);
            break;
          }
          case 42: {
            if (backgroundImage_ == null) {
              BackgroundImage = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(BackgroundImage);
            break;
          }
          case 50: {
            if (borderColor_ == null) {
              BorderColor = new global::Spelldawn.Protos.BorderColor();
            }
            input.ReadMessage(BorderColor);
            break;
          }
          case 58: {
            if (borderRadius_ == null) {
              BorderRadius = new global::Spelldawn.Protos.BorderRadius();
            }
            input.ReadMessage(BorderRadius);
            break;
          }
          case 66: {
            if (borderWidth_ == null) {
              BorderWidth = new global::Spelldawn.Protos.BorderWidth();
            }
            input.ReadMessage(BorderWidth);
            break;
          }
          case 74: {
            if (inset_ == null) {
              Inset = new global::Spelldawn.Protos.DimensionGroup();
            }
            input.ReadMessage(Inset);
            break;
          }
          case 82: {
            if (color_ == null) {
              Color = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(Color);
            break;
          }
          case 88: {
            Display = (global::Spelldawn.Protos.FlexDisplayStyle) input.ReadEnum();
            break;
          }
          case 98: {
            if (flexBasis_ == null) {
              FlexBasis = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(FlexBasis);
            break;
          }
          case 104: {
            FlexDirection = (global::Spelldawn.Protos.FlexDirection) input.ReadEnum();
            break;
          }
          case 114: {
            float? value = _single_flexGrow_codec.Read(input);
            if (flexGrow_ == null || value != 0F) {
              FlexGrow = value;
            }
            break;
          }
          case 122: {
            float? value = _single_flexShrink_codec.Read(input);
            if (flexShrink_ == null || value != 0F) {
              FlexShrink = value;
            }
            break;
          }
          case 128: {
            Wrap = (global::Spelldawn.Protos.FlexWrap) input.ReadEnum();
            break;
          }
          case 138: {
            if (fontSize_ == null) {
              FontSize = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(FontSize);
            break;
          }
          case 146: {
            if (height_ == null) {
              Height = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Height);
            break;
          }
          case 152: {
            JustifyContent = (global::Spelldawn.Protos.FlexJustify) input.ReadEnum();
            break;
          }
          case 162: {
            if (letterSpacing_ == null) {
              LetterSpacing = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(LetterSpacing);
            break;
          }
          case 170: {
            if (margin_ == null) {
              Margin = new global::Spelldawn.Protos.DimensionGroup();
            }
            input.ReadMessage(Margin);
            break;
          }
          case 178: {
            if (maxHeight_ == null) {
              MaxHeight = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(MaxHeight);
            break;
          }
          case 186: {
            if (maxWidth_ == null) {
              MaxWidth = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(MaxWidth);
            break;
          }
          case 194: {
            if (minHeight_ == null) {
              MinHeight = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(MinHeight);
            break;
          }
          case 202: {
            if (minWidth_ == null) {
              MinWidth = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(MinWidth);
            break;
          }
          case 210: {
            float? value = _single_opacity_codec.Read(input);
            if (opacity_ == null || value != 0F) {
              Opacity = value;
            }
            break;
          }
          case 216: {
            Overflow = (global::Spelldawn.Protos.FlexOverflow) input.ReadEnum();
            break;
          }
          case 226: {
            if (padding_ == null) {
              Padding = new global::Spelldawn.Protos.DimensionGroup();
            }
            input.ReadMessage(Padding);
            break;
          }
          case 232: {
            Position = (global::Spelldawn.Protos.FlexPosition) input.ReadEnum();
            break;
          }
          case 242: {
            if (rotate_ == null) {
              Rotate = new global::Spelldawn.Protos.FlexRotate();
            }
            input.ReadMessage(Rotate);
            break;
          }
          case 250: {
            if (scale_ == null) {
              Scale = new global::Spelldawn.Protos.FlexScale();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 256: {
            TextOverflow = (global::Spelldawn.Protos.TextOverflow) input.ReadEnum();
            break;
          }
          case 266: {
            if (textShadow_ == null) {
              TextShadow = new global::Spelldawn.Protos.TextShadow();
            }
            input.ReadMessage(TextShadow);
            break;
          }
          case 274: {
            if (transformOrigin_ == null) {
              TransformOrigin = new global::Spelldawn.Protos.FlexTranslate();
            }
            input.ReadMessage(TransformOrigin);
            break;
          }
          case 282: {
            transitionDelays_.AddEntriesFrom(input, _repeated_transitionDelays_codec);
            break;
          }
          case 290: {
            transitionDurations_.AddEntriesFrom(input, _repeated_transitionDurations_codec);
            break;
          }
          case 298: {
            transitionProperties_.AddEntriesFrom(input, _repeated_transitionProperties_codec);
            break;
          }
          case 306:
          case 304: {
            transitionEasingModes_.AddEntriesFrom(input, _repeated_transitionEasingModes_codec);
            break;
          }
          case 314: {
            if (translate_ == null) {
              Translate = new global::Spelldawn.Protos.FlexTranslate();
            }
            input.ReadMessage(Translate);
            break;
          }
          case 322: {
            if (backgroundImageTintColor_ == null) {
              BackgroundImageTintColor = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(BackgroundImageTintColor);
            break;
          }
          case 328: {
            BackgroundImageScaleMode = (global::Spelldawn.Protos.ImageScaleMode) input.ReadEnum();
            break;
          }
          case 338: {
            if (font_ == null) {
              Font = new global::Spelldawn.Protos.FontAddress();
            }
            input.ReadMessage(Font);
            break;
          }
          case 344: {
            FontStyle = (global::Spelldawn.Protos.FontStyle) input.ReadEnum();
            break;
          }
          case 352: {
            OverflowClipBox = (global::Spelldawn.Protos.OverflowClipBox) input.ReadEnum();
            break;
          }
          case 362: {
            if (paragraphSpacing_ == null) {
              ParagraphSpacing = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(ParagraphSpacing);
            break;
          }
          case 370: {
            if (imageSlice_ == null) {
              ImageSlice = new global::Spelldawn.Protos.ImageSlice();
            }
            input.ReadMessage(ImageSlice);
            break;
          }
          case 376: {
            TextAlign = (global::Spelldawn.Protos.TextAlign) input.ReadEnum();
            break;
          }
          case 386: {
            if (textOutlineColor_ == null) {
              TextOutlineColor = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(TextOutlineColor);
            break;
          }
          case 394: {
            float? value = _single_textOutlineWidth_codec.Read(input);
            if (textOutlineWidth_ == null || value != 0F) {
              TextOutlineWidth = value;
            }
            break;
          }
          case 400: {
            TextOverflowPosition = (global::Spelldawn.Protos.TextOverflowPosition) input.ReadEnum();
            break;
          }
          case 408: {
            Visibility = (global::Spelldawn.Protos.FlexVisibility) input.ReadEnum();
            break;
          }
          case 416: {
            WhiteSpace = (global::Spelldawn.Protos.WhiteSpace) input.ReadEnum();
            break;
          }
          case 426: {
            if (width_ == null) {
              Width = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Width);
            break;
          }
          case 434: {
            if (wordSpacing_ == null) {
              WordSpacing = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(WordSpacing);
            break;
          }
          case 442: {
            float? value = _single_backgroundImageScaleMultiplier_codec.Read(input);
            if (backgroundImageScaleMultiplier_ == null || value != 0F) {
              BackgroundImageScaleMultiplier = value;
            }
            break;
          }
          case 448: {
            FixedBackgroundImageAspectRatio = input.ReadBool();
            break;
          }
          case 456: {
            PickingMode = (global::Spelldawn.Protos.FlexPickingMode) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AlignContent = (global::Spelldawn.Protos.FlexAlign) input.ReadEnum();
            break;
          }
          case 16: {
            AlignItems = (global::Spelldawn.Protos.FlexAlign) input.ReadEnum();
            break;
          }
          case 24: {
            AlignSelf = (global::Spelldawn.Protos.FlexAlign) input.ReadEnum();
            break;
          }
          case 34: {
            if (backgroundColor_ == null) {
              BackgroundColor = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(BackgroundColor);
            break;
          }
          case 42: {
            if (backgroundImage_ == null) {
              BackgroundImage = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(BackgroundImage);
            break;
          }
          case 50: {
            if (borderColor_ == null) {
              BorderColor = new global::Spelldawn.Protos.BorderColor();
            }
            input.ReadMessage(BorderColor);
            break;
          }
          case 58: {
            if (borderRadius_ == null) {
              BorderRadius = new global::Spelldawn.Protos.BorderRadius();
            }
            input.ReadMessage(BorderRadius);
            break;
          }
          case 66: {
            if (borderWidth_ == null) {
              BorderWidth = new global::Spelldawn.Protos.BorderWidth();
            }
            input.ReadMessage(BorderWidth);
            break;
          }
          case 74: {
            if (inset_ == null) {
              Inset = new global::Spelldawn.Protos.DimensionGroup();
            }
            input.ReadMessage(Inset);
            break;
          }
          case 82: {
            if (color_ == null) {
              Color = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(Color);
            break;
          }
          case 88: {
            Display = (global::Spelldawn.Protos.FlexDisplayStyle) input.ReadEnum();
            break;
          }
          case 98: {
            if (flexBasis_ == null) {
              FlexBasis = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(FlexBasis);
            break;
          }
          case 104: {
            FlexDirection = (global::Spelldawn.Protos.FlexDirection) input.ReadEnum();
            break;
          }
          case 114: {
            float? value = _single_flexGrow_codec.Read(ref input);
            if (flexGrow_ == null || value != 0F) {
              FlexGrow = value;
            }
            break;
          }
          case 122: {
            float? value = _single_flexShrink_codec.Read(ref input);
            if (flexShrink_ == null || value != 0F) {
              FlexShrink = value;
            }
            break;
          }
          case 128: {
            Wrap = (global::Spelldawn.Protos.FlexWrap) input.ReadEnum();
            break;
          }
          case 138: {
            if (fontSize_ == null) {
              FontSize = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(FontSize);
            break;
          }
          case 146: {
            if (height_ == null) {
              Height = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Height);
            break;
          }
          case 152: {
            JustifyContent = (global::Spelldawn.Protos.FlexJustify) input.ReadEnum();
            break;
          }
          case 162: {
            if (letterSpacing_ == null) {
              LetterSpacing = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(LetterSpacing);
            break;
          }
          case 170: {
            if (margin_ == null) {
              Margin = new global::Spelldawn.Protos.DimensionGroup();
            }
            input.ReadMessage(Margin);
            break;
          }
          case 178: {
            if (maxHeight_ == null) {
              MaxHeight = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(MaxHeight);
            break;
          }
          case 186: {
            if (maxWidth_ == null) {
              MaxWidth = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(MaxWidth);
            break;
          }
          case 194: {
            if (minHeight_ == null) {
              MinHeight = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(MinHeight);
            break;
          }
          case 202: {
            if (minWidth_ == null) {
              MinWidth = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(MinWidth);
            break;
          }
          case 210: {
            float? value = _single_opacity_codec.Read(ref input);
            if (opacity_ == null || value != 0F) {
              Opacity = value;
            }
            break;
          }
          case 216: {
            Overflow = (global::Spelldawn.Protos.FlexOverflow) input.ReadEnum();
            break;
          }
          case 226: {
            if (padding_ == null) {
              Padding = new global::Spelldawn.Protos.DimensionGroup();
            }
            input.ReadMessage(Padding);
            break;
          }
          case 232: {
            Position = (global::Spelldawn.Protos.FlexPosition) input.ReadEnum();
            break;
          }
          case 242: {
            if (rotate_ == null) {
              Rotate = new global::Spelldawn.Protos.FlexRotate();
            }
            input.ReadMessage(Rotate);
            break;
          }
          case 250: {
            if (scale_ == null) {
              Scale = new global::Spelldawn.Protos.FlexScale();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 256: {
            TextOverflow = (global::Spelldawn.Protos.TextOverflow) input.ReadEnum();
            break;
          }
          case 266: {
            if (textShadow_ == null) {
              TextShadow = new global::Spelldawn.Protos.TextShadow();
            }
            input.ReadMessage(TextShadow);
            break;
          }
          case 274: {
            if (transformOrigin_ == null) {
              TransformOrigin = new global::Spelldawn.Protos.FlexTranslate();
            }
            input.ReadMessage(TransformOrigin);
            break;
          }
          case 282: {
            transitionDelays_.AddEntriesFrom(ref input, _repeated_transitionDelays_codec);
            break;
          }
          case 290: {
            transitionDurations_.AddEntriesFrom(ref input, _repeated_transitionDurations_codec);
            break;
          }
          case 298: {
            transitionProperties_.AddEntriesFrom(ref input, _repeated_transitionProperties_codec);
            break;
          }
          case 306:
          case 304: {
            transitionEasingModes_.AddEntriesFrom(ref input, _repeated_transitionEasingModes_codec);
            break;
          }
          case 314: {
            if (translate_ == null) {
              Translate = new global::Spelldawn.Protos.FlexTranslate();
            }
            input.ReadMessage(Translate);
            break;
          }
          case 322: {
            if (backgroundImageTintColor_ == null) {
              BackgroundImageTintColor = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(BackgroundImageTintColor);
            break;
          }
          case 328: {
            BackgroundImageScaleMode = (global::Spelldawn.Protos.ImageScaleMode) input.ReadEnum();
            break;
          }
          case 338: {
            if (font_ == null) {
              Font = new global::Spelldawn.Protos.FontAddress();
            }
            input.ReadMessage(Font);
            break;
          }
          case 344: {
            FontStyle = (global::Spelldawn.Protos.FontStyle) input.ReadEnum();
            break;
          }
          case 352: {
            OverflowClipBox = (global::Spelldawn.Protos.OverflowClipBox) input.ReadEnum();
            break;
          }
          case 362: {
            if (paragraphSpacing_ == null) {
              ParagraphSpacing = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(ParagraphSpacing);
            break;
          }
          case 370: {
            if (imageSlice_ == null) {
              ImageSlice = new global::Spelldawn.Protos.ImageSlice();
            }
            input.ReadMessage(ImageSlice);
            break;
          }
          case 376: {
            TextAlign = (global::Spelldawn.Protos.TextAlign) input.ReadEnum();
            break;
          }
          case 386: {
            if (textOutlineColor_ == null) {
              TextOutlineColor = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(TextOutlineColor);
            break;
          }
          case 394: {
            float? value = _single_textOutlineWidth_codec.Read(ref input);
            if (textOutlineWidth_ == null || value != 0F) {
              TextOutlineWidth = value;
            }
            break;
          }
          case 400: {
            TextOverflowPosition = (global::Spelldawn.Protos.TextOverflowPosition) input.ReadEnum();
            break;
          }
          case 408: {
            Visibility = (global::Spelldawn.Protos.FlexVisibility) input.ReadEnum();
            break;
          }
          case 416: {
            WhiteSpace = (global::Spelldawn.Protos.WhiteSpace) input.ReadEnum();
            break;
          }
          case 426: {
            if (width_ == null) {
              Width = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Width);
            break;
          }
          case 434: {
            if (wordSpacing_ == null) {
              WordSpacing = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(WordSpacing);
            break;
          }
          case 442: {
            float? value = _single_backgroundImageScaleMultiplier_codec.Read(ref input);
            if (backgroundImageScaleMultiplier_ == null || value != 0F) {
              BackgroundImageScaleMultiplier = value;
            }
            break;
          }
          case 448: {
            FixedBackgroundImageAspectRatio = input.ReadBool();
            break;
          }
          case 456: {
            PickingMode = (global::Spelldawn.Protos.FlexPickingMode) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Flexbox : pb::IMessage<Flexbox>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Flexbox> _parser = new pb::MessageParser<Flexbox>(() => new Flexbox());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Flexbox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Flexbox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Flexbox(Flexbox other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Flexbox Clone() {
      return new Flexbox(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Flexbox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Flexbox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Flexbox other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class Text : pb::IMessage<Text>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Text> _parser = new pb::MessageParser<Text>(() => new Text());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Text> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Text() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Text(Text other) : this() {
      label_ = other.label_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Text Clone() {
      return new Text(this);
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 1;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Text);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Text other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Label != other.Label) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Label.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Label);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Label.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Label);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Text other) {
      if (other == null) {
        return;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Label = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Label = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventHandlers : pb::IMessage<EventHandlers>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventHandlers> _parser = new pb::MessageParser<EventHandlers>(() => new EventHandlers());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventHandlers> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventHandlers() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventHandlers(EventHandlers other) : this() {
      onClick_ = other.onClick_ != null ? other.onClick_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventHandlers Clone() {
      return new EventHandlers(this);
    }

    /// <summary>Field number for the "on_click" field.</summary>
    public const int OnClickFieldNumber = 1;
    private global::Spelldawn.Protos.GameAction onClick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.GameAction OnClick {
      get { return onClick_; }
      set {
        onClick_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventHandlers);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventHandlers other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OnClick, other.OnClick)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (onClick_ != null) hash ^= OnClick.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (onClick_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OnClick);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (onClick_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OnClick);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (onClick_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OnClick);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventHandlers other) {
      if (other == null) {
        return;
      }
      if (other.onClick_ != null) {
        if (onClick_ == null) {
          OnClick = new global::Spelldawn.Protos.GameAction();
        }
        OnClick.MergeFrom(other.OnClick);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (onClick_ == null) {
              OnClick = new global::Spelldawn.Protos.GameAction();
            }
            input.ReadMessage(OnClick);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (onClick_ == null) {
              OnClick = new global::Spelldawn.Protos.GameAction();
            }
            input.ReadMessage(OnClick);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NodeType : pb::IMessage<NodeType>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NodeType> _parser = new pb::MessageParser<NodeType>(() => new NodeType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeType(NodeType other) : this() {
      switch (other.NodeTypeCase) {
        case NodeTypeOneofCase.Text:
          Text = other.Text.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeType Clone() {
      return new NodeType(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Text Text {
      get { return nodeTypeCase_ == NodeTypeOneofCase.Text ? (global::Spelldawn.Protos.Text) nodeType_ : null; }
      set {
        nodeType_ = value;
        nodeTypeCase_ = value == null ? NodeTypeOneofCase.None : NodeTypeOneofCase.Text;
      }
    }

    private object nodeType_;
    /// <summary>Enum of possible cases for the "node_type" oneof.</summary>
    public enum NodeTypeOneofCase {
      None = 0,
      Text = 1,
    }
    private NodeTypeOneofCase nodeTypeCase_ = NodeTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeTypeOneofCase NodeTypeCase {
      get { return nodeTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNodeType() {
      nodeTypeCase_ = NodeTypeOneofCase.None;
      nodeType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Text, other.Text)) return false;
      if (NodeTypeCase != other.NodeTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (nodeTypeCase_ == NodeTypeOneofCase.Text) hash ^= Text.GetHashCode();
      hash ^= (int) nodeTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (nodeTypeCase_ == NodeTypeOneofCase.Text) {
        output.WriteRawTag(10);
        output.WriteMessage(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (nodeTypeCase_ == NodeTypeOneofCase.Text) {
        output.WriteRawTag(10);
        output.WriteMessage(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (nodeTypeCase_ == NodeTypeOneofCase.Text) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeType other) {
      if (other == null) {
        return;
      }
      switch (other.NodeTypeCase) {
        case NodeTypeOneofCase.Text:
          if (Text == null) {
            Text = new global::Spelldawn.Protos.Text();
          }
          Text.MergeFrom(other.Text);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Spelldawn.Protos.Text subBuilder = new global::Spelldawn.Protos.Text();
            if (nodeTypeCase_ == NodeTypeOneofCase.Text) {
              subBuilder.MergeFrom(Text);
            }
            input.ReadMessage(subBuilder);
            Text = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Spelldawn.Protos.Text subBuilder = new global::Spelldawn.Protos.Text();
            if (nodeTypeCase_ == NodeTypeOneofCase.Text) {
              subBuilder.MergeFrom(Text);
            }
            input.ReadMessage(subBuilder);
            Text = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Node : pb::IMessage<Node>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Node> _parser = new pb::MessageParser<Node>(() => new Node());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Node> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node(Node other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      nodeType_ = other.nodeType_ != null ? other.nodeType_.Clone() : null;
      children_ = other.children_.Clone();
      eventHandlers_ = other.eventHandlers_ != null ? other.eventHandlers_.Clone() : null;
      style_ = other.style_ != null ? other.style_.Clone() : null;
      hoverStyle_ = other.hoverStyle_ != null ? other.hoverStyle_.Clone() : null;
      pressedStyle_ = other.pressedStyle_ != null ? other.pressedStyle_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node Clone() {
      return new Node(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///
    /// Used to identify this node in the hierarchy, should be unique among
    /// siblings. If not provided, index will be used instead.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///
    /// Used to identify this node in debugging tools
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node_type" field.</summary>
    public const int NodeTypeFieldNumber = 3;
    private global::Spelldawn.Protos.NodeType nodeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.NodeType NodeType {
      get { return nodeType_; }
      set {
        nodeType_ = value;
      }
    }

    /// <summary>Field number for the "children" field.</summary>
    public const int ChildrenFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.Node> _repeated_children_codec
        = pb::FieldCodec.ForMessage(34, global::Spelldawn.Protos.Node.Parser);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.Node> children_ = new pbc::RepeatedField<global::Spelldawn.Protos.Node>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.Node> Children {
      get { return children_; }
    }

    /// <summary>Field number for the "event_handlers" field.</summary>
    public const int EventHandlersFieldNumber = 5;
    private global::Spelldawn.Protos.EventHandlers eventHandlers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.EventHandlers EventHandlers {
      get { return eventHandlers_; }
      set {
        eventHandlers_ = value;
      }
    }

    /// <summary>Field number for the "style" field.</summary>
    public const int StyleFieldNumber = 6;
    private global::Spelldawn.Protos.FlexStyle style_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexStyle Style {
      get { return style_; }
      set {
        style_ = value;
      }
    }

    /// <summary>Field number for the "hover_style" field.</summary>
    public const int HoverStyleFieldNumber = 7;
    private global::Spelldawn.Protos.FlexStyle hoverStyle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexStyle HoverStyle {
      get { return hoverStyle_; }
      set {
        hoverStyle_ = value;
      }
    }

    /// <summary>Field number for the "pressed_style" field.</summary>
    public const int PressedStyleFieldNumber = 8;
    private global::Spelldawn.Protos.FlexStyle pressedStyle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexStyle PressedStyle {
      get { return pressedStyle_; }
      set {
        pressedStyle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Node);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Node other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(NodeType, other.NodeType)) return false;
      if(!children_.Equals(other.children_)) return false;
      if (!object.Equals(EventHandlers, other.EventHandlers)) return false;
      if (!object.Equals(Style, other.Style)) return false;
      if (!object.Equals(HoverStyle, other.HoverStyle)) return false;
      if (!object.Equals(PressedStyle, other.PressedStyle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (nodeType_ != null) hash ^= NodeType.GetHashCode();
      hash ^= children_.GetHashCode();
      if (eventHandlers_ != null) hash ^= EventHandlers.GetHashCode();
      if (style_ != null) hash ^= Style.GetHashCode();
      if (hoverStyle_ != null) hash ^= HoverStyle.GetHashCode();
      if (pressedStyle_ != null) hash ^= PressedStyle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (nodeType_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NodeType);
      }
      children_.WriteTo(output, _repeated_children_codec);
      if (eventHandlers_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(EventHandlers);
      }
      if (style_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Style);
      }
      if (hoverStyle_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(HoverStyle);
      }
      if (pressedStyle_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(PressedStyle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (nodeType_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NodeType);
      }
      children_.WriteTo(ref output, _repeated_children_codec);
      if (eventHandlers_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(EventHandlers);
      }
      if (style_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Style);
      }
      if (hoverStyle_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(HoverStyle);
      }
      if (pressedStyle_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(PressedStyle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (nodeType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeType);
      }
      size += children_.CalculateSize(_repeated_children_codec);
      if (eventHandlers_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventHandlers);
      }
      if (style_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Style);
      }
      if (hoverStyle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HoverStyle);
      }
      if (pressedStyle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PressedStyle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Node other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.nodeType_ != null) {
        if (nodeType_ == null) {
          NodeType = new global::Spelldawn.Protos.NodeType();
        }
        NodeType.MergeFrom(other.NodeType);
      }
      children_.Add(other.children_);
      if (other.eventHandlers_ != null) {
        if (eventHandlers_ == null) {
          EventHandlers = new global::Spelldawn.Protos.EventHandlers();
        }
        EventHandlers.MergeFrom(other.EventHandlers);
      }
      if (other.style_ != null) {
        if (style_ == null) {
          Style = new global::Spelldawn.Protos.FlexStyle();
        }
        Style.MergeFrom(other.Style);
      }
      if (other.hoverStyle_ != null) {
        if (hoverStyle_ == null) {
          HoverStyle = new global::Spelldawn.Protos.FlexStyle();
        }
        HoverStyle.MergeFrom(other.HoverStyle);
      }
      if (other.pressedStyle_ != null) {
        if (pressedStyle_ == null) {
          PressedStyle = new global::Spelldawn.Protos.FlexStyle();
        }
        PressedStyle.MergeFrom(other.PressedStyle);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (nodeType_ == null) {
              NodeType = new global::Spelldawn.Protos.NodeType();
            }
            input.ReadMessage(NodeType);
            break;
          }
          case 34: {
            children_.AddEntriesFrom(input, _repeated_children_codec);
            break;
          }
          case 42: {
            if (eventHandlers_ == null) {
              EventHandlers = new global::Spelldawn.Protos.EventHandlers();
            }
            input.ReadMessage(EventHandlers);
            break;
          }
          case 50: {
            if (style_ == null) {
              Style = new global::Spelldawn.Protos.FlexStyle();
            }
            input.ReadMessage(Style);
            break;
          }
          case 58: {
            if (hoverStyle_ == null) {
              HoverStyle = new global::Spelldawn.Protos.FlexStyle();
            }
            input.ReadMessage(HoverStyle);
            break;
          }
          case 66: {
            if (pressedStyle_ == null) {
              PressedStyle = new global::Spelldawn.Protos.FlexStyle();
            }
            input.ReadMessage(PressedStyle);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (nodeType_ == null) {
              NodeType = new global::Spelldawn.Protos.NodeType();
            }
            input.ReadMessage(NodeType);
            break;
          }
          case 34: {
            children_.AddEntriesFrom(ref input, _repeated_children_codec);
            break;
          }
          case 42: {
            if (eventHandlers_ == null) {
              EventHandlers = new global::Spelldawn.Protos.EventHandlers();
            }
            input.ReadMessage(EventHandlers);
            break;
          }
          case 50: {
            if (style_ == null) {
              Style = new global::Spelldawn.Protos.FlexStyle();
            }
            input.ReadMessage(Style);
            break;
          }
          case 58: {
            if (hoverStyle_ == null) {
              HoverStyle = new global::Spelldawn.Protos.FlexStyle();
            }
            input.ReadMessage(HoverStyle);
            break;
          }
          case 66: {
            if (pressedStyle_ == null) {
              PressedStyle = new global::Spelldawn.Protos.FlexStyle();
            }
            input.ReadMessage(PressedStyle);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameIdentifier : pb::IMessage<GameIdentifier>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameIdentifier> _parser = new pb::MessageParser<GameIdentifier>(() => new GameIdentifier());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameIdentifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameIdentifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameIdentifier(GameIdentifier other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameIdentifier Clone() {
      return new GameIdentifier(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private ulong value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameIdentifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameIdentifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0UL) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Value != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Value != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameIdentifier other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0UL) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Value = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CardIdentifier : pb::IMessage<CardIdentifier>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CardIdentifier> _parser = new pb::MessageParser<CardIdentifier>(() => new CardIdentifier());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardIdentifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardIdentifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardIdentifier(CardIdentifier other) : this() {
      side_ = other.side_;
      index_ = other.index_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardIdentifier Clone() {
      return new CardIdentifier(this);
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 1;
    private global::Spelldawn.Protos.PlayerSide side_ = global::Spelldawn.Protos.PlayerSide.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private uint index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardIdentifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardIdentifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Side != other.Side) return false;
      if (Index != other.Index) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Side != global::Spelldawn.Protos.PlayerSide.Unspecified) hash ^= Side.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Side != global::Spelldawn.Protos.PlayerSide.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Side);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Side != global::Spelldawn.Protos.PlayerSide.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Side);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Side != global::Spelldawn.Protos.PlayerSide.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardIdentifier other) {
      if (other == null) {
        return;
      }
      if (other.Side != global::Spelldawn.Protos.PlayerSide.Unspecified) {
        Side = other.Side;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Side = (global::Spelldawn.Protos.PlayerSide) input.ReadEnum();
            break;
          }
          case 16: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Side = (global::Spelldawn.Protos.PlayerSide) input.ReadEnum();
            break;
          }
          case 16: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameObjectIdentifier : pb::IMessage<GameObjectIdentifier>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameObjectIdentifier> _parser = new pb::MessageParser<GameObjectIdentifier>(() => new GameObjectIdentifier());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameObjectIdentifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameObjectIdentifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameObjectIdentifier(GameObjectIdentifier other) : this() {
      switch (other.IdCase) {
        case IdOneofCase.CardId:
          CardId = other.CardId.Clone();
          break;
        case IdOneofCase.Identity:
          Identity = other.Identity;
          break;
        case IdOneofCase.Deck:
          Deck = other.Deck;
          break;
        case IdOneofCase.DiscardPile:
          DiscardPile = other.DiscardPile;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameObjectIdentifier Clone() {
      return new GameObjectIdentifier(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardIdentifier CardId {
      get { return idCase_ == IdOneofCase.CardId ? (global::Spelldawn.Protos.CardIdentifier) id_ : null; }
      set {
        id_ = value;
        idCase_ = value == null ? IdOneofCase.None : IdOneofCase.CardId;
      }
    }

    /// <summary>Field number for the "identity" field.</summary>
    public const int IdentityFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName Identity {
      get { return idCase_ == IdOneofCase.Identity ? (global::Spelldawn.Protos.PlayerName) id_ : global::Spelldawn.Protos.PlayerName.Unspecified; }
      set {
        id_ = value;
        idCase_ = IdOneofCase.Identity;
      }
    }

    /// <summary>Field number for the "deck" field.</summary>
    public const int DeckFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName Deck {
      get { return idCase_ == IdOneofCase.Deck ? (global::Spelldawn.Protos.PlayerName) id_ : global::Spelldawn.Protos.PlayerName.Unspecified; }
      set {
        id_ = value;
        idCase_ = IdOneofCase.Deck;
      }
    }

    /// <summary>Field number for the "discard_pile" field.</summary>
    public const int DiscardPileFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName DiscardPile {
      get { return idCase_ == IdOneofCase.DiscardPile ? (global::Spelldawn.Protos.PlayerName) id_ : global::Spelldawn.Protos.PlayerName.Unspecified; }
      set {
        id_ = value;
        idCase_ = IdOneofCase.DiscardPile;
      }
    }

    private object id_;
    /// <summary>Enum of possible cases for the "id" oneof.</summary>
    public enum IdOneofCase {
      None = 0,
      CardId = 1,
      Identity = 2,
      Deck = 3,
      DiscardPile = 4,
    }
    private IdOneofCase idCase_ = IdOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdOneofCase IdCase {
      get { return idCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      idCase_ = IdOneofCase.None;
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameObjectIdentifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameObjectIdentifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CardId, other.CardId)) return false;
      if (Identity != other.Identity) return false;
      if (Deck != other.Deck) return false;
      if (DiscardPile != other.DiscardPile) return false;
      if (IdCase != other.IdCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (idCase_ == IdOneofCase.CardId) hash ^= CardId.GetHashCode();
      if (idCase_ == IdOneofCase.Identity) hash ^= Identity.GetHashCode();
      if (idCase_ == IdOneofCase.Deck) hash ^= Deck.GetHashCode();
      if (idCase_ == IdOneofCase.DiscardPile) hash ^= DiscardPile.GetHashCode();
      hash ^= (int) idCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (idCase_ == IdOneofCase.CardId) {
        output.WriteRawTag(10);
        output.WriteMessage(CardId);
      }
      if (idCase_ == IdOneofCase.Identity) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Identity);
      }
      if (idCase_ == IdOneofCase.Deck) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Deck);
      }
      if (idCase_ == IdOneofCase.DiscardPile) {
        output.WriteRawTag(32);
        output.WriteEnum((int) DiscardPile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (idCase_ == IdOneofCase.CardId) {
        output.WriteRawTag(10);
        output.WriteMessage(CardId);
      }
      if (idCase_ == IdOneofCase.Identity) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Identity);
      }
      if (idCase_ == IdOneofCase.Deck) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Deck);
      }
      if (idCase_ == IdOneofCase.DiscardPile) {
        output.WriteRawTag(32);
        output.WriteEnum((int) DiscardPile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (idCase_ == IdOneofCase.CardId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardId);
      }
      if (idCase_ == IdOneofCase.Identity) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Identity);
      }
      if (idCase_ == IdOneofCase.Deck) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Deck);
      }
      if (idCase_ == IdOneofCase.DiscardPile) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DiscardPile);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameObjectIdentifier other) {
      if (other == null) {
        return;
      }
      switch (other.IdCase) {
        case IdOneofCase.CardId:
          if (CardId == null) {
            CardId = new global::Spelldawn.Protos.CardIdentifier();
          }
          CardId.MergeFrom(other.CardId);
          break;
        case IdOneofCase.Identity:
          Identity = other.Identity;
          break;
        case IdOneofCase.Deck:
          Deck = other.Deck;
          break;
        case IdOneofCase.DiscardPile:
          DiscardPile = other.DiscardPile;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Spelldawn.Protos.CardIdentifier subBuilder = new global::Spelldawn.Protos.CardIdentifier();
            if (idCase_ == IdOneofCase.CardId) {
              subBuilder.MergeFrom(CardId);
            }
            input.ReadMessage(subBuilder);
            CardId = subBuilder;
            break;
          }
          case 16: {
            id_ = input.ReadEnum();
            idCase_ = IdOneofCase.Identity;
            break;
          }
          case 24: {
            id_ = input.ReadEnum();
            idCase_ = IdOneofCase.Deck;
            break;
          }
          case 32: {
            id_ = input.ReadEnum();
            idCase_ = IdOneofCase.DiscardPile;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Spelldawn.Protos.CardIdentifier subBuilder = new global::Spelldawn.Protos.CardIdentifier();
            if (idCase_ == IdOneofCase.CardId) {
              subBuilder.MergeFrom(CardId);
            }
            input.ReadMessage(subBuilder);
            CardId = subBuilder;
            break;
          }
          case 16: {
            id_ = input.ReadEnum();
            idCase_ = IdOneofCase.Identity;
            break;
          }
          case 24: {
            id_ = input.ReadEnum();
            idCase_ = IdOneofCase.Deck;
            break;
          }
          case 32: {
            id_ = input.ReadEnum();
            idCase_ = IdOneofCase.DiscardPile;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CardIcon : pb::IMessage<CardIcon>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CardIcon> _parser = new pb::MessageParser<CardIcon>(() => new CardIcon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardIcon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardIcon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardIcon(CardIcon other) : this() {
      background_ = other.background_ != null ? other.background_.Clone() : null;
      Text = other.Text;
      BackgroundScale = other.BackgroundScale;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardIcon Clone() {
      return new CardIcon(this);
    }

    /// <summary>Field number for the "background" field.</summary>
    public const int BackgroundFieldNumber = 1;
    private global::Spelldawn.Protos.SpriteAddress background_;
    /// <summary>
    /// Background for the icon. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.SpriteAddress Background {
      get { return background_; }
      set {
        background_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_text_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string text_;
    /// <summary>
    /// Text to display on the icon. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }


    /// <summary>Field number for the "background_scale" field.</summary>
    public const int BackgroundScaleFieldNumber = 3;
    private static readonly pb::FieldCodec<float?> _single_backgroundScale_codec = pb::FieldCodec.ForStructWrapper<float>(26);
    private float? backgroundScale_;
    /// <summary>
    /// Scale multiplier for the background image. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? BackgroundScale {
      get { return backgroundScale_; }
      set {
        backgroundScale_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardIcon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardIcon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Background, other.Background)) return false;
      if (Text != other.Text) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(BackgroundScale, other.BackgroundScale)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (background_ != null) hash ^= Background.GetHashCode();
      if (text_ != null) hash ^= Text.GetHashCode();
      if (backgroundScale_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(BackgroundScale);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (background_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Background);
      }
      if (text_ != null) {
        _single_text_codec.WriteTagAndValue(output, Text);
      }
      if (backgroundScale_ != null) {
        _single_backgroundScale_codec.WriteTagAndValue(output, BackgroundScale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (background_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Background);
      }
      if (text_ != null) {
        _single_text_codec.WriteTagAndValue(ref output, Text);
      }
      if (backgroundScale_ != null) {
        _single_backgroundScale_codec.WriteTagAndValue(ref output, BackgroundScale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (background_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Background);
      }
      if (text_ != null) {
        size += _single_text_codec.CalculateSizeWithTag(Text);
      }
      if (backgroundScale_ != null) {
        size += _single_backgroundScale_codec.CalculateSizeWithTag(BackgroundScale);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardIcon other) {
      if (other == null) {
        return;
      }
      if (other.background_ != null) {
        if (background_ == null) {
          Background = new global::Spelldawn.Protos.SpriteAddress();
        }
        Background.MergeFrom(other.Background);
      }
      if (other.text_ != null) {
        if (text_ == null || other.Text != "") {
          Text = other.Text;
        }
      }
      if (other.backgroundScale_ != null) {
        if (backgroundScale_ == null || other.BackgroundScale != 0F) {
          BackgroundScale = other.BackgroundScale;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (background_ == null) {
              Background = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(Background);
            break;
          }
          case 18: {
            string value = _single_text_codec.Read(input);
            if (text_ == null || value != "") {
              Text = value;
            }
            break;
          }
          case 26: {
            float? value = _single_backgroundScale_codec.Read(input);
            if (backgroundScale_ == null || value != 0F) {
              BackgroundScale = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (background_ == null) {
              Background = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(Background);
            break;
          }
          case 18: {
            string value = _single_text_codec.Read(ref input);
            if (text_ == null || value != "") {
              Text = value;
            }
            break;
          }
          case 26: {
            float? value = _single_backgroundScale_codec.Read(ref input);
            if (backgroundScale_ == null || value != 0F) {
              BackgroundScale = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CardIcons : pb::IMessage<CardIcons>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CardIcons> _parser = new pb::MessageParser<CardIcons>(() => new CardIcons());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardIcons> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardIcons() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardIcons(CardIcons other) : this() {
      topLeftIcon_ = other.topLeftIcon_ != null ? other.topLeftIcon_.Clone() : null;
      topRightIcon_ = other.topRightIcon_ != null ? other.topRightIcon_.Clone() : null;
      bottomRightIcon_ = other.bottomRightIcon_ != null ? other.bottomRightIcon_.Clone() : null;
      bottomLeftIcon_ = other.bottomLeftIcon_ != null ? other.bottomLeftIcon_.Clone() : null;
      arenaIcon_ = other.arenaIcon_ != null ? other.arenaIcon_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardIcons Clone() {
      return new CardIcons(this);
    }

    /// <summary>Field number for the "top_left_icon" field.</summary>
    public const int TopLeftIconFieldNumber = 1;
    private global::Spelldawn.Protos.CardIcon topLeftIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardIcon TopLeftIcon {
      get { return topLeftIcon_; }
      set {
        topLeftIcon_ = value;
      }
    }

    /// <summary>Field number for the "top_right_icon" field.</summary>
    public const int TopRightIconFieldNumber = 2;
    private global::Spelldawn.Protos.CardIcon topRightIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardIcon TopRightIcon {
      get { return topRightIcon_; }
      set {
        topRightIcon_ = value;
      }
    }

    /// <summary>Field number for the "bottom_right_icon" field.</summary>
    public const int BottomRightIconFieldNumber = 3;
    private global::Spelldawn.Protos.CardIcon bottomRightIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardIcon BottomRightIcon {
      get { return bottomRightIcon_; }
      set {
        bottomRightIcon_ = value;
      }
    }

    /// <summary>Field number for the "bottom_left_icon" field.</summary>
    public const int BottomLeftIconFieldNumber = 4;
    private global::Spelldawn.Protos.CardIcon bottomLeftIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardIcon BottomLeftIcon {
      get { return bottomLeftIcon_; }
      set {
        bottomLeftIcon_ = value;
      }
    }

    /// <summary>Field number for the "arena_icon" field.</summary>
    public const int ArenaIconFieldNumber = 5;
    private global::Spelldawn.Protos.CardIcon arenaIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardIcon ArenaIcon {
      get { return arenaIcon_; }
      set {
        arenaIcon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardIcons);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardIcons other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TopLeftIcon, other.TopLeftIcon)) return false;
      if (!object.Equals(TopRightIcon, other.TopRightIcon)) return false;
      if (!object.Equals(BottomRightIcon, other.BottomRightIcon)) return false;
      if (!object.Equals(BottomLeftIcon, other.BottomLeftIcon)) return false;
      if (!object.Equals(ArenaIcon, other.ArenaIcon)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (topLeftIcon_ != null) hash ^= TopLeftIcon.GetHashCode();
      if (topRightIcon_ != null) hash ^= TopRightIcon.GetHashCode();
      if (bottomRightIcon_ != null) hash ^= BottomRightIcon.GetHashCode();
      if (bottomLeftIcon_ != null) hash ^= BottomLeftIcon.GetHashCode();
      if (arenaIcon_ != null) hash ^= ArenaIcon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (topLeftIcon_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TopLeftIcon);
      }
      if (topRightIcon_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TopRightIcon);
      }
      if (bottomRightIcon_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BottomRightIcon);
      }
      if (bottomLeftIcon_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BottomLeftIcon);
      }
      if (arenaIcon_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ArenaIcon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (topLeftIcon_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TopLeftIcon);
      }
      if (topRightIcon_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TopRightIcon);
      }
      if (bottomRightIcon_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BottomRightIcon);
      }
      if (bottomLeftIcon_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BottomLeftIcon);
      }
      if (arenaIcon_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ArenaIcon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (topLeftIcon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TopLeftIcon);
      }
      if (topRightIcon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TopRightIcon);
      }
      if (bottomRightIcon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BottomRightIcon);
      }
      if (bottomLeftIcon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BottomLeftIcon);
      }
      if (arenaIcon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArenaIcon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardIcons other) {
      if (other == null) {
        return;
      }
      if (other.topLeftIcon_ != null) {
        if (topLeftIcon_ == null) {
          TopLeftIcon = new global::Spelldawn.Protos.CardIcon();
        }
        TopLeftIcon.MergeFrom(other.TopLeftIcon);
      }
      if (other.topRightIcon_ != null) {
        if (topRightIcon_ == null) {
          TopRightIcon = new global::Spelldawn.Protos.CardIcon();
        }
        TopRightIcon.MergeFrom(other.TopRightIcon);
      }
      if (other.bottomRightIcon_ != null) {
        if (bottomRightIcon_ == null) {
          BottomRightIcon = new global::Spelldawn.Protos.CardIcon();
        }
        BottomRightIcon.MergeFrom(other.BottomRightIcon);
      }
      if (other.bottomLeftIcon_ != null) {
        if (bottomLeftIcon_ == null) {
          BottomLeftIcon = new global::Spelldawn.Protos.CardIcon();
        }
        BottomLeftIcon.MergeFrom(other.BottomLeftIcon);
      }
      if (other.arenaIcon_ != null) {
        if (arenaIcon_ == null) {
          ArenaIcon = new global::Spelldawn.Protos.CardIcon();
        }
        ArenaIcon.MergeFrom(other.ArenaIcon);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (topLeftIcon_ == null) {
              TopLeftIcon = new global::Spelldawn.Protos.CardIcon();
            }
            input.ReadMessage(TopLeftIcon);
            break;
          }
          case 18: {
            if (topRightIcon_ == null) {
              TopRightIcon = new global::Spelldawn.Protos.CardIcon();
            }
            input.ReadMessage(TopRightIcon);
            break;
          }
          case 26: {
            if (bottomRightIcon_ == null) {
              BottomRightIcon = new global::Spelldawn.Protos.CardIcon();
            }
            input.ReadMessage(BottomRightIcon);
            break;
          }
          case 34: {
            if (bottomLeftIcon_ == null) {
              BottomLeftIcon = new global::Spelldawn.Protos.CardIcon();
            }
            input.ReadMessage(BottomLeftIcon);
            break;
          }
          case 42: {
            if (arenaIcon_ == null) {
              ArenaIcon = new global::Spelldawn.Protos.CardIcon();
            }
            input.ReadMessage(ArenaIcon);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (topLeftIcon_ == null) {
              TopLeftIcon = new global::Spelldawn.Protos.CardIcon();
            }
            input.ReadMessage(TopLeftIcon);
            break;
          }
          case 18: {
            if (topRightIcon_ == null) {
              TopRightIcon = new global::Spelldawn.Protos.CardIcon();
            }
            input.ReadMessage(TopRightIcon);
            break;
          }
          case 26: {
            if (bottomRightIcon_ == null) {
              BottomRightIcon = new global::Spelldawn.Protos.CardIcon();
            }
            input.ReadMessage(BottomRightIcon);
            break;
          }
          case 34: {
            if (bottomLeftIcon_ == null) {
              BottomLeftIcon = new global::Spelldawn.Protos.CardIcon();
            }
            input.ReadMessage(BottomLeftIcon);
            break;
          }
          case 42: {
            if (arenaIcon_ == null) {
              ArenaIcon = new global::Spelldawn.Protos.CardIcon();
            }
            input.ReadMessage(ArenaIcon);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CardTitle : pb::IMessage<CardTitle>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CardTitle> _parser = new pb::MessageParser<CardTitle>(() => new CardTitle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardTitle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardTitle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardTitle(CardTitle other) : this() {
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardTitle Clone() {
      return new CardTitle(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardTitle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardTitle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardTitle other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RulesText : pb::IMessage<RulesText>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RulesText> _parser = new pb::MessageParser<RulesText>(() => new RulesText());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RulesText> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RulesText() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RulesText(RulesText other) : this() {
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RulesText Clone() {
      return new RulesText(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RulesText);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RulesText other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RulesText other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// This card should prompt for a room to be played into. 
  /// </summary>
  public sealed partial class PickRoom : pb::IMessage<PickRoom>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PickRoom> _parser = new pb::MessageParser<PickRoom>(() => new PickRoom());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PickRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickRoom(PickRoom other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickRoom Clone() {
      return new PickRoom(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PickRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PickRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PickRoom other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CardTargeting : pb::IMessage<CardTargeting>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CardTargeting> _parser = new pb::MessageParser<CardTargeting>(() => new CardTargeting());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardTargeting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardTargeting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardTargeting(CardTargeting other) : this() {
      switch (other.TargetingCase) {
        case TargetingOneofCase.PickRoom:
          PickRoom = other.PickRoom.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardTargeting Clone() {
      return new CardTargeting(this);
    }

    /// <summary>Field number for the "pick_room" field.</summary>
    public const int PickRoomFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PickRoom PickRoom {
      get { return targetingCase_ == TargetingOneofCase.PickRoom ? (global::Spelldawn.Protos.PickRoom) targeting_ : null; }
      set {
        targeting_ = value;
        targetingCase_ = value == null ? TargetingOneofCase.None : TargetingOneofCase.PickRoom;
      }
    }

    private object targeting_;
    /// <summary>Enum of possible cases for the "targeting" oneof.</summary>
    public enum TargetingOneofCase {
      None = 0,
      PickRoom = 1,
    }
    private TargetingOneofCase targetingCase_ = TargetingOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetingOneofCase TargetingCase {
      get { return targetingCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargeting() {
      targetingCase_ = TargetingOneofCase.None;
      targeting_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardTargeting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardTargeting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PickRoom, other.PickRoom)) return false;
      if (TargetingCase != other.TargetingCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (targetingCase_ == TargetingOneofCase.PickRoom) hash ^= PickRoom.GetHashCode();
      hash ^= (int) targetingCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (targetingCase_ == TargetingOneofCase.PickRoom) {
        output.WriteRawTag(10);
        output.WriteMessage(PickRoom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (targetingCase_ == TargetingOneofCase.PickRoom) {
        output.WriteRawTag(10);
        output.WriteMessage(PickRoom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (targetingCase_ == TargetingOneofCase.PickRoom) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PickRoom);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardTargeting other) {
      if (other == null) {
        return;
      }
      switch (other.TargetingCase) {
        case TargetingOneofCase.PickRoom:
          if (PickRoom == null) {
            PickRoom = new global::Spelldawn.Protos.PickRoom();
          }
          PickRoom.MergeFrom(other.PickRoom);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Spelldawn.Protos.PickRoom subBuilder = new global::Spelldawn.Protos.PickRoom();
            if (targetingCase_ == TargetingOneofCase.PickRoom) {
              subBuilder.MergeFrom(PickRoom);
            }
            input.ReadMessage(subBuilder);
            PickRoom = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Spelldawn.Protos.PickRoom subBuilder = new global::Spelldawn.Protos.PickRoom();
            if (targetingCase_ == TargetingOneofCase.PickRoom) {
              subBuilder.MergeFrom(PickRoom);
            }
            input.ReadMessage(subBuilder);
            PickRoom = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionOffscreen : pb::IMessage<ObjectPositionOffscreen>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionOffscreen> _parser = new pb::MessageParser<ObjectPositionOffscreen>(() => new ObjectPositionOffscreen());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionOffscreen> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionOffscreen() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionOffscreen(ObjectPositionOffscreen other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionOffscreen Clone() {
      return new ObjectPositionOffscreen(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionOffscreen);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionOffscreen other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionOffscreen other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionRoom : pb::IMessage<ObjectPositionRoom>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionRoom> _parser = new pb::MessageParser<ObjectPositionRoom>(() => new ObjectPositionRoom());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionRoom(ObjectPositionRoom other) : this() {
      roomId_ = other.roomId_;
      roomLocation_ = other.roomLocation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionRoom Clone() {
      return new ObjectPositionRoom(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private global::Spelldawn.Protos.RoomIdentifier roomId_ = global::Spelldawn.Protos.RoomIdentifier.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RoomIdentifier RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "room_location" field.</summary>
    public const int RoomLocationFieldNumber = 2;
    private global::Spelldawn.Protos.ClientRoomLocation roomLocation_ = global::Spelldawn.Protos.ClientRoomLocation.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ClientRoomLocation RoomLocation {
      get { return roomLocation_; }
      set {
        roomLocation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (RoomLocation != other.RoomLocation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != global::Spelldawn.Protos.RoomIdentifier.Unspecified) hash ^= RoomId.GetHashCode();
      if (RoomLocation != global::Spelldawn.Protos.ClientRoomLocation.Unspecified) hash ^= RoomLocation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RoomId != global::Spelldawn.Protos.RoomIdentifier.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RoomId);
      }
      if (RoomLocation != global::Spelldawn.Protos.ClientRoomLocation.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RoomLocation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RoomId != global::Spelldawn.Protos.RoomIdentifier.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RoomId);
      }
      if (RoomLocation != global::Spelldawn.Protos.ClientRoomLocation.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RoomLocation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != global::Spelldawn.Protos.RoomIdentifier.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomId);
      }
      if (RoomLocation != global::Spelldawn.Protos.ClientRoomLocation.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomLocation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionRoom other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != global::Spelldawn.Protos.RoomIdentifier.Unspecified) {
        RoomId = other.RoomId;
      }
      if (other.RoomLocation != global::Spelldawn.Protos.ClientRoomLocation.Unspecified) {
        RoomLocation = other.RoomLocation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = (global::Spelldawn.Protos.RoomIdentifier) input.ReadEnum();
            break;
          }
          case 16: {
            RoomLocation = (global::Spelldawn.Protos.ClientRoomLocation) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RoomId = (global::Spelldawn.Protos.RoomIdentifier) input.ReadEnum();
            break;
          }
          case 16: {
            RoomLocation = (global::Spelldawn.Protos.ClientRoomLocation) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionItem : pb::IMessage<ObjectPositionItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionItem> _parser = new pb::MessageParser<ObjectPositionItem>(() => new ObjectPositionItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionItem(ObjectPositionItem other) : this() {
      itemLocation_ = other.itemLocation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionItem Clone() {
      return new ObjectPositionItem(this);
    }

    /// <summary>Field number for the "item_location" field.</summary>
    public const int ItemLocationFieldNumber = 1;
    private global::Spelldawn.Protos.ClientItemLocation itemLocation_ = global::Spelldawn.Protos.ClientItemLocation.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ClientItemLocation ItemLocation {
      get { return itemLocation_; }
      set {
        itemLocation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemLocation != other.ItemLocation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemLocation != global::Spelldawn.Protos.ClientItemLocation.Unspecified) hash ^= ItemLocation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ItemLocation != global::Spelldawn.Protos.ClientItemLocation.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ItemLocation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ItemLocation != global::Spelldawn.Protos.ClientItemLocation.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ItemLocation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemLocation != global::Spelldawn.Protos.ClientItemLocation.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ItemLocation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionItem other) {
      if (other == null) {
        return;
      }
      if (other.ItemLocation != global::Spelldawn.Protos.ClientItemLocation.Unspecified) {
        ItemLocation = other.ItemLocation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemLocation = (global::Spelldawn.Protos.ClientItemLocation) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ItemLocation = (global::Spelldawn.Protos.ClientItemLocation) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionStaging : pb::IMessage<ObjectPositionStaging>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionStaging> _parser = new pb::MessageParser<ObjectPositionStaging>(() => new ObjectPositionStaging());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionStaging> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionStaging() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionStaging(ObjectPositionStaging other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionStaging Clone() {
      return new ObjectPositionStaging(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionStaging);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionStaging other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionStaging other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionHand : pb::IMessage<ObjectPositionHand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionHand> _parser = new pb::MessageParser<ObjectPositionHand>(() => new ObjectPositionHand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionHand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionHand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionHand(ObjectPositionHand other) : this() {
      owner_ = other.owner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionHand Clone() {
      return new ObjectPositionHand(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::Spelldawn.Protos.PlayerName owner_ = global::Spelldawn.Protos.PlayerName.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionHand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionHand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Owner != other.Owner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionHand other) {
      if (other == null) {
        return;
      }
      if (other.Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        Owner = other.Owner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionDeck : pb::IMessage<ObjectPositionDeck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionDeck> _parser = new pb::MessageParser<ObjectPositionDeck>(() => new ObjectPositionDeck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionDeck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionDeck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionDeck(ObjectPositionDeck other) : this() {
      owner_ = other.owner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionDeck Clone() {
      return new ObjectPositionDeck(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::Spelldawn.Protos.PlayerName owner_ = global::Spelldawn.Protos.PlayerName.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionDeck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionDeck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Owner != other.Owner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionDeck other) {
      if (other == null) {
        return;
      }
      if (other.Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        Owner = other.Owner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionDeckContainer : pb::IMessage<ObjectPositionDeckContainer>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionDeckContainer> _parser = new pb::MessageParser<ObjectPositionDeckContainer>(() => new ObjectPositionDeckContainer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionDeckContainer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionDeckContainer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionDeckContainer(ObjectPositionDeckContainer other) : this() {
      owner_ = other.owner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionDeckContainer Clone() {
      return new ObjectPositionDeckContainer(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::Spelldawn.Protos.PlayerName owner_ = global::Spelldawn.Protos.PlayerName.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionDeckContainer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionDeckContainer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Owner != other.Owner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionDeckContainer other) {
      if (other == null) {
        return;
      }
      if (other.Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        Owner = other.Owner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionDiscardPile : pb::IMessage<ObjectPositionDiscardPile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionDiscardPile> _parser = new pb::MessageParser<ObjectPositionDiscardPile>(() => new ObjectPositionDiscardPile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionDiscardPile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionDiscardPile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionDiscardPile(ObjectPositionDiscardPile other) : this() {
      owner_ = other.owner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionDiscardPile Clone() {
      return new ObjectPositionDiscardPile(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::Spelldawn.Protos.PlayerName owner_ = global::Spelldawn.Protos.PlayerName.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionDiscardPile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionDiscardPile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Owner != other.Owner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionDiscardPile other) {
      if (other == null) {
        return;
      }
      if (other.Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        Owner = other.Owner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionDiscardPileContainer : pb::IMessage<ObjectPositionDiscardPileContainer>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionDiscardPileContainer> _parser = new pb::MessageParser<ObjectPositionDiscardPileContainer>(() => new ObjectPositionDiscardPileContainer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionDiscardPileContainer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionDiscardPileContainer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionDiscardPileContainer(ObjectPositionDiscardPileContainer other) : this() {
      owner_ = other.owner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionDiscardPileContainer Clone() {
      return new ObjectPositionDiscardPileContainer(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::Spelldawn.Protos.PlayerName owner_ = global::Spelldawn.Protos.PlayerName.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionDiscardPileContainer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionDiscardPileContainer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Owner != other.Owner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionDiscardPileContainer other) {
      if (other == null) {
        return;
      }
      if (other.Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        Owner = other.Owner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Large display of cards *while* the score animation is playing. After the
  /// score animation finishes, scored cards move to 'Identity' position.
  /// </summary>
  public sealed partial class ObjectPositionScoreAnimation : pb::IMessage<ObjectPositionScoreAnimation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionScoreAnimation> _parser = new pb::MessageParser<ObjectPositionScoreAnimation>(() => new ObjectPositionScoreAnimation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionScoreAnimation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionScoreAnimation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionScoreAnimation(ObjectPositionScoreAnimation other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionScoreAnimation Clone() {
      return new ObjectPositionScoreAnimation(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionScoreAnimation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionScoreAnimation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionScoreAnimation other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionRaid : pb::IMessage<ObjectPositionRaid>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionRaid> _parser = new pb::MessageParser<ObjectPositionRaid>(() => new ObjectPositionRaid());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionRaid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionRaid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionRaid(ObjectPositionRaid other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionRaid Clone() {
      return new ObjectPositionRaid(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionRaid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionRaid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionRaid other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionBrowser : pb::IMessage<ObjectPositionBrowser>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionBrowser> _parser = new pb::MessageParser<ObjectPositionBrowser>(() => new ObjectPositionBrowser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionBrowser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionBrowser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionBrowser(ObjectPositionBrowser other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionBrowser Clone() {
      return new ObjectPositionBrowser(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionBrowser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionBrowser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionBrowser other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionIdentity : pb::IMessage<ObjectPositionIdentity>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionIdentity> _parser = new pb::MessageParser<ObjectPositionIdentity>(() => new ObjectPositionIdentity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionIdentity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionIdentity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionIdentity(ObjectPositionIdentity other) : this() {
      owner_ = other.owner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionIdentity Clone() {
      return new ObjectPositionIdentity(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::Spelldawn.Protos.PlayerName owner_ = global::Spelldawn.Protos.PlayerName.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionIdentity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionIdentity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Owner != other.Owner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionIdentity other) {
      if (other == null) {
        return;
      }
      if (other.Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        Owner = other.Owner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionIdentityContainer : pb::IMessage<ObjectPositionIdentityContainer>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionIdentityContainer> _parser = new pb::MessageParser<ObjectPositionIdentityContainer>(() => new ObjectPositionIdentityContainer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionIdentityContainer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionIdentityContainer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionIdentityContainer(ObjectPositionIdentityContainer other) : this() {
      owner_ = other.owner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionIdentityContainer Clone() {
      return new ObjectPositionIdentityContainer(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::Spelldawn.Protos.PlayerName owner_ = global::Spelldawn.Protos.PlayerName.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionIdentityContainer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionIdentityContainer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Owner != other.Owner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionIdentityContainer other) {
      if (other == null) {
        return;
      }
      if (other.Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        Owner = other.Owner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionRewardChest : pb::IMessage<ObjectPositionRewardChest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionRewardChest> _parser = new pb::MessageParser<ObjectPositionRewardChest>(() => new ObjectPositionRewardChest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionRewardChest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionRewardChest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionRewardChest(ObjectPositionRewardChest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionRewardChest Clone() {
      return new ObjectPositionRewardChest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionRewardChest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionRewardChest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionRewardChest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPosition : pb::IMessage<ObjectPosition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPosition> _parser = new pb::MessageParser<ObjectPosition>(() => new ObjectPosition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPosition(ObjectPosition other) : this() {
      sortingKey_ = other.sortingKey_;
      switch (other.PositionCase) {
        case PositionOneofCase.Offscreen:
          Offscreen = other.Offscreen.Clone();
          break;
        case PositionOneofCase.Room:
          Room = other.Room.Clone();
          break;
        case PositionOneofCase.Item:
          Item = other.Item.Clone();
          break;
        case PositionOneofCase.Staging:
          Staging = other.Staging.Clone();
          break;
        case PositionOneofCase.Hand:
          Hand = other.Hand.Clone();
          break;
        case PositionOneofCase.Deck:
          Deck = other.Deck.Clone();
          break;
        case PositionOneofCase.DeckContainer:
          DeckContainer = other.DeckContainer.Clone();
          break;
        case PositionOneofCase.DiscardPile:
          DiscardPile = other.DiscardPile.Clone();
          break;
        case PositionOneofCase.DiscardPileContainer:
          DiscardPileContainer = other.DiscardPileContainer.Clone();
          break;
        case PositionOneofCase.ScoreAnimation:
          ScoreAnimation = other.ScoreAnimation.Clone();
          break;
        case PositionOneofCase.Raid:
          Raid = other.Raid.Clone();
          break;
        case PositionOneofCase.Browser:
          Browser = other.Browser.Clone();
          break;
        case PositionOneofCase.Identity:
          Identity = other.Identity.Clone();
          break;
        case PositionOneofCase.IdentityContainer:
          IdentityContainer = other.IdentityContainer.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPosition Clone() {
      return new ObjectPosition(this);
    }

    /// <summary>Field number for the "sorting_key" field.</summary>
    public const int SortingKeyFieldNumber = 1;
    private uint sortingKey_;
    /// <summary>
    ///
    /// A key by which to sort this object -- objects with higher sorting keys
    /// should be displayed 'on top of' or 'in front of' objects with lower
    /// sorting keys. In the case of ties, any ordering is acceptable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SortingKey {
      get { return sortingKey_; }
      set {
        sortingKey_ = value;
      }
    }

    /// <summary>Field number for the "offscreen" field.</summary>
    public const int OffscreenFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPositionOffscreen Offscreen {
      get { return positionCase_ == PositionOneofCase.Offscreen ? (global::Spelldawn.Protos.ObjectPositionOffscreen) position_ : null; }
      set {
        position_ = value;
        positionCase_ = value == null ? PositionOneofCase.None : PositionOneofCase.Offscreen;
      }
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPositionRoom Room {
      get { return positionCase_ == PositionOneofCase.Room ? (global::Spelldawn.Protos.ObjectPositionRoom) position_ : null; }
      set {
        position_ = value;
        positionCase_ = value == null ? PositionOneofCase.None : PositionOneofCase.Room;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPositionItem Item {
      get { return positionCase_ == PositionOneofCase.Item ? (global::Spelldawn.Protos.ObjectPositionItem) position_ : null; }
      set {
        position_ = value;
        positionCase_ = value == null ? PositionOneofCase.None : PositionOneofCase.Item;
      }
    }

    /// <summary>Field number for the "staging" field.</summary>
    public const int StagingFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPositionStaging Staging {
      get { return positionCase_ == PositionOneofCase.Staging ? (global::Spelldawn.Protos.ObjectPositionStaging) position_ : null; }
      set {
        position_ = value;
        positionCase_ = value == null ? PositionOneofCase.None : PositionOneofCase.Staging;
      }
    }

    /// <summary>Field number for the "hand" field.</summary>
    public const int HandFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPositionHand Hand {
      get { return positionCase_ == PositionOneofCase.Hand ? (global::Spelldawn.Protos.ObjectPositionHand) position_ : null; }
      set {
        position_ = value;
        positionCase_ = value == null ? PositionOneofCase.None : PositionOneofCase.Hand;
      }
    }

    /// <summary>Field number for the "deck" field.</summary>
    public const int DeckFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPositionDeck Deck {
      get { return positionCase_ == PositionOneofCase.Deck ? (global::Spelldawn.Protos.ObjectPositionDeck) position_ : null; }
      set {
        position_ = value;
        positionCase_ = value == null ? PositionOneofCase.None : PositionOneofCase.Deck;
      }
    }

    /// <summary>Field number for the "deck_container" field.</summary>
    public const int DeckContainerFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPositionDeckContainer DeckContainer {
      get { return positionCase_ == PositionOneofCase.DeckContainer ? (global::Spelldawn.Protos.ObjectPositionDeckContainer) position_ : null; }
      set {
        position_ = value;
        positionCase_ = value == null ? PositionOneofCase.None : PositionOneofCase.DeckContainer;
      }
    }

    /// <summary>Field number for the "discard_pile" field.</summary>
    public const int DiscardPileFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPositionDiscardPile DiscardPile {
      get { return positionCase_ == PositionOneofCase.DiscardPile ? (global::Spelldawn.Protos.ObjectPositionDiscardPile) position_ : null; }
      set {
        position_ = value;
        positionCase_ = value == null ? PositionOneofCase.None : PositionOneofCase.DiscardPile;
      }
    }

    /// <summary>Field number for the "discard_pile_container" field.</summary>
    public const int DiscardPileContainerFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPositionDiscardPileContainer DiscardPileContainer {
      get { return positionCase_ == PositionOneofCase.DiscardPileContainer ? (global::Spelldawn.Protos.ObjectPositionDiscardPileContainer) position_ : null; }
      set {
        position_ = value;
        positionCase_ = value == null ? PositionOneofCase.None : PositionOneofCase.DiscardPileContainer;
      }
    }

    /// <summary>Field number for the "score_animation" field.</summary>
    public const int ScoreAnimationFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPositionScoreAnimation ScoreAnimation {
      get { return positionCase_ == PositionOneofCase.ScoreAnimation ? (global::Spelldawn.Protos.ObjectPositionScoreAnimation) position_ : null; }
      set {
        position_ = value;
        positionCase_ = value == null ? PositionOneofCase.None : PositionOneofCase.ScoreAnimation;
      }
    }

    /// <summary>Field number for the "raid" field.</summary>
    public const int RaidFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPositionRaid Raid {
      get { return positionCase_ == PositionOneofCase.Raid ? (global::Spelldawn.Protos.ObjectPositionRaid) position_ : null; }
      set {
        position_ = value;
        positionCase_ = value == null ? PositionOneofCase.None : PositionOneofCase.Raid;
      }
    }

    /// <summary>Field number for the "browser" field.</summary>
    public const int BrowserFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPositionBrowser Browser {
      get { return positionCase_ == PositionOneofCase.Browser ? (global::Spelldawn.Protos.ObjectPositionBrowser) position_ : null; }
      set {
        position_ = value;
        positionCase_ = value == null ? PositionOneofCase.None : PositionOneofCase.Browser;
      }
    }

    /// <summary>Field number for the "identity" field.</summary>
    public const int IdentityFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPositionIdentity Identity {
      get { return positionCase_ == PositionOneofCase.Identity ? (global::Spelldawn.Protos.ObjectPositionIdentity) position_ : null; }
      set {
        position_ = value;
        positionCase_ = value == null ? PositionOneofCase.None : PositionOneofCase.Identity;
      }
    }

    /// <summary>Field number for the "identity_container" field.</summary>
    public const int IdentityContainerFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPositionIdentityContainer IdentityContainer {
      get { return positionCase_ == PositionOneofCase.IdentityContainer ? (global::Spelldawn.Protos.ObjectPositionIdentityContainer) position_ : null; }
      set {
        position_ = value;
        positionCase_ = value == null ? PositionOneofCase.None : PositionOneofCase.IdentityContainer;
      }
    }

    private object position_;
    /// <summary>Enum of possible cases for the "position" oneof.</summary>
    public enum PositionOneofCase {
      None = 0,
      Offscreen = 2,
      Room = 3,
      Item = 4,
      Staging = 5,
      Hand = 6,
      Deck = 7,
      DeckContainer = 8,
      DiscardPile = 9,
      DiscardPileContainer = 10,
      ScoreAnimation = 11,
      Raid = 12,
      Browser = 13,
      Identity = 14,
      IdentityContainer = 15,
    }
    private PositionOneofCase positionCase_ = PositionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionOneofCase PositionCase {
      get { return positionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPosition() {
      positionCase_ = PositionOneofCase.None;
      position_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SortingKey != other.SortingKey) return false;
      if (!object.Equals(Offscreen, other.Offscreen)) return false;
      if (!object.Equals(Room, other.Room)) return false;
      if (!object.Equals(Item, other.Item)) return false;
      if (!object.Equals(Staging, other.Staging)) return false;
      if (!object.Equals(Hand, other.Hand)) return false;
      if (!object.Equals(Deck, other.Deck)) return false;
      if (!object.Equals(DeckContainer, other.DeckContainer)) return false;
      if (!object.Equals(DiscardPile, other.DiscardPile)) return false;
      if (!object.Equals(DiscardPileContainer, other.DiscardPileContainer)) return false;
      if (!object.Equals(ScoreAnimation, other.ScoreAnimation)) return false;
      if (!object.Equals(Raid, other.Raid)) return false;
      if (!object.Equals(Browser, other.Browser)) return false;
      if (!object.Equals(Identity, other.Identity)) return false;
      if (!object.Equals(IdentityContainer, other.IdentityContainer)) return false;
      if (PositionCase != other.PositionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SortingKey != 0) hash ^= SortingKey.GetHashCode();
      if (positionCase_ == PositionOneofCase.Offscreen) hash ^= Offscreen.GetHashCode();
      if (positionCase_ == PositionOneofCase.Room) hash ^= Room.GetHashCode();
      if (positionCase_ == PositionOneofCase.Item) hash ^= Item.GetHashCode();
      if (positionCase_ == PositionOneofCase.Staging) hash ^= Staging.GetHashCode();
      if (positionCase_ == PositionOneofCase.Hand) hash ^= Hand.GetHashCode();
      if (positionCase_ == PositionOneofCase.Deck) hash ^= Deck.GetHashCode();
      if (positionCase_ == PositionOneofCase.DeckContainer) hash ^= DeckContainer.GetHashCode();
      if (positionCase_ == PositionOneofCase.DiscardPile) hash ^= DiscardPile.GetHashCode();
      if (positionCase_ == PositionOneofCase.DiscardPileContainer) hash ^= DiscardPileContainer.GetHashCode();
      if (positionCase_ == PositionOneofCase.ScoreAnimation) hash ^= ScoreAnimation.GetHashCode();
      if (positionCase_ == PositionOneofCase.Raid) hash ^= Raid.GetHashCode();
      if (positionCase_ == PositionOneofCase.Browser) hash ^= Browser.GetHashCode();
      if (positionCase_ == PositionOneofCase.Identity) hash ^= Identity.GetHashCode();
      if (positionCase_ == PositionOneofCase.IdentityContainer) hash ^= IdentityContainer.GetHashCode();
      hash ^= (int) positionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SortingKey != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SortingKey);
      }
      if (positionCase_ == PositionOneofCase.Offscreen) {
        output.WriteRawTag(18);
        output.WriteMessage(Offscreen);
      }
      if (positionCase_ == PositionOneofCase.Room) {
        output.WriteRawTag(26);
        output.WriteMessage(Room);
      }
      if (positionCase_ == PositionOneofCase.Item) {
        output.WriteRawTag(34);
        output.WriteMessage(Item);
      }
      if (positionCase_ == PositionOneofCase.Staging) {
        output.WriteRawTag(42);
        output.WriteMessage(Staging);
      }
      if (positionCase_ == PositionOneofCase.Hand) {
        output.WriteRawTag(50);
        output.WriteMessage(Hand);
      }
      if (positionCase_ == PositionOneofCase.Deck) {
        output.WriteRawTag(58);
        output.WriteMessage(Deck);
      }
      if (positionCase_ == PositionOneofCase.DeckContainer) {
        output.WriteRawTag(66);
        output.WriteMessage(DeckContainer);
      }
      if (positionCase_ == PositionOneofCase.DiscardPile) {
        output.WriteRawTag(74);
        output.WriteMessage(DiscardPile);
      }
      if (positionCase_ == PositionOneofCase.DiscardPileContainer) {
        output.WriteRawTag(82);
        output.WriteMessage(DiscardPileContainer);
      }
      if (positionCase_ == PositionOneofCase.ScoreAnimation) {
        output.WriteRawTag(90);
        output.WriteMessage(ScoreAnimation);
      }
      if (positionCase_ == PositionOneofCase.Raid) {
        output.WriteRawTag(98);
        output.WriteMessage(Raid);
      }
      if (positionCase_ == PositionOneofCase.Browser) {
        output.WriteRawTag(106);
        output.WriteMessage(Browser);
      }
      if (positionCase_ == PositionOneofCase.Identity) {
        output.WriteRawTag(114);
        output.WriteMessage(Identity);
      }
      if (positionCase_ == PositionOneofCase.IdentityContainer) {
        output.WriteRawTag(122);
        output.WriteMessage(IdentityContainer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SortingKey != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SortingKey);
      }
      if (positionCase_ == PositionOneofCase.Offscreen) {
        output.WriteRawTag(18);
        output.WriteMessage(Offscreen);
      }
      if (positionCase_ == PositionOneofCase.Room) {
        output.WriteRawTag(26);
        output.WriteMessage(Room);
      }
      if (positionCase_ == PositionOneofCase.Item) {
        output.WriteRawTag(34);
        output.WriteMessage(Item);
      }
      if (positionCase_ == PositionOneofCase.Staging) {
        output.WriteRawTag(42);
        output.WriteMessage(Staging);
      }
      if (positionCase_ == PositionOneofCase.Hand) {
        output.WriteRawTag(50);
        output.WriteMessage(Hand);
      }
      if (positionCase_ == PositionOneofCase.Deck) {
        output.WriteRawTag(58);
        output.WriteMessage(Deck);
      }
      if (positionCase_ == PositionOneofCase.DeckContainer) {
        output.WriteRawTag(66);
        output.WriteMessage(DeckContainer);
      }
      if (positionCase_ == PositionOneofCase.DiscardPile) {
        output.WriteRawTag(74);
        output.WriteMessage(DiscardPile);
      }
      if (positionCase_ == PositionOneofCase.DiscardPileContainer) {
        output.WriteRawTag(82);
        output.WriteMessage(DiscardPileContainer);
      }
      if (positionCase_ == PositionOneofCase.ScoreAnimation) {
        output.WriteRawTag(90);
        output.WriteMessage(ScoreAnimation);
      }
      if (positionCase_ == PositionOneofCase.Raid) {
        output.WriteRawTag(98);
        output.WriteMessage(Raid);
      }
      if (positionCase_ == PositionOneofCase.Browser) {
        output.WriteRawTag(106);
        output.WriteMessage(Browser);
      }
      if (positionCase_ == PositionOneofCase.Identity) {
        output.WriteRawTag(114);
        output.WriteMessage(Identity);
      }
      if (positionCase_ == PositionOneofCase.IdentityContainer) {
        output.WriteRawTag(122);
        output.WriteMessage(IdentityContainer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SortingKey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SortingKey);
      }
      if (positionCase_ == PositionOneofCase.Offscreen) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offscreen);
      }
      if (positionCase_ == PositionOneofCase.Room) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
      }
      if (positionCase_ == PositionOneofCase.Item) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (positionCase_ == PositionOneofCase.Staging) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Staging);
      }
      if (positionCase_ == PositionOneofCase.Hand) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hand);
      }
      if (positionCase_ == PositionOneofCase.Deck) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deck);
      }
      if (positionCase_ == PositionOneofCase.DeckContainer) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeckContainer);
      }
      if (positionCase_ == PositionOneofCase.DiscardPile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiscardPile);
      }
      if (positionCase_ == PositionOneofCase.DiscardPileContainer) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiscardPileContainer);
      }
      if (positionCase_ == PositionOneofCase.ScoreAnimation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScoreAnimation);
      }
      if (positionCase_ == PositionOneofCase.Raid) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Raid);
      }
      if (positionCase_ == PositionOneofCase.Browser) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Browser);
      }
      if (positionCase_ == PositionOneofCase.Identity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Identity);
      }
      if (positionCase_ == PositionOneofCase.IdentityContainer) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IdentityContainer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPosition other) {
      if (other == null) {
        return;
      }
      if (other.SortingKey != 0) {
        SortingKey = other.SortingKey;
      }
      switch (other.PositionCase) {
        case PositionOneofCase.Offscreen:
          if (Offscreen == null) {
            Offscreen = new global::Spelldawn.Protos.ObjectPositionOffscreen();
          }
          Offscreen.MergeFrom(other.Offscreen);
          break;
        case PositionOneofCase.Room:
          if (Room == null) {
            Room = new global::Spelldawn.Protos.ObjectPositionRoom();
          }
          Room.MergeFrom(other.Room);
          break;
        case PositionOneofCase.Item:
          if (Item == null) {
            Item = new global::Spelldawn.Protos.ObjectPositionItem();
          }
          Item.MergeFrom(other.Item);
          break;
        case PositionOneofCase.Staging:
          if (Staging == null) {
            Staging = new global::Spelldawn.Protos.ObjectPositionStaging();
          }
          Staging.MergeFrom(other.Staging);
          break;
        case PositionOneofCase.Hand:
          if (Hand == null) {
            Hand = new global::Spelldawn.Protos.ObjectPositionHand();
          }
          Hand.MergeFrom(other.Hand);
          break;
        case PositionOneofCase.Deck:
          if (Deck == null) {
            Deck = new global::Spelldawn.Protos.ObjectPositionDeck();
          }
          Deck.MergeFrom(other.Deck);
          break;
        case PositionOneofCase.DeckContainer:
          if (DeckContainer == null) {
            DeckContainer = new global::Spelldawn.Protos.ObjectPositionDeckContainer();
          }
          DeckContainer.MergeFrom(other.DeckContainer);
          break;
        case PositionOneofCase.DiscardPile:
          if (DiscardPile == null) {
            DiscardPile = new global::Spelldawn.Protos.ObjectPositionDiscardPile();
          }
          DiscardPile.MergeFrom(other.DiscardPile);
          break;
        case PositionOneofCase.DiscardPileContainer:
          if (DiscardPileContainer == null) {
            DiscardPileContainer = new global::Spelldawn.Protos.ObjectPositionDiscardPileContainer();
          }
          DiscardPileContainer.MergeFrom(other.DiscardPileContainer);
          break;
        case PositionOneofCase.ScoreAnimation:
          if (ScoreAnimation == null) {
            ScoreAnimation = new global::Spelldawn.Protos.ObjectPositionScoreAnimation();
          }
          ScoreAnimation.MergeFrom(other.ScoreAnimation);
          break;
        case PositionOneofCase.Raid:
          if (Raid == null) {
            Raid = new global::Spelldawn.Protos.ObjectPositionRaid();
          }
          Raid.MergeFrom(other.Raid);
          break;
        case PositionOneofCase.Browser:
          if (Browser == null) {
            Browser = new global::Spelldawn.Protos.ObjectPositionBrowser();
          }
          Browser.MergeFrom(other.Browser);
          break;
        case PositionOneofCase.Identity:
          if (Identity == null) {
            Identity = new global::Spelldawn.Protos.ObjectPositionIdentity();
          }
          Identity.MergeFrom(other.Identity);
          break;
        case PositionOneofCase.IdentityContainer:
          if (IdentityContainer == null) {
            IdentityContainer = new global::Spelldawn.Protos.ObjectPositionIdentityContainer();
          }
          IdentityContainer.MergeFrom(other.IdentityContainer);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SortingKey = input.ReadUInt32();
            break;
          }
          case 18: {
            global::Spelldawn.Protos.ObjectPositionOffscreen subBuilder = new global::Spelldawn.Protos.ObjectPositionOffscreen();
            if (positionCase_ == PositionOneofCase.Offscreen) {
              subBuilder.MergeFrom(Offscreen);
            }
            input.ReadMessage(subBuilder);
            Offscreen = subBuilder;
            break;
          }
          case 26: {
            global::Spelldawn.Protos.ObjectPositionRoom subBuilder = new global::Spelldawn.Protos.ObjectPositionRoom();
            if (positionCase_ == PositionOneofCase.Room) {
              subBuilder.MergeFrom(Room);
            }
            input.ReadMessage(subBuilder);
            Room = subBuilder;
            break;
          }
          case 34: {
            global::Spelldawn.Protos.ObjectPositionItem subBuilder = new global::Spelldawn.Protos.ObjectPositionItem();
            if (positionCase_ == PositionOneofCase.Item) {
              subBuilder.MergeFrom(Item);
            }
            input.ReadMessage(subBuilder);
            Item = subBuilder;
            break;
          }
          case 42: {
            global::Spelldawn.Protos.ObjectPositionStaging subBuilder = new global::Spelldawn.Protos.ObjectPositionStaging();
            if (positionCase_ == PositionOneofCase.Staging) {
              subBuilder.MergeFrom(Staging);
            }
            input.ReadMessage(subBuilder);
            Staging = subBuilder;
            break;
          }
          case 50: {
            global::Spelldawn.Protos.ObjectPositionHand subBuilder = new global::Spelldawn.Protos.ObjectPositionHand();
            if (positionCase_ == PositionOneofCase.Hand) {
              subBuilder.MergeFrom(Hand);
            }
            input.ReadMessage(subBuilder);
            Hand = subBuilder;
            break;
          }
          case 58: {
            global::Spelldawn.Protos.ObjectPositionDeck subBuilder = new global::Spelldawn.Protos.ObjectPositionDeck();
            if (positionCase_ == PositionOneofCase.Deck) {
              subBuilder.MergeFrom(Deck);
            }
            input.ReadMessage(subBuilder);
            Deck = subBuilder;
            break;
          }
          case 66: {
            global::Spelldawn.Protos.ObjectPositionDeckContainer subBuilder = new global::Spelldawn.Protos.ObjectPositionDeckContainer();
            if (positionCase_ == PositionOneofCase.DeckContainer) {
              subBuilder.MergeFrom(DeckContainer);
            }
            input.ReadMessage(subBuilder);
            DeckContainer = subBuilder;
            break;
          }
          case 74: {
            global::Spelldawn.Protos.ObjectPositionDiscardPile subBuilder = new global::Spelldawn.Protos.ObjectPositionDiscardPile();
            if (positionCase_ == PositionOneofCase.DiscardPile) {
              subBuilder.MergeFrom(DiscardPile);
            }
            input.ReadMessage(subBuilder);
            DiscardPile = subBuilder;
            break;
          }
          case 82: {
            global::Spelldawn.Protos.ObjectPositionDiscardPileContainer subBuilder = new global::Spelldawn.Protos.ObjectPositionDiscardPileContainer();
            if (positionCase_ == PositionOneofCase.DiscardPileContainer) {
              subBuilder.MergeFrom(DiscardPileContainer);
            }
            input.ReadMessage(subBuilder);
            DiscardPileContainer = subBuilder;
            break;
          }
          case 90: {
            global::Spelldawn.Protos.ObjectPositionScoreAnimation subBuilder = new global::Spelldawn.Protos.ObjectPositionScoreAnimation();
            if (positionCase_ == PositionOneofCase.ScoreAnimation) {
              subBuilder.MergeFrom(ScoreAnimation);
            }
            input.ReadMessage(subBuilder);
            ScoreAnimation = subBuilder;
            break;
          }
          case 98: {
            global::Spelldawn.Protos.ObjectPositionRaid subBuilder = new global::Spelldawn.Protos.ObjectPositionRaid();
            if (positionCase_ == PositionOneofCase.Raid) {
              subBuilder.MergeFrom(Raid);
            }
            input.ReadMessage(subBuilder);
            Raid = subBuilder;
            break;
          }
          case 106: {
            global::Spelldawn.Protos.ObjectPositionBrowser subBuilder = new global::Spelldawn.Protos.ObjectPositionBrowser();
            if (positionCase_ == PositionOneofCase.Browser) {
              subBuilder.MergeFrom(Browser);
            }
            input.ReadMessage(subBuilder);
            Browser = subBuilder;
            break;
          }
          case 114: {
            global::Spelldawn.Protos.ObjectPositionIdentity subBuilder = new global::Spelldawn.Protos.ObjectPositionIdentity();
            if (positionCase_ == PositionOneofCase.Identity) {
              subBuilder.MergeFrom(Identity);
            }
            input.ReadMessage(subBuilder);
            Identity = subBuilder;
            break;
          }
          case 122: {
            global::Spelldawn.Protos.ObjectPositionIdentityContainer subBuilder = new global::Spelldawn.Protos.ObjectPositionIdentityContainer();
            if (positionCase_ == PositionOneofCase.IdentityContainer) {
              subBuilder.MergeFrom(IdentityContainer);
            }
            input.ReadMessage(subBuilder);
            IdentityContainer = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SortingKey = input.ReadUInt32();
            break;
          }
          case 18: {
            global::Spelldawn.Protos.ObjectPositionOffscreen subBuilder = new global::Spelldawn.Protos.ObjectPositionOffscreen();
            if (positionCase_ == PositionOneofCase.Offscreen) {
              subBuilder.MergeFrom(Offscreen);
            }
            input.ReadMessage(subBuilder);
            Offscreen = subBuilder;
            break;
          }
          case 26: {
            global::Spelldawn.Protos.ObjectPositionRoom subBuilder = new global::Spelldawn.Protos.ObjectPositionRoom();
            if (positionCase_ == PositionOneofCase.Room) {
              subBuilder.MergeFrom(Room);
            }
            input.ReadMessage(subBuilder);
            Room = subBuilder;
            break;
          }
          case 34: {
            global::Spelldawn.Protos.ObjectPositionItem subBuilder = new global::Spelldawn.Protos.ObjectPositionItem();
            if (positionCase_ == PositionOneofCase.Item) {
              subBuilder.MergeFrom(Item);
            }
            input.ReadMessage(subBuilder);
            Item = subBuilder;
            break;
          }
          case 42: {
            global::Spelldawn.Protos.ObjectPositionStaging subBuilder = new global::Spelldawn.Protos.ObjectPositionStaging();
            if (positionCase_ == PositionOneofCase.Staging) {
              subBuilder.MergeFrom(Staging);
            }
            input.ReadMessage(subBuilder);
            Staging = subBuilder;
            break;
          }
          case 50: {
            global::Spelldawn.Protos.ObjectPositionHand subBuilder = new global::Spelldawn.Protos.ObjectPositionHand();
            if (positionCase_ == PositionOneofCase.Hand) {
              subBuilder.MergeFrom(Hand);
            }
            input.ReadMessage(subBuilder);
            Hand = subBuilder;
            break;
          }
          case 58: {
            global::Spelldawn.Protos.ObjectPositionDeck subBuilder = new global::Spelldawn.Protos.ObjectPositionDeck();
            if (positionCase_ == PositionOneofCase.Deck) {
              subBuilder.MergeFrom(Deck);
            }
            input.ReadMessage(subBuilder);
            Deck = subBuilder;
            break;
          }
          case 66: {
            global::Spelldawn.Protos.ObjectPositionDeckContainer subBuilder = new global::Spelldawn.Protos.ObjectPositionDeckContainer();
            if (positionCase_ == PositionOneofCase.DeckContainer) {
              subBuilder.MergeFrom(DeckContainer);
            }
            input.ReadMessage(subBuilder);
            DeckContainer = subBuilder;
            break;
          }
          case 74: {
            global::Spelldawn.Protos.ObjectPositionDiscardPile subBuilder = new global::Spelldawn.Protos.ObjectPositionDiscardPile();
            if (positionCase_ == PositionOneofCase.DiscardPile) {
              subBuilder.MergeFrom(DiscardPile);
            }
            input.ReadMessage(subBuilder);
            DiscardPile = subBuilder;
            break;
          }
          case 82: {
            global::Spelldawn.Protos.ObjectPositionDiscardPileContainer subBuilder = new global::Spelldawn.Protos.ObjectPositionDiscardPileContainer();
            if (positionCase_ == PositionOneofCase.DiscardPileContainer) {
              subBuilder.MergeFrom(DiscardPileContainer);
            }
            input.ReadMessage(subBuilder);
            DiscardPileContainer = subBuilder;
            break;
          }
          case 90: {
            global::Spelldawn.Protos.ObjectPositionScoreAnimation subBuilder = new global::Spelldawn.Protos.ObjectPositionScoreAnimation();
            if (positionCase_ == PositionOneofCase.ScoreAnimation) {
              subBuilder.MergeFrom(ScoreAnimation);
            }
            input.ReadMessage(subBuilder);
            ScoreAnimation = subBuilder;
            break;
          }
          case 98: {
            global::Spelldawn.Protos.ObjectPositionRaid subBuilder = new global::Spelldawn.Protos.ObjectPositionRaid();
            if (positionCase_ == PositionOneofCase.Raid) {
              subBuilder.MergeFrom(Raid);
            }
            input.ReadMessage(subBuilder);
            Raid = subBuilder;
            break;
          }
          case 106: {
            global::Spelldawn.Protos.ObjectPositionBrowser subBuilder = new global::Spelldawn.Protos.ObjectPositionBrowser();
            if (positionCase_ == PositionOneofCase.Browser) {
              subBuilder.MergeFrom(Browser);
            }
            input.ReadMessage(subBuilder);
            Browser = subBuilder;
            break;
          }
          case 114: {
            global::Spelldawn.Protos.ObjectPositionIdentity subBuilder = new global::Spelldawn.Protos.ObjectPositionIdentity();
            if (positionCase_ == PositionOneofCase.Identity) {
              subBuilder.MergeFrom(Identity);
            }
            input.ReadMessage(subBuilder);
            Identity = subBuilder;
            break;
          }
          case 122: {
            global::Spelldawn.Protos.ObjectPositionIdentityContainer subBuilder = new global::Spelldawn.Protos.ObjectPositionIdentityContainer();
            if (positionCase_ == PositionOneofCase.IdentityContainer) {
              subBuilder.MergeFrom(IdentityContainer);
            }
            input.ReadMessage(subBuilder);
            IdentityContainer = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RevealedCardView : pb::IMessage<RevealedCardView>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RevealedCardView> _parser = new pb::MessageParser<RevealedCardView>(() => new RevealedCardView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RevealedCardView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevealedCardView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevealedCardView(RevealedCardView other) : this() {
      cardFrame_ = other.cardFrame_ != null ? other.cardFrame_.Clone() : null;
      titleBackground_ = other.titleBackground_ != null ? other.titleBackground_.Clone() : null;
      jewel_ = other.jewel_ != null ? other.jewel_.Clone() : null;
      image_ = other.image_ != null ? other.image_.Clone() : null;
      title_ = other.title_ != null ? other.title_.Clone() : null;
      rulesText_ = other.rulesText_ != null ? other.rulesText_.Clone() : null;
      revealedInArena_ = other.revealedInArena_;
      targeting_ = other.targeting_ != null ? other.targeting_.Clone() : null;
      onReleasePosition_ = other.onReleasePosition_ != null ? other.onReleasePosition_.Clone() : null;
      canPlay_ = other.canPlay_;
      supplementalInfo_ = other.supplementalInfo_ != null ? other.supplementalInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevealedCardView Clone() {
      return new RevealedCardView(this);
    }

    /// <summary>Field number for the "card_frame" field.</summary>
    public const int CardFrameFieldNumber = 1;
    private global::Spelldawn.Protos.SpriteAddress cardFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.SpriteAddress CardFrame {
      get { return cardFrame_; }
      set {
        cardFrame_ = value;
      }
    }

    /// <summary>Field number for the "title_background" field.</summary>
    public const int TitleBackgroundFieldNumber = 2;
    private global::Spelldawn.Protos.SpriteAddress titleBackground_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.SpriteAddress TitleBackground {
      get { return titleBackground_; }
      set {
        titleBackground_ = value;
      }
    }

    /// <summary>Field number for the "jewel" field.</summary>
    public const int JewelFieldNumber = 3;
    private global::Spelldawn.Protos.SpriteAddress jewel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.SpriteAddress Jewel {
      get { return jewel_; }
      set {
        jewel_ = value;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 4;
    private global::Spelldawn.Protos.SpriteAddress image_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.SpriteAddress Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 5;
    private global::Spelldawn.Protos.CardTitle title_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardTitle Title {
      get { return title_; }
      set {
        title_ = value;
      }
    }

    /// <summary>Field number for the "rules_text" field.</summary>
    public const int RulesTextFieldNumber = 6;
    private global::Spelldawn.Protos.RulesText rulesText_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RulesText RulesText {
      get { return rulesText_; }
      set {
        rulesText_ = value;
      }
    }

    /// <summary>Field number for the "revealed_in_arena" field.</summary>
    public const int RevealedInArenaFieldNumber = 7;
    private bool revealedInArena_;
    /// <summary>
    ///
    /// True if this card should be displayed as visible to the opponent when in
    /// the arena.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RevealedInArena {
      get { return revealedInArena_; }
      set {
        revealedInArena_ = value;
      }
    }

    /// <summary>Field number for the "targeting" field.</summary>
    public const int TargetingFieldNumber = 8;
    private global::Spelldawn.Protos.CardTargeting targeting_;
    /// <summary>
    ///
    /// Custom targeting behavior for a card. If unspecified, no targeting UI
    /// is shown.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardTargeting Targeting {
      get { return targeting_; }
      set {
        targeting_ = value;
      }
    }

    /// <summary>Field number for the "on_release_position" field.</summary>
    public const int OnReleasePositionFieldNumber = 9;
    private global::Spelldawn.Protos.ObjectPosition onReleasePosition_;
    /// <summary>
    ///
    /// Where to move a played card. Information from 'targeting' will be
    /// incorporated to fill this in, e.g. if a room is targeted and
    /// ObjectPositionRoom is selected here with no RoomId, the targeted room
    /// is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPosition OnReleasePosition {
      get { return onReleasePosition_; }
      set {
        onReleasePosition_ = value;
      }
    }

    /// <summary>Field number for the "can_play" field.</summary>
    public const int CanPlayFieldNumber = 10;
    private bool canPlay_;
    /// <summary>
    /// Can this card currently be played when it is in hand? 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanPlay {
      get { return canPlay_; }
      set {
        canPlay_ = value;
      }
    }

    /// <summary>Field number for the "supplemental_info" field.</summary>
    public const int SupplementalInfoFieldNumber = 11;
    private global::Spelldawn.Protos.Node supplementalInfo_;
    /// <summary>
    ///
    /// Additional interface element rendered to the side of the card during an
    /// info zoom.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Node SupplementalInfo {
      get { return supplementalInfo_; }
      set {
        supplementalInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RevealedCardView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RevealedCardView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CardFrame, other.CardFrame)) return false;
      if (!object.Equals(TitleBackground, other.TitleBackground)) return false;
      if (!object.Equals(Jewel, other.Jewel)) return false;
      if (!object.Equals(Image, other.Image)) return false;
      if (!object.Equals(Title, other.Title)) return false;
      if (!object.Equals(RulesText, other.RulesText)) return false;
      if (RevealedInArena != other.RevealedInArena) return false;
      if (!object.Equals(Targeting, other.Targeting)) return false;
      if (!object.Equals(OnReleasePosition, other.OnReleasePosition)) return false;
      if (CanPlay != other.CanPlay) return false;
      if (!object.Equals(SupplementalInfo, other.SupplementalInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cardFrame_ != null) hash ^= CardFrame.GetHashCode();
      if (titleBackground_ != null) hash ^= TitleBackground.GetHashCode();
      if (jewel_ != null) hash ^= Jewel.GetHashCode();
      if (image_ != null) hash ^= Image.GetHashCode();
      if (title_ != null) hash ^= Title.GetHashCode();
      if (rulesText_ != null) hash ^= RulesText.GetHashCode();
      if (RevealedInArena != false) hash ^= RevealedInArena.GetHashCode();
      if (targeting_ != null) hash ^= Targeting.GetHashCode();
      if (onReleasePosition_ != null) hash ^= OnReleasePosition.GetHashCode();
      if (CanPlay != false) hash ^= CanPlay.GetHashCode();
      if (supplementalInfo_ != null) hash ^= SupplementalInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (cardFrame_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardFrame);
      }
      if (titleBackground_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TitleBackground);
      }
      if (jewel_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Jewel);
      }
      if (image_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Image);
      }
      if (title_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Title);
      }
      if (rulesText_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RulesText);
      }
      if (RevealedInArena != false) {
        output.WriteRawTag(56);
        output.WriteBool(RevealedInArena);
      }
      if (targeting_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Targeting);
      }
      if (onReleasePosition_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(OnReleasePosition);
      }
      if (CanPlay != false) {
        output.WriteRawTag(80);
        output.WriteBool(CanPlay);
      }
      if (supplementalInfo_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(SupplementalInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (cardFrame_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardFrame);
      }
      if (titleBackground_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TitleBackground);
      }
      if (jewel_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Jewel);
      }
      if (image_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Image);
      }
      if (title_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Title);
      }
      if (rulesText_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RulesText);
      }
      if (RevealedInArena != false) {
        output.WriteRawTag(56);
        output.WriteBool(RevealedInArena);
      }
      if (targeting_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Targeting);
      }
      if (onReleasePosition_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(OnReleasePosition);
      }
      if (CanPlay != false) {
        output.WriteRawTag(80);
        output.WriteBool(CanPlay);
      }
      if (supplementalInfo_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(SupplementalInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cardFrame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardFrame);
      }
      if (titleBackground_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TitleBackground);
      }
      if (jewel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Jewel);
      }
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (title_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Title);
      }
      if (rulesText_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RulesText);
      }
      if (RevealedInArena != false) {
        size += 1 + 1;
      }
      if (targeting_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Targeting);
      }
      if (onReleasePosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OnReleasePosition);
      }
      if (CanPlay != false) {
        size += 1 + 1;
      }
      if (supplementalInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SupplementalInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RevealedCardView other) {
      if (other == null) {
        return;
      }
      if (other.cardFrame_ != null) {
        if (cardFrame_ == null) {
          CardFrame = new global::Spelldawn.Protos.SpriteAddress();
        }
        CardFrame.MergeFrom(other.CardFrame);
      }
      if (other.titleBackground_ != null) {
        if (titleBackground_ == null) {
          TitleBackground = new global::Spelldawn.Protos.SpriteAddress();
        }
        TitleBackground.MergeFrom(other.TitleBackground);
      }
      if (other.jewel_ != null) {
        if (jewel_ == null) {
          Jewel = new global::Spelldawn.Protos.SpriteAddress();
        }
        Jewel.MergeFrom(other.Jewel);
      }
      if (other.image_ != null) {
        if (image_ == null) {
          Image = new global::Spelldawn.Protos.SpriteAddress();
        }
        Image.MergeFrom(other.Image);
      }
      if (other.title_ != null) {
        if (title_ == null) {
          Title = new global::Spelldawn.Protos.CardTitle();
        }
        Title.MergeFrom(other.Title);
      }
      if (other.rulesText_ != null) {
        if (rulesText_ == null) {
          RulesText = new global::Spelldawn.Protos.RulesText();
        }
        RulesText.MergeFrom(other.RulesText);
      }
      if (other.RevealedInArena != false) {
        RevealedInArena = other.RevealedInArena;
      }
      if (other.targeting_ != null) {
        if (targeting_ == null) {
          Targeting = new global::Spelldawn.Protos.CardTargeting();
        }
        Targeting.MergeFrom(other.Targeting);
      }
      if (other.onReleasePosition_ != null) {
        if (onReleasePosition_ == null) {
          OnReleasePosition = new global::Spelldawn.Protos.ObjectPosition();
        }
        OnReleasePosition.MergeFrom(other.OnReleasePosition);
      }
      if (other.CanPlay != false) {
        CanPlay = other.CanPlay;
      }
      if (other.supplementalInfo_ != null) {
        if (supplementalInfo_ == null) {
          SupplementalInfo = new global::Spelldawn.Protos.Node();
        }
        SupplementalInfo.MergeFrom(other.SupplementalInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cardFrame_ == null) {
              CardFrame = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(CardFrame);
            break;
          }
          case 18: {
            if (titleBackground_ == null) {
              TitleBackground = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(TitleBackground);
            break;
          }
          case 26: {
            if (jewel_ == null) {
              Jewel = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(Jewel);
            break;
          }
          case 34: {
            if (image_ == null) {
              Image = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(Image);
            break;
          }
          case 42: {
            if (title_ == null) {
              Title = new global::Spelldawn.Protos.CardTitle();
            }
            input.ReadMessage(Title);
            break;
          }
          case 50: {
            if (rulesText_ == null) {
              RulesText = new global::Spelldawn.Protos.RulesText();
            }
            input.ReadMessage(RulesText);
            break;
          }
          case 56: {
            RevealedInArena = input.ReadBool();
            break;
          }
          case 66: {
            if (targeting_ == null) {
              Targeting = new global::Spelldawn.Protos.CardTargeting();
            }
            input.ReadMessage(Targeting);
            break;
          }
          case 74: {
            if (onReleasePosition_ == null) {
              OnReleasePosition = new global::Spelldawn.Protos.ObjectPosition();
            }
            input.ReadMessage(OnReleasePosition);
            break;
          }
          case 80: {
            CanPlay = input.ReadBool();
            break;
          }
          case 90: {
            if (supplementalInfo_ == null) {
              SupplementalInfo = new global::Spelldawn.Protos.Node();
            }
            input.ReadMessage(SupplementalInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (cardFrame_ == null) {
              CardFrame = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(CardFrame);
            break;
          }
          case 18: {
            if (titleBackground_ == null) {
              TitleBackground = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(TitleBackground);
            break;
          }
          case 26: {
            if (jewel_ == null) {
              Jewel = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(Jewel);
            break;
          }
          case 34: {
            if (image_ == null) {
              Image = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(Image);
            break;
          }
          case 42: {
            if (title_ == null) {
              Title = new global::Spelldawn.Protos.CardTitle();
            }
            input.ReadMessage(Title);
            break;
          }
          case 50: {
            if (rulesText_ == null) {
              RulesText = new global::Spelldawn.Protos.RulesText();
            }
            input.ReadMessage(RulesText);
            break;
          }
          case 56: {
            RevealedInArena = input.ReadBool();
            break;
          }
          case 66: {
            if (targeting_ == null) {
              Targeting = new global::Spelldawn.Protos.CardTargeting();
            }
            input.ReadMessage(Targeting);
            break;
          }
          case 74: {
            if (onReleasePosition_ == null) {
              OnReleasePosition = new global::Spelldawn.Protos.ObjectPosition();
            }
            input.ReadMessage(OnReleasePosition);
            break;
          }
          case 80: {
            CanPlay = input.ReadBool();
            break;
          }
          case 90: {
            if (supplementalInfo_ == null) {
              SupplementalInfo = new global::Spelldawn.Protos.Node();
            }
            input.ReadMessage(SupplementalInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CardView : pb::IMessage<CardView>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CardView> _parser = new pb::MessageParser<CardView>(() => new CardView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardView(CardView other) : this() {
      cardId_ = other.cardId_ != null ? other.cardId_.Clone() : null;
      cardIcons_ = other.cardIcons_ != null ? other.cardIcons_.Clone() : null;
      arenaFrame_ = other.arenaFrame_ != null ? other.arenaFrame_.Clone() : null;
      owningPlayer_ = other.owningPlayer_;
      revealedCard_ = other.revealedCard_ != null ? other.revealedCard_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardView Clone() {
      return new CardView(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private global::Spelldawn.Protos.CardIdentifier cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardIdentifier CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "card_icons" field.</summary>
    public const int CardIconsFieldNumber = 2;
    private global::Spelldawn.Protos.CardIcons cardIcons_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardIcons CardIcons {
      get { return cardIcons_; }
      set {
        cardIcons_ = value;
      }
    }

    /// <summary>Field number for the "arena_frame" field.</summary>
    public const int ArenaFrameFieldNumber = 3;
    private global::Spelldawn.Protos.SpriteAddress arenaFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.SpriteAddress ArenaFrame {
      get { return arenaFrame_; }
      set {
        arenaFrame_ = value;
      }
    }

    /// <summary>Field number for the "owning_player" field.</summary>
    public const int OwningPlayerFieldNumber = 4;
    private global::Spelldawn.Protos.PlayerName owningPlayer_ = global::Spelldawn.Protos.PlayerName.Unspecified;
    /// <summary>
    /// Used to e.g. determine which card back to display for this card. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName OwningPlayer {
      get { return owningPlayer_; }
      set {
        owningPlayer_ = value;
      }
    }

    /// <summary>Field number for the "revealed_card" field.</summary>
    public const int RevealedCardFieldNumber = 5;
    private global::Spelldawn.Protos.RevealedCardView revealedCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RevealedCardView RevealedCard {
      get { return revealedCard_; }
      set {
        revealedCard_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CardId, other.CardId)) return false;
      if (!object.Equals(CardIcons, other.CardIcons)) return false;
      if (!object.Equals(ArenaFrame, other.ArenaFrame)) return false;
      if (OwningPlayer != other.OwningPlayer) return false;
      if (!object.Equals(RevealedCard, other.RevealedCard)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cardId_ != null) hash ^= CardId.GetHashCode();
      if (cardIcons_ != null) hash ^= CardIcons.GetHashCode();
      if (arenaFrame_ != null) hash ^= ArenaFrame.GetHashCode();
      if (OwningPlayer != global::Spelldawn.Protos.PlayerName.Unspecified) hash ^= OwningPlayer.GetHashCode();
      if (revealedCard_ != null) hash ^= RevealedCard.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (cardId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardId);
      }
      if (cardIcons_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CardIcons);
      }
      if (arenaFrame_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ArenaFrame);
      }
      if (OwningPlayer != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) OwningPlayer);
      }
      if (revealedCard_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RevealedCard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (cardId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardId);
      }
      if (cardIcons_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CardIcons);
      }
      if (arenaFrame_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ArenaFrame);
      }
      if (OwningPlayer != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) OwningPlayer);
      }
      if (revealedCard_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RevealedCard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cardId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardId);
      }
      if (cardIcons_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardIcons);
      }
      if (arenaFrame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArenaFrame);
      }
      if (OwningPlayer != global::Spelldawn.Protos.PlayerName.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OwningPlayer);
      }
      if (revealedCard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RevealedCard);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardView other) {
      if (other == null) {
        return;
      }
      if (other.cardId_ != null) {
        if (cardId_ == null) {
          CardId = new global::Spelldawn.Protos.CardIdentifier();
        }
        CardId.MergeFrom(other.CardId);
      }
      if (other.cardIcons_ != null) {
        if (cardIcons_ == null) {
          CardIcons = new global::Spelldawn.Protos.CardIcons();
        }
        CardIcons.MergeFrom(other.CardIcons);
      }
      if (other.arenaFrame_ != null) {
        if (arenaFrame_ == null) {
          ArenaFrame = new global::Spelldawn.Protos.SpriteAddress();
        }
        ArenaFrame.MergeFrom(other.ArenaFrame);
      }
      if (other.OwningPlayer != global::Spelldawn.Protos.PlayerName.Unspecified) {
        OwningPlayer = other.OwningPlayer;
      }
      if (other.revealedCard_ != null) {
        if (revealedCard_ == null) {
          RevealedCard = new global::Spelldawn.Protos.RevealedCardView();
        }
        RevealedCard.MergeFrom(other.RevealedCard);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cardId_ == null) {
              CardId = new global::Spelldawn.Protos.CardIdentifier();
            }
            input.ReadMessage(CardId);
            break;
          }
          case 18: {
            if (cardIcons_ == null) {
              CardIcons = new global::Spelldawn.Protos.CardIcons();
            }
            input.ReadMessage(CardIcons);
            break;
          }
          case 26: {
            if (arenaFrame_ == null) {
              ArenaFrame = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(ArenaFrame);
            break;
          }
          case 32: {
            OwningPlayer = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
          case 42: {
            if (revealedCard_ == null) {
              RevealedCard = new global::Spelldawn.Protos.RevealedCardView();
            }
            input.ReadMessage(RevealedCard);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (cardId_ == null) {
              CardId = new global::Spelldawn.Protos.CardIdentifier();
            }
            input.ReadMessage(CardId);
            break;
          }
          case 18: {
            if (cardIcons_ == null) {
              CardIcons = new global::Spelldawn.Protos.CardIcons();
            }
            input.ReadMessage(CardIcons);
            break;
          }
          case 26: {
            if (arenaFrame_ == null) {
              ArenaFrame = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(ArenaFrame);
            break;
          }
          case 32: {
            OwningPlayer = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
          case 42: {
            if (revealedCard_ == null) {
              RevealedCard = new global::Spelldawn.Protos.RevealedCardView();
            }
            input.ReadMessage(RevealedCard);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HandView : pb::IMessage<HandView>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HandView> _parser = new pb::MessageParser<HandView>(() => new HandView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HandView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandView(HandView other) : this() {
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandView Clone() {
      return new HandView(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.CardView> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::Spelldawn.Protos.CardView.Parser);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.CardView> cards_ = new pbc::RepeatedField<global::Spelldawn.Protos.CardView>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.CardView> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HandView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HandView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      cards_.WriteTo(ref output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HandView other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            cards_.AddEntriesFrom(ref input, _repeated_cards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DiscardPileView : pb::IMessage<DiscardPileView>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DiscardPileView> _parser = new pb::MessageParser<DiscardPileView>(() => new DiscardPileView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiscardPileView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscardPileView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscardPileView(DiscardPileView other) : this() {
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscardPileView Clone() {
      return new DiscardPileView(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.CardView> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::Spelldawn.Protos.CardView.Parser);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.CardView> cards_ = new pbc::RepeatedField<global::Spelldawn.Protos.CardView>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.CardView> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiscardPileView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiscardPileView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      cards_.WriteTo(ref output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiscardPileView other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            cards_.AddEntriesFrom(ref input, _repeated_cards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      Name = other.Name;
      portrait_ = other.portrait_ != null ? other.portrait_.Clone() : null;
      portraitFrame_ = other.portraitFrame_ != null ? other.portraitFrame_.Clone() : null;
      cardBack_ = other.cardBack_ != null ? other.cardBack_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _single_name_codec = pb::FieldCodec.ForClassWrapper<string>(10);
    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }


    /// <summary>Field number for the "portrait" field.</summary>
    public const int PortraitFieldNumber = 2;
    private global::Spelldawn.Protos.SpriteAddress portrait_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.SpriteAddress Portrait {
      get { return portrait_; }
      set {
        portrait_ = value;
      }
    }

    /// <summary>Field number for the "portrait_frame" field.</summary>
    public const int PortraitFrameFieldNumber = 3;
    private global::Spelldawn.Protos.SpriteAddress portraitFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.SpriteAddress PortraitFrame {
      get { return portraitFrame_; }
      set {
        portraitFrame_ = value;
      }
    }

    /// <summary>Field number for the "card_back" field.</summary>
    public const int CardBackFieldNumber = 4;
    private global::Spelldawn.Protos.SpriteAddress cardBack_;
    /// <summary>
    /// Card back asset to use for this player's cards. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.SpriteAddress CardBack {
      get { return cardBack_; }
      set {
        cardBack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Portrait, other.Portrait)) return false;
      if (!object.Equals(PortraitFrame, other.PortraitFrame)) return false;
      if (!object.Equals(CardBack, other.CardBack)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (name_ != null) hash ^= Name.GetHashCode();
      if (portrait_ != null) hash ^= Portrait.GetHashCode();
      if (portraitFrame_ != null) hash ^= PortraitFrame.GetHashCode();
      if (cardBack_ != null) hash ^= CardBack.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (name_ != null) {
        _single_name_codec.WriteTagAndValue(output, Name);
      }
      if (portrait_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Portrait);
      }
      if (portraitFrame_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PortraitFrame);
      }
      if (cardBack_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CardBack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (name_ != null) {
        _single_name_codec.WriteTagAndValue(ref output, Name);
      }
      if (portrait_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Portrait);
      }
      if (portraitFrame_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PortraitFrame);
      }
      if (cardBack_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CardBack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (name_ != null) {
        size += _single_name_codec.CalculateSizeWithTag(Name);
      }
      if (portrait_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Portrait);
      }
      if (portraitFrame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PortraitFrame);
      }
      if (cardBack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardBack);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.name_ != null) {
        if (name_ == null || other.Name != "") {
          Name = other.Name;
        }
      }
      if (other.portrait_ != null) {
        if (portrait_ == null) {
          Portrait = new global::Spelldawn.Protos.SpriteAddress();
        }
        Portrait.MergeFrom(other.Portrait);
      }
      if (other.portraitFrame_ != null) {
        if (portraitFrame_ == null) {
          PortraitFrame = new global::Spelldawn.Protos.SpriteAddress();
        }
        PortraitFrame.MergeFrom(other.PortraitFrame);
      }
      if (other.cardBack_ != null) {
        if (cardBack_ == null) {
          CardBack = new global::Spelldawn.Protos.SpriteAddress();
        }
        CardBack.MergeFrom(other.CardBack);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            string value = _single_name_codec.Read(input);
            if (name_ == null || value != "") {
              Name = value;
            }
            break;
          }
          case 18: {
            if (portrait_ == null) {
              Portrait = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(Portrait);
            break;
          }
          case 26: {
            if (portraitFrame_ == null) {
              PortraitFrame = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(PortraitFrame);
            break;
          }
          case 34: {
            if (cardBack_ == null) {
              CardBack = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(CardBack);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            string value = _single_name_codec.Read(ref input);
            if (name_ == null || value != "") {
              Name = value;
            }
            break;
          }
          case 18: {
            if (portrait_ == null) {
              Portrait = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(Portrait);
            break;
          }
          case 26: {
            if (portraitFrame_ == null) {
              PortraitFrame = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(PortraitFrame);
            break;
          }
          case 34: {
            if (cardBack_ == null) {
              CardBack = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(CardBack);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ManaView : pb::IMessage<ManaView>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ManaView> _parser = new pb::MessageParser<ManaView>(() => new ManaView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ManaView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManaView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManaView(ManaView other) : this() {
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManaView Clone() {
      return new ManaView(this);
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 1;
    private uint amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ManaView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ManaView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Amount != 0) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Amount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Amount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ManaView other) {
      if (other == null) {
        return;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Amount = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Amount = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ScoreView : pb::IMessage<ScoreView>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ScoreView> _parser = new pb::MessageParser<ScoreView>(() => new ScoreView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScoreView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreView(ScoreView other) : this() {
      score_ = other.score_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreView Clone() {
      return new ScoreView(this);
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private uint score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScoreView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScoreView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Score != other.Score) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Score != 0) hash ^= Score.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Score != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Score);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Score != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Score);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScoreView other) {
      if (other == null) {
        return;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Score = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Score = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RoomView : pb::IMessage<RoomView>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoomView> _parser = new pb::MessageParser<RoomView>(() => new RoomView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomView(RoomView other) : this() {
      roomId_ = other.roomId_;
      backCards_ = other.backCards_.Clone();
      frontCards_ = other.frontCards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomView Clone() {
      return new RoomView(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private global::Spelldawn.Protos.RoomIdentifier roomId_ = global::Spelldawn.Protos.RoomIdentifier.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RoomIdentifier RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "back_cards" field.</summary>
    public const int BackCardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.CardView> _repeated_backCards_codec
        = pb::FieldCodec.ForMessage(18, global::Spelldawn.Protos.CardView.Parser);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.CardView> backCards_ = new pbc::RepeatedField<global::Spelldawn.Protos.CardView>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.CardView> BackCards {
      get { return backCards_; }
    }

    /// <summary>Field number for the "front_cards" field.</summary>
    public const int FrontCardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.CardView> _repeated_frontCards_codec
        = pb::FieldCodec.ForMessage(26, global::Spelldawn.Protos.CardView.Parser);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.CardView> frontCards_ = new pbc::RepeatedField<global::Spelldawn.Protos.CardView>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.CardView> FrontCards {
      get { return frontCards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if(!backCards_.Equals(other.backCards_)) return false;
      if(!frontCards_.Equals(other.frontCards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != global::Spelldawn.Protos.RoomIdentifier.Unspecified) hash ^= RoomId.GetHashCode();
      hash ^= backCards_.GetHashCode();
      hash ^= frontCards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RoomId != global::Spelldawn.Protos.RoomIdentifier.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RoomId);
      }
      backCards_.WriteTo(output, _repeated_backCards_codec);
      frontCards_.WriteTo(output, _repeated_frontCards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RoomId != global::Spelldawn.Protos.RoomIdentifier.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RoomId);
      }
      backCards_.WriteTo(ref output, _repeated_backCards_codec);
      frontCards_.WriteTo(ref output, _repeated_frontCards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != global::Spelldawn.Protos.RoomIdentifier.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomId);
      }
      size += backCards_.CalculateSize(_repeated_backCards_codec);
      size += frontCards_.CalculateSize(_repeated_frontCards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomView other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != global::Spelldawn.Protos.RoomIdentifier.Unspecified) {
        RoomId = other.RoomId;
      }
      backCards_.Add(other.backCards_);
      frontCards_.Add(other.frontCards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = (global::Spelldawn.Protos.RoomIdentifier) input.ReadEnum();
            break;
          }
          case 18: {
            backCards_.AddEntriesFrom(input, _repeated_backCards_codec);
            break;
          }
          case 26: {
            frontCards_.AddEntriesFrom(input, _repeated_frontCards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RoomId = (global::Spelldawn.Protos.RoomIdentifier) input.ReadEnum();
            break;
          }
          case 18: {
            backCards_.AddEntriesFrom(ref input, _repeated_backCards_codec);
            break;
          }
          case 26: {
            frontCards_.AddEntriesFrom(ref input, _repeated_frontCards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ActionTrackerView : pb::IMessage<ActionTrackerView>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ActionTrackerView> _parser = new pb::MessageParser<ActionTrackerView>(() => new ActionTrackerView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionTrackerView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionTrackerView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionTrackerView(ActionTrackerView other) : this() {
      availableActionCount_ = other.availableActionCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionTrackerView Clone() {
      return new ActionTrackerView(this);
    }

    /// <summary>Field number for the "available_action_count" field.</summary>
    public const int AvailableActionCountFieldNumber = 1;
    private uint availableActionCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AvailableActionCount {
      get { return availableActionCount_; }
      set {
        availableActionCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionTrackerView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionTrackerView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AvailableActionCount != other.AvailableActionCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AvailableActionCount != 0) hash ^= AvailableActionCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AvailableActionCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AvailableActionCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AvailableActionCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AvailableActionCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AvailableActionCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AvailableActionCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionTrackerView other) {
      if (other == null) {
        return;
      }
      if (other.AvailableActionCount != 0) {
        AvailableActionCount = other.AvailableActionCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AvailableActionCount = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AvailableActionCount = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DeckView : pb::IMessage<DeckView>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeckView> _parser = new pb::MessageParser<DeckView>(() => new DeckView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeckView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckView(DeckView other) : this() {
      topCards_ = other.topCards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckView Clone() {
      return new DeckView(this);
    }

    /// <summary>Field number for the "top_cards" field.</summary>
    public const int TopCardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.CardView> _repeated_topCards_codec
        = pb::FieldCodec.ForMessage(10, global::Spelldawn.Protos.CardView.Parser);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.CardView> topCards_ = new pbc::RepeatedField<global::Spelldawn.Protos.CardView>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.CardView> TopCards {
      get { return topCards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeckView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeckView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!topCards_.Equals(other.topCards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= topCards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      topCards_.WriteTo(output, _repeated_topCards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      topCards_.WriteTo(ref output, _repeated_topCards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += topCards_.CalculateSize(_repeated_topCards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeckView other) {
      if (other == null) {
        return;
      }
      topCards_.Add(other.topCards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            topCards_.AddEntriesFrom(input, _repeated_topCards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            topCards_.AddEntriesFrom(ref input, _repeated_topCards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlayerView : pb::IMessage<PlayerView>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerView> _parser = new pb::MessageParser<PlayerView>(() => new PlayerView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerView(PlayerView other) : this() {
      side_ = other.side_;
      playerInfo_ = other.playerInfo_ != null ? other.playerInfo_.Clone() : null;
      score_ = other.score_ != null ? other.score_.Clone() : null;
      mana_ = other.mana_ != null ? other.mana_.Clone() : null;
      actionTracker_ = other.actionTracker_ != null ? other.actionTracker_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerView Clone() {
      return new PlayerView(this);
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 1;
    private global::Spelldawn.Protos.PlayerSide side_ = global::Spelldawn.Protos.PlayerSide.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "player_info" field.</summary>
    public const int PlayerInfoFieldNumber = 2;
    private global::Spelldawn.Protos.PlayerInfo playerInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private global::Spelldawn.Protos.ScoreView score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ScoreView Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "mana" field.</summary>
    public const int ManaFieldNumber = 4;
    private global::Spelldawn.Protos.ManaView mana_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ManaView Mana {
      get { return mana_; }
      set {
        mana_ = value;
      }
    }

    /// <summary>Field number for the "action_tracker" field.</summary>
    public const int ActionTrackerFieldNumber = 5;
    private global::Spelldawn.Protos.ActionTrackerView actionTracker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ActionTrackerView ActionTracker {
      get { return actionTracker_; }
      set {
        actionTracker_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Side != other.Side) return false;
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (!object.Equals(Score, other.Score)) return false;
      if (!object.Equals(Mana, other.Mana)) return false;
      if (!object.Equals(ActionTracker, other.ActionTracker)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Side != global::Spelldawn.Protos.PlayerSide.Unspecified) hash ^= Side.GetHashCode();
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (score_ != null) hash ^= Score.GetHashCode();
      if (mana_ != null) hash ^= Mana.GetHashCode();
      if (actionTracker_ != null) hash ^= ActionTracker.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Side != global::Spelldawn.Protos.PlayerSide.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Side);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerInfo);
      }
      if (score_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Score);
      }
      if (mana_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Mana);
      }
      if (actionTracker_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ActionTracker);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Side != global::Spelldawn.Protos.PlayerSide.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Side);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerInfo);
      }
      if (score_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Score);
      }
      if (mana_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Mana);
      }
      if (actionTracker_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ActionTracker);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Side != global::Spelldawn.Protos.PlayerSide.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (score_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Score);
      }
      if (mana_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mana);
      }
      if (actionTracker_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActionTracker);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerView other) {
      if (other == null) {
        return;
      }
      if (other.Side != global::Spelldawn.Protos.PlayerSide.Unspecified) {
        Side = other.Side;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          PlayerInfo = new global::Spelldawn.Protos.PlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      if (other.score_ != null) {
        if (score_ == null) {
          Score = new global::Spelldawn.Protos.ScoreView();
        }
        Score.MergeFrom(other.Score);
      }
      if (other.mana_ != null) {
        if (mana_ == null) {
          Mana = new global::Spelldawn.Protos.ManaView();
        }
        Mana.MergeFrom(other.Mana);
      }
      if (other.actionTracker_ != null) {
        if (actionTracker_ == null) {
          ActionTracker = new global::Spelldawn.Protos.ActionTrackerView();
        }
        ActionTracker.MergeFrom(other.ActionTracker);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Side = (global::Spelldawn.Protos.PlayerSide) input.ReadEnum();
            break;
          }
          case 18: {
            if (playerInfo_ == null) {
              PlayerInfo = new global::Spelldawn.Protos.PlayerInfo();
            }
            input.ReadMessage(PlayerInfo);
            break;
          }
          case 26: {
            if (score_ == null) {
              Score = new global::Spelldawn.Protos.ScoreView();
            }
            input.ReadMessage(Score);
            break;
          }
          case 34: {
            if (mana_ == null) {
              Mana = new global::Spelldawn.Protos.ManaView();
            }
            input.ReadMessage(Mana);
            break;
          }
          case 42: {
            if (actionTracker_ == null) {
              ActionTracker = new global::Spelldawn.Protos.ActionTrackerView();
            }
            input.ReadMessage(ActionTracker);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Side = (global::Spelldawn.Protos.PlayerSide) input.ReadEnum();
            break;
          }
          case 18: {
            if (playerInfo_ == null) {
              PlayerInfo = new global::Spelldawn.Protos.PlayerInfo();
            }
            input.ReadMessage(PlayerInfo);
            break;
          }
          case 26: {
            if (score_ == null) {
              Score = new global::Spelldawn.Protos.ScoreView();
            }
            input.ReadMessage(Score);
            break;
          }
          case 34: {
            if (mana_ == null) {
              Mana = new global::Spelldawn.Protos.ManaView();
            }
            input.ReadMessage(Mana);
            break;
          }
          case 42: {
            if (actionTracker_ == null) {
              ActionTracker = new global::Spelldawn.Protos.ActionTrackerView();
            }
            input.ReadMessage(ActionTracker);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameView : pb::IMessage<GameView>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameView> _parser = new pb::MessageParser<GameView>(() => new GameView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameView(GameView other) : this() {
      gameId_ = other.gameId_ != null ? other.gameId_.Clone() : null;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      opponent_ = other.opponent_ != null ? other.opponent_.Clone() : null;
      currentPriority_ = other.currentPriority_;
      raidActive_ = other.raidActive_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameView Clone() {
      return new GameView(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private global::Spelldawn.Protos.GameIdentifier gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.GameIdentifier GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::Spelldawn.Protos.PlayerView user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerView User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "opponent" field.</summary>
    public const int OpponentFieldNumber = 3;
    private global::Spelldawn.Protos.PlayerView opponent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerView Opponent {
      get { return opponent_; }
      set {
        opponent_ = value;
      }
    }

    /// <summary>Field number for the "current_priority" field.</summary>
    public const int CurrentPriorityFieldNumber = 4;
    private global::Spelldawn.Protos.PlayerName currentPriority_ = global::Spelldawn.Protos.PlayerName.Unspecified;
    /// <summary>
    /// The player who is currently able to act.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName CurrentPriority {
      get { return currentPriority_; }
      set {
        currentPriority_ = value;
      }
    }

    /// <summary>Field number for the "raid_active" field.</summary>
    public const int RaidActiveFieldNumber = 5;
    private bool raidActive_;
    /// <summary>
    /// Whether a raid is currently active. If true, the raid overlay will be
    /// displayed, the raid music will be played, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RaidActive {
      get { return raidActive_; }
      set {
        raidActive_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameId, other.GameId)) return false;
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(Opponent, other.Opponent)) return false;
      if (CurrentPriority != other.CurrentPriority) return false;
      if (RaidActive != other.RaidActive) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameId_ != null) hash ^= GameId.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (opponent_ != null) hash ^= Opponent.GetHashCode();
      if (CurrentPriority != global::Spelldawn.Protos.PlayerName.Unspecified) hash ^= CurrentPriority.GetHashCode();
      if (RaidActive != false) hash ^= RaidActive.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (gameId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameId);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (opponent_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Opponent);
      }
      if (CurrentPriority != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) CurrentPriority);
      }
      if (RaidActive != false) {
        output.WriteRawTag(40);
        output.WriteBool(RaidActive);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (gameId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameId);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (opponent_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Opponent);
      }
      if (CurrentPriority != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) CurrentPriority);
      }
      if (RaidActive != false) {
        output.WriteRawTag(40);
        output.WriteBool(RaidActive);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameId);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (opponent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Opponent);
      }
      if (CurrentPriority != global::Spelldawn.Protos.PlayerName.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CurrentPriority);
      }
      if (RaidActive != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameView other) {
      if (other == null) {
        return;
      }
      if (other.gameId_ != null) {
        if (gameId_ == null) {
          GameId = new global::Spelldawn.Protos.GameIdentifier();
        }
        GameId.MergeFrom(other.GameId);
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::Spelldawn.Protos.PlayerView();
        }
        User.MergeFrom(other.User);
      }
      if (other.opponent_ != null) {
        if (opponent_ == null) {
          Opponent = new global::Spelldawn.Protos.PlayerView();
        }
        Opponent.MergeFrom(other.Opponent);
      }
      if (other.CurrentPriority != global::Spelldawn.Protos.PlayerName.Unspecified) {
        CurrentPriority = other.CurrentPriority;
      }
      if (other.RaidActive != false) {
        RaidActive = other.RaidActive;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gameId_ == null) {
              GameId = new global::Spelldawn.Protos.GameIdentifier();
            }
            input.ReadMessage(GameId);
            break;
          }
          case 18: {
            if (user_ == null) {
              User = new global::Spelldawn.Protos.PlayerView();
            }
            input.ReadMessage(User);
            break;
          }
          case 26: {
            if (opponent_ == null) {
              Opponent = new global::Spelldawn.Protos.PlayerView();
            }
            input.ReadMessage(Opponent);
            break;
          }
          case 32: {
            CurrentPriority = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
          case 40: {
            RaidActive = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (gameId_ == null) {
              GameId = new global::Spelldawn.Protos.GameIdentifier();
            }
            input.ReadMessage(GameId);
            break;
          }
          case 18: {
            if (user_ == null) {
              User = new global::Spelldawn.Protos.PlayerView();
            }
            input.ReadMessage(User);
            break;
          }
          case 26: {
            if (opponent_ == null) {
              Opponent = new global::Spelldawn.Protos.PlayerView();
            }
            input.ReadMessage(Opponent);
            break;
          }
          case 32: {
            CurrentPriority = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
          case 40: {
            RaidActive = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class StandardAction : pb::IMessage<StandardAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StandardAction> _parser = new pb::MessageParser<StandardAction>(() => new StandardAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StandardAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandardAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandardAction(StandardAction other) : this() {
      payload_ = other.payload_;
      update_ = other.update_ != null ? other.update_.Clone() : null;
      debugPayload_ = other.debugPayload_ != null ? other.debugPayload_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandardAction Clone() {
      return new StandardAction(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    /// <summary>
    ///* Opaque payload to send to the server when invoked. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "update" field.</summary>
    public const int UpdateFieldNumber = 2;
    private global::Spelldawn.Protos.CommandList update_;
    /// <summary>
    /// Immediate optimistic mutations to game state for this action. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CommandList Update {
      get { return update_; }
      set {
        update_ = value;
      }
    }

    /// <summary>Field number for the "debug_payload" field.</summary>
    public const int DebugPayloadFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Any debugPayload_;
    /// <summary>
    /// Temporary payload for use in testing. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any DebugPayload {
      get { return debugPayload_; }
      set {
        debugPayload_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StandardAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StandardAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payload != other.Payload) return false;
      if (!object.Equals(Update, other.Update)) return false;
      if (!object.Equals(DebugPayload, other.DebugPayload)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (update_ != null) hash ^= Update.GetHashCode();
      if (debugPayload_ != null) hash ^= DebugPayload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Payload.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Payload);
      }
      if (update_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Update);
      }
      if (debugPayload_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DebugPayload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Payload.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Payload);
      }
      if (update_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Update);
      }
      if (debugPayload_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DebugPayload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (update_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Update);
      }
      if (debugPayload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DebugPayload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StandardAction other) {
      if (other == null) {
        return;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      if (other.update_ != null) {
        if (update_ == null) {
          Update = new global::Spelldawn.Protos.CommandList();
        }
        Update.MergeFrom(other.Update);
      }
      if (other.debugPayload_ != null) {
        if (debugPayload_ == null) {
          DebugPayload = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        DebugPayload.MergeFrom(other.DebugPayload);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Payload = input.ReadBytes();
            break;
          }
          case 18: {
            if (update_ == null) {
              Update = new global::Spelldawn.Protos.CommandList();
            }
            input.ReadMessage(Update);
            break;
          }
          case 26: {
            if (debugPayload_ == null) {
              DebugPayload = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(DebugPayload);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Payload = input.ReadBytes();
            break;
          }
          case 18: {
            if (update_ == null) {
              Update = new global::Spelldawn.Protos.CommandList();
            }
            input.ReadMessage(Update);
            break;
          }
          case 26: {
            if (debugPayload_ == null) {
              DebugPayload = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(DebugPayload);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Spend an action to gain 1 mana.
  ///
  /// Optimistic: Mana is added immediately.
  /// </summary>
  public sealed partial class GainManaAction : pb::IMessage<GainManaAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GainManaAction> _parser = new pb::MessageParser<GainManaAction>(() => new GainManaAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GainManaAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GainManaAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GainManaAction(GainManaAction other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GainManaAction Clone() {
      return new GainManaAction(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GainManaAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GainManaAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GainManaAction other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Spend an action to draw a card.
  ///
  /// Optimistic: Face-down card animates to reveal area.
  /// </summary>
  public sealed partial class DrawCardAction : pb::IMessage<DrawCardAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DrawCardAction> _parser = new pb::MessageParser<DrawCardAction>(() => new DrawCardAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrawCardAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawCardAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawCardAction(DrawCardAction other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawCardAction Clone() {
      return new DrawCardAction(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrawCardAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrawCardAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrawCardAction other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Spend an action to level up a room.
  ///
  /// Optimistic: Counter is added immediately
  /// </summary>
  public sealed partial class LevelUpRoomAction : pb::IMessage<LevelUpRoomAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelUpRoomAction> _parser = new pb::MessageParser<LevelUpRoomAction>(() => new LevelUpRoomAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelUpRoomAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelUpRoomAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelUpRoomAction(LevelUpRoomAction other) : this() {
      roomId_ = other.roomId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelUpRoomAction Clone() {
      return new LevelUpRoomAction(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private global::Spelldawn.Protos.RoomIdentifier roomId_ = global::Spelldawn.Protos.RoomIdentifier.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RoomIdentifier RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelUpRoomAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelUpRoomAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != global::Spelldawn.Protos.RoomIdentifier.Unspecified) hash ^= RoomId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RoomId != global::Spelldawn.Protos.RoomIdentifier.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RoomId != global::Spelldawn.Protos.RoomIdentifier.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != global::Spelldawn.Protos.RoomIdentifier.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelUpRoomAction other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != global::Spelldawn.Protos.RoomIdentifier.Unspecified) {
        RoomId = other.RoomId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = (global::Spelldawn.Protos.RoomIdentifier) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RoomId = (global::Spelldawn.Protos.RoomIdentifier) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CardTarget : pb::IMessage<CardTarget>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CardTarget> _parser = new pb::MessageParser<CardTarget>(() => new CardTarget());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardTarget> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardTarget(CardTarget other) : this() {
      switch (other.CardTargetCase) {
        case CardTargetOneofCase.RoomId:
          RoomId = other.RoomId;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardTarget Clone() {
      return new CardTarget(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RoomIdentifier RoomId {
      get { return cardTargetCase_ == CardTargetOneofCase.RoomId ? (global::Spelldawn.Protos.RoomIdentifier) cardTarget_ : global::Spelldawn.Protos.RoomIdentifier.Unspecified; }
      set {
        cardTarget_ = value;
        cardTargetCase_ = CardTargetOneofCase.RoomId;
      }
    }

    private object cardTarget_;
    /// <summary>Enum of possible cases for the "card_target" oneof.</summary>
    public enum CardTargetOneofCase {
      None = 0,
      RoomId = 1,
    }
    private CardTargetOneofCase cardTargetCase_ = CardTargetOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardTargetOneofCase CardTargetCase {
      get { return cardTargetCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCardTarget() {
      cardTargetCase_ = CardTargetOneofCase.None;
      cardTarget_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardTarget);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (CardTargetCase != other.CardTargetCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cardTargetCase_ == CardTargetOneofCase.RoomId) hash ^= RoomId.GetHashCode();
      hash ^= (int) cardTargetCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (cardTargetCase_ == CardTargetOneofCase.RoomId) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (cardTargetCase_ == CardTargetOneofCase.RoomId) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cardTargetCase_ == CardTargetOneofCase.RoomId) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardTarget other) {
      if (other == null) {
        return;
      }
      switch (other.CardTargetCase) {
        case CardTargetOneofCase.RoomId:
          RoomId = other.RoomId;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            cardTarget_ = input.ReadEnum();
            cardTargetCase_ = CardTargetOneofCase.RoomId;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            cardTarget_ = input.ReadEnum();
            cardTargetCase_ = CardTargetOneofCase.RoomId;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Spend an action to play a card from hand.
  ///
  /// Optimistic:
  ///   - Mana and action cost is spent immediately, and 'can play' values for
  ///     other cards in hand are optimistically updated
  ///   - Other costs like 'sacrifice an artifact' are not optimistic and are
  ///     handled like choices
  ///   - Targeted cards select their *first* valid target (cards, rooms, players)
  ///     optimistically. If additional targets are required, they're not handled
  ///     optimistically, and this play pattern should possibly be avoided.
  ///   - Cards that require a choice to be made before resolving do not display
  ///     the options optimistically, instead they animate to the reveal card area
  ///   - Item cards which don't require a choice to be made or target simply
  ///     animate into the play area optimistically
  ///   - Spell cards animate to the reveal card area and wait for their effects to
  ///     be applied
  ///   - Minion and Project cards animate to their selected room optimistically
  /// </summary>
  public sealed partial class PlayCardAction : pb::IMessage<PlayCardAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayCardAction> _parser = new pb::MessageParser<PlayCardAction>(() => new PlayCardAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayCardAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCardAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCardAction(PlayCardAction other) : this() {
      cardId_ = other.cardId_ != null ? other.cardId_.Clone() : null;
      target_ = other.target_ != null ? other.target_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCardAction Clone() {
      return new PlayCardAction(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private global::Spelldawn.Protos.CardIdentifier cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardIdentifier CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 2;
    private global::Spelldawn.Protos.CardTarget target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardTarget Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayCardAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayCardAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CardId, other.CardId)) return false;
      if (!object.Equals(Target, other.Target)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cardId_ != null) hash ^= CardId.GetHashCode();
      if (target_ != null) hash ^= Target.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (cardId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardId);
      }
      if (target_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (cardId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardId);
      }
      if (target_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cardId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardId);
      }
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayCardAction other) {
      if (other == null) {
        return;
      }
      if (other.cardId_ != null) {
        if (cardId_ == null) {
          CardId = new global::Spelldawn.Protos.CardIdentifier();
        }
        CardId.MergeFrom(other.CardId);
      }
      if (other.target_ != null) {
        if (target_ == null) {
          Target = new global::Spelldawn.Protos.CardTarget();
        }
        Target.MergeFrom(other.Target);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cardId_ == null) {
              CardId = new global::Spelldawn.Protos.CardIdentifier();
            }
            input.ReadMessage(CardId);
            break;
          }
          case 18: {
            if (target_ == null) {
              Target = new global::Spelldawn.Protos.CardTarget();
            }
            input.ReadMessage(Target);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (cardId_ == null) {
              CardId = new global::Spelldawn.Protos.CardIdentifier();
            }
            input.ReadMessage(CardId);
            break;
          }
          case 18: {
            if (target_ == null) {
              Target = new global::Spelldawn.Protos.CardTarget();
            }
            input.ReadMessage(Target);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Spend an action to initiate a raid on one of the overlord's rooms
  ///
  /// Optimistic: Raid start animation plays
  /// </summary>
  public sealed partial class InitiateRaidAction : pb::IMessage<InitiateRaidAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InitiateRaidAction> _parser = new pb::MessageParser<InitiateRaidAction>(() => new InitiateRaidAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitiateRaidAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitiateRaidAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitiateRaidAction(InitiateRaidAction other) : this() {
      roomId_ = other.roomId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitiateRaidAction Clone() {
      return new InitiateRaidAction(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private global::Spelldawn.Protos.RoomIdentifier roomId_ = global::Spelldawn.Protos.RoomIdentifier.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RoomIdentifier RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitiateRaidAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitiateRaidAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != global::Spelldawn.Protos.RoomIdentifier.Unspecified) hash ^= RoomId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RoomId != global::Spelldawn.Protos.RoomIdentifier.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RoomId != global::Spelldawn.Protos.RoomIdentifier.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != global::Spelldawn.Protos.RoomIdentifier.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitiateRaidAction other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != global::Spelldawn.Protos.RoomIdentifier.Unspecified) {
        RoomId = other.RoomId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = (global::Spelldawn.Protos.RoomIdentifier) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RoomId = (global::Spelldawn.Protos.RoomIdentifier) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Open or close a given interface panel.
  ///
  /// Behavior:
  ///   - Open: If the panel with this address has already been downloaded, it
  ///   is opened immediately. The server returns an updated view of the
  ///   panel contents.
  ///   - Close: The panel is closed immediately. No server response is
  ///   provided.
  /// </summary>
  public sealed partial class TogglePanelAction : pb::IMessage<TogglePanelAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TogglePanelAction> _parser = new pb::MessageParser<TogglePanelAction>(() => new TogglePanelAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TogglePanelAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TogglePanelAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TogglePanelAction(TogglePanelAction other) : this() {
      panelAddress_ = other.panelAddress_;
      open_ = other.open_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TogglePanelAction Clone() {
      return new TogglePanelAction(this);
    }

    /// <summary>Field number for the "panel_address" field.</summary>
    public const int PanelAddressFieldNumber = 1;
    private global::Spelldawn.Protos.PanelAddress panelAddress_ = global::Spelldawn.Protos.PanelAddress.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PanelAddress PanelAddress {
      get { return panelAddress_; }
      set {
        panelAddress_ = value;
      }
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 2;
    private bool open_;
    /// <summary>
    /// Should the panel be opened or closed?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TogglePanelAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TogglePanelAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PanelAddress != other.PanelAddress) return false;
      if (Open != other.Open) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PanelAddress != global::Spelldawn.Protos.PanelAddress.Unspecified) hash ^= PanelAddress.GetHashCode();
      if (Open != false) hash ^= Open.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PanelAddress != global::Spelldawn.Protos.PanelAddress.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PanelAddress);
      }
      if (Open != false) {
        output.WriteRawTag(16);
        output.WriteBool(Open);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PanelAddress != global::Spelldawn.Protos.PanelAddress.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PanelAddress);
      }
      if (Open != false) {
        output.WriteRawTag(16);
        output.WriteBool(Open);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PanelAddress != global::Spelldawn.Protos.PanelAddress.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PanelAddress);
      }
      if (Open != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TogglePanelAction other) {
      if (other == null) {
        return;
      }
      if (other.PanelAddress != global::Spelldawn.Protos.PanelAddress.Unspecified) {
        PanelAddress = other.PanelAddress;
      }
      if (other.Open != false) {
        Open = other.Open;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PanelAddress = (global::Spelldawn.Protos.PanelAddress) input.ReadEnum();
            break;
          }
          case 16: {
            Open = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PanelAddress = (global::Spelldawn.Protos.PanelAddress) input.ReadEnum();
            break;
          }
          case 16: {
            Open = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Possible game actions taken by the user.
  ///
  /// Actions have an associated 'optimistic' behavior to display while waiting
  /// for a server response. The client should not send multiple actions at the
  /// same time -- interaction should be disabled while an action is pending.
  /// </summary>
  public sealed partial class GameAction : pb::IMessage<GameAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameAction> _parser = new pb::MessageParser<GameAction>(() => new GameAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameAction(GameAction other) : this() {
      switch (other.ActionCase) {
        case ActionOneofCase.StandardAction:
          StandardAction = other.StandardAction.Clone();
          break;
        case ActionOneofCase.TogglePanel:
          TogglePanel = other.TogglePanel.Clone();
          break;
        case ActionOneofCase.GainMana:
          GainMana = other.GainMana.Clone();
          break;
        case ActionOneofCase.DrawCard:
          DrawCard = other.DrawCard.Clone();
          break;
        case ActionOneofCase.PlayCard:
          PlayCard = other.PlayCard.Clone();
          break;
        case ActionOneofCase.LevelUpRoom:
          LevelUpRoom = other.LevelUpRoom.Clone();
          break;
        case ActionOneofCase.InitiateRaid:
          InitiateRaid = other.InitiateRaid.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameAction Clone() {
      return new GameAction(this);
    }

    /// <summary>Field number for the "standard_action" field.</summary>
    public const int StandardActionFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.StandardAction StandardAction {
      get { return actionCase_ == ActionOneofCase.StandardAction ? (global::Spelldawn.Protos.StandardAction) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.StandardAction;
      }
    }

    /// <summary>Field number for the "toggle_panel" field.</summary>
    public const int TogglePanelFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.TogglePanelAction TogglePanel {
      get { return actionCase_ == ActionOneofCase.TogglePanel ? (global::Spelldawn.Protos.TogglePanelAction) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.TogglePanel;
      }
    }

    /// <summary>Field number for the "gain_mana" field.</summary>
    public const int GainManaFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.GainManaAction GainMana {
      get { return actionCase_ == ActionOneofCase.GainMana ? (global::Spelldawn.Protos.GainManaAction) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.GainMana;
      }
    }

    /// <summary>Field number for the "draw_card" field.</summary>
    public const int DrawCardFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.DrawCardAction DrawCard {
      get { return actionCase_ == ActionOneofCase.DrawCard ? (global::Spelldawn.Protos.DrawCardAction) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.DrawCard;
      }
    }

    /// <summary>Field number for the "play_card" field.</summary>
    public const int PlayCardFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayCardAction PlayCard {
      get { return actionCase_ == ActionOneofCase.PlayCard ? (global::Spelldawn.Protos.PlayCardAction) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.PlayCard;
      }
    }

    /// <summary>Field number for the "level_up_room" field.</summary>
    public const int LevelUpRoomFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.LevelUpRoomAction LevelUpRoom {
      get { return actionCase_ == ActionOneofCase.LevelUpRoom ? (global::Spelldawn.Protos.LevelUpRoomAction) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.LevelUpRoom;
      }
    }

    /// <summary>Field number for the "initiate_raid" field.</summary>
    public const int InitiateRaidFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.InitiateRaidAction InitiateRaid {
      get { return actionCase_ == ActionOneofCase.InitiateRaid ? (global::Spelldawn.Protos.InitiateRaidAction) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.InitiateRaid;
      }
    }

    private object action_;
    /// <summary>Enum of possible cases for the "action" oneof.</summary>
    public enum ActionOneofCase {
      None = 0,
      StandardAction = 1,
      TogglePanel = 2,
      GainMana = 3,
      DrawCard = 4,
      PlayCard = 5,
      LevelUpRoom = 6,
      InitiateRaid = 7,
    }
    private ActionOneofCase actionCase_ = ActionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionOneofCase ActionCase {
      get { return actionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      actionCase_ = ActionOneofCase.None;
      action_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StandardAction, other.StandardAction)) return false;
      if (!object.Equals(TogglePanel, other.TogglePanel)) return false;
      if (!object.Equals(GainMana, other.GainMana)) return false;
      if (!object.Equals(DrawCard, other.DrawCard)) return false;
      if (!object.Equals(PlayCard, other.PlayCard)) return false;
      if (!object.Equals(LevelUpRoom, other.LevelUpRoom)) return false;
      if (!object.Equals(InitiateRaid, other.InitiateRaid)) return false;
      if (ActionCase != other.ActionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (actionCase_ == ActionOneofCase.StandardAction) hash ^= StandardAction.GetHashCode();
      if (actionCase_ == ActionOneofCase.TogglePanel) hash ^= TogglePanel.GetHashCode();
      if (actionCase_ == ActionOneofCase.GainMana) hash ^= GainMana.GetHashCode();
      if (actionCase_ == ActionOneofCase.DrawCard) hash ^= DrawCard.GetHashCode();
      if (actionCase_ == ActionOneofCase.PlayCard) hash ^= PlayCard.GetHashCode();
      if (actionCase_ == ActionOneofCase.LevelUpRoom) hash ^= LevelUpRoom.GetHashCode();
      if (actionCase_ == ActionOneofCase.InitiateRaid) hash ^= InitiateRaid.GetHashCode();
      hash ^= (int) actionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (actionCase_ == ActionOneofCase.StandardAction) {
        output.WriteRawTag(10);
        output.WriteMessage(StandardAction);
      }
      if (actionCase_ == ActionOneofCase.TogglePanel) {
        output.WriteRawTag(18);
        output.WriteMessage(TogglePanel);
      }
      if (actionCase_ == ActionOneofCase.GainMana) {
        output.WriteRawTag(26);
        output.WriteMessage(GainMana);
      }
      if (actionCase_ == ActionOneofCase.DrawCard) {
        output.WriteRawTag(34);
        output.WriteMessage(DrawCard);
      }
      if (actionCase_ == ActionOneofCase.PlayCard) {
        output.WriteRawTag(42);
        output.WriteMessage(PlayCard);
      }
      if (actionCase_ == ActionOneofCase.LevelUpRoom) {
        output.WriteRawTag(50);
        output.WriteMessage(LevelUpRoom);
      }
      if (actionCase_ == ActionOneofCase.InitiateRaid) {
        output.WriteRawTag(58);
        output.WriteMessage(InitiateRaid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (actionCase_ == ActionOneofCase.StandardAction) {
        output.WriteRawTag(10);
        output.WriteMessage(StandardAction);
      }
      if (actionCase_ == ActionOneofCase.TogglePanel) {
        output.WriteRawTag(18);
        output.WriteMessage(TogglePanel);
      }
      if (actionCase_ == ActionOneofCase.GainMana) {
        output.WriteRawTag(26);
        output.WriteMessage(GainMana);
      }
      if (actionCase_ == ActionOneofCase.DrawCard) {
        output.WriteRawTag(34);
        output.WriteMessage(DrawCard);
      }
      if (actionCase_ == ActionOneofCase.PlayCard) {
        output.WriteRawTag(42);
        output.WriteMessage(PlayCard);
      }
      if (actionCase_ == ActionOneofCase.LevelUpRoom) {
        output.WriteRawTag(50);
        output.WriteMessage(LevelUpRoom);
      }
      if (actionCase_ == ActionOneofCase.InitiateRaid) {
        output.WriteRawTag(58);
        output.WriteMessage(InitiateRaid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (actionCase_ == ActionOneofCase.StandardAction) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StandardAction);
      }
      if (actionCase_ == ActionOneofCase.TogglePanel) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TogglePanel);
      }
      if (actionCase_ == ActionOneofCase.GainMana) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GainMana);
      }
      if (actionCase_ == ActionOneofCase.DrawCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DrawCard);
      }
      if (actionCase_ == ActionOneofCase.PlayCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayCard);
      }
      if (actionCase_ == ActionOneofCase.LevelUpRoom) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelUpRoom);
      }
      if (actionCase_ == ActionOneofCase.InitiateRaid) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitiateRaid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameAction other) {
      if (other == null) {
        return;
      }
      switch (other.ActionCase) {
        case ActionOneofCase.StandardAction:
          if (StandardAction == null) {
            StandardAction = new global::Spelldawn.Protos.StandardAction();
          }
          StandardAction.MergeFrom(other.StandardAction);
          break;
        case ActionOneofCase.TogglePanel:
          if (TogglePanel == null) {
            TogglePanel = new global::Spelldawn.Protos.TogglePanelAction();
          }
          TogglePanel.MergeFrom(other.TogglePanel);
          break;
        case ActionOneofCase.GainMana:
          if (GainMana == null) {
            GainMana = new global::Spelldawn.Protos.GainManaAction();
          }
          GainMana.MergeFrom(other.GainMana);
          break;
        case ActionOneofCase.DrawCard:
          if (DrawCard == null) {
            DrawCard = new global::Spelldawn.Protos.DrawCardAction();
          }
          DrawCard.MergeFrom(other.DrawCard);
          break;
        case ActionOneofCase.PlayCard:
          if (PlayCard == null) {
            PlayCard = new global::Spelldawn.Protos.PlayCardAction();
          }
          PlayCard.MergeFrom(other.PlayCard);
          break;
        case ActionOneofCase.LevelUpRoom:
          if (LevelUpRoom == null) {
            LevelUpRoom = new global::Spelldawn.Protos.LevelUpRoomAction();
          }
          LevelUpRoom.MergeFrom(other.LevelUpRoom);
          break;
        case ActionOneofCase.InitiateRaid:
          if (InitiateRaid == null) {
            InitiateRaid = new global::Spelldawn.Protos.InitiateRaidAction();
          }
          InitiateRaid.MergeFrom(other.InitiateRaid);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Spelldawn.Protos.StandardAction subBuilder = new global::Spelldawn.Protos.StandardAction();
            if (actionCase_ == ActionOneofCase.StandardAction) {
              subBuilder.MergeFrom(StandardAction);
            }
            input.ReadMessage(subBuilder);
            StandardAction = subBuilder;
            break;
          }
          case 18: {
            global::Spelldawn.Protos.TogglePanelAction subBuilder = new global::Spelldawn.Protos.TogglePanelAction();
            if (actionCase_ == ActionOneofCase.TogglePanel) {
              subBuilder.MergeFrom(TogglePanel);
            }
            input.ReadMessage(subBuilder);
            TogglePanel = subBuilder;
            break;
          }
          case 26: {
            global::Spelldawn.Protos.GainManaAction subBuilder = new global::Spelldawn.Protos.GainManaAction();
            if (actionCase_ == ActionOneofCase.GainMana) {
              subBuilder.MergeFrom(GainMana);
            }
            input.ReadMessage(subBuilder);
            GainMana = subBuilder;
            break;
          }
          case 34: {
            global::Spelldawn.Protos.DrawCardAction subBuilder = new global::Spelldawn.Protos.DrawCardAction();
            if (actionCase_ == ActionOneofCase.DrawCard) {
              subBuilder.MergeFrom(DrawCard);
            }
            input.ReadMessage(subBuilder);
            DrawCard = subBuilder;
            break;
          }
          case 42: {
            global::Spelldawn.Protos.PlayCardAction subBuilder = new global::Spelldawn.Protos.PlayCardAction();
            if (actionCase_ == ActionOneofCase.PlayCard) {
              subBuilder.MergeFrom(PlayCard);
            }
            input.ReadMessage(subBuilder);
            PlayCard = subBuilder;
            break;
          }
          case 50: {
            global::Spelldawn.Protos.LevelUpRoomAction subBuilder = new global::Spelldawn.Protos.LevelUpRoomAction();
            if (actionCase_ == ActionOneofCase.LevelUpRoom) {
              subBuilder.MergeFrom(LevelUpRoom);
            }
            input.ReadMessage(subBuilder);
            LevelUpRoom = subBuilder;
            break;
          }
          case 58: {
            global::Spelldawn.Protos.InitiateRaidAction subBuilder = new global::Spelldawn.Protos.InitiateRaidAction();
            if (actionCase_ == ActionOneofCase.InitiateRaid) {
              subBuilder.MergeFrom(InitiateRaid);
            }
            input.ReadMessage(subBuilder);
            InitiateRaid = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Spelldawn.Protos.StandardAction subBuilder = new global::Spelldawn.Protos.StandardAction();
            if (actionCase_ == ActionOneofCase.StandardAction) {
              subBuilder.MergeFrom(StandardAction);
            }
            input.ReadMessage(subBuilder);
            StandardAction = subBuilder;
            break;
          }
          case 18: {
            global::Spelldawn.Protos.TogglePanelAction subBuilder = new global::Spelldawn.Protos.TogglePanelAction();
            if (actionCase_ == ActionOneofCase.TogglePanel) {
              subBuilder.MergeFrom(TogglePanel);
            }
            input.ReadMessage(subBuilder);
            TogglePanel = subBuilder;
            break;
          }
          case 26: {
            global::Spelldawn.Protos.GainManaAction subBuilder = new global::Spelldawn.Protos.GainManaAction();
            if (actionCase_ == ActionOneofCase.GainMana) {
              subBuilder.MergeFrom(GainMana);
            }
            input.ReadMessage(subBuilder);
            GainMana = subBuilder;
            break;
          }
          case 34: {
            global::Spelldawn.Protos.DrawCardAction subBuilder = new global::Spelldawn.Protos.DrawCardAction();
            if (actionCase_ == ActionOneofCase.DrawCard) {
              subBuilder.MergeFrom(DrawCard);
            }
            input.ReadMessage(subBuilder);
            DrawCard = subBuilder;
            break;
          }
          case 42: {
            global::Spelldawn.Protos.PlayCardAction subBuilder = new global::Spelldawn.Protos.PlayCardAction();
            if (actionCase_ == ActionOneofCase.PlayCard) {
              subBuilder.MergeFrom(PlayCard);
            }
            input.ReadMessage(subBuilder);
            PlayCard = subBuilder;
            break;
          }
          case 50: {
            global::Spelldawn.Protos.LevelUpRoomAction subBuilder = new global::Spelldawn.Protos.LevelUpRoomAction();
            if (actionCase_ == ActionOneofCase.LevelUpRoom) {
              subBuilder.MergeFrom(LevelUpRoom);
            }
            input.ReadMessage(subBuilder);
            LevelUpRoom = subBuilder;
            break;
          }
          case 58: {
            global::Spelldawn.Protos.InitiateRaidAction subBuilder = new global::Spelldawn.Protos.InitiateRaidAction();
            if (actionCase_ == ActionOneofCase.InitiateRaid) {
              subBuilder.MergeFrom(InitiateRaid);
            }
            input.ReadMessage(subBuilder);
            InitiateRaid = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameRequest : pb::IMessage<GameRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameRequest> _parser = new pb::MessageParser<GameRequest>(() => new GameRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRequest(GameRequest other) : this() {
      action_ = other.action_ != null ? other.action_.Clone() : null;
      gameId_ = other.gameId_ != null ? other.gameId_.Clone() : null;
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRequest Clone() {
      return new GameRequest(this);
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 1;
    private global::Spelldawn.Protos.GameAction action_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.GameAction Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 2;
    private global::Spelldawn.Protos.GameIdentifier gameId_;
    /// <summary>
    /// Current game_id, if a game is currently ongoing. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.GameIdentifier GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 3;
    private ulong userId_;
    /// <summary>
    ///
    /// Identifies the user making this request. At some point I'm going to
    /// figure out how to set up authentication, but currently we operate on
    /// the honor system :)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Action, other.Action)) return false;
      if (!object.Equals(GameId, other.GameId)) return false;
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (action_ != null) hash ^= Action.GetHashCode();
      if (gameId_ != null) hash ^= GameId.GetHashCode();
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (action_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Action);
      }
      if (gameId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GameId);
      }
      if (UserId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (action_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Action);
      }
      if (gameId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GameId);
      }
      if (UserId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (action_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Action);
      }
      if (gameId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameId);
      }
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameRequest other) {
      if (other == null) {
        return;
      }
      if (other.action_ != null) {
        if (action_ == null) {
          Action = new global::Spelldawn.Protos.GameAction();
        }
        Action.MergeFrom(other.Action);
      }
      if (other.gameId_ != null) {
        if (gameId_ == null) {
          GameId = new global::Spelldawn.Protos.GameIdentifier();
        }
        GameId.MergeFrom(other.GameId);
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (action_ == null) {
              Action = new global::Spelldawn.Protos.GameAction();
            }
            input.ReadMessage(Action);
            break;
          }
          case 18: {
            if (gameId_ == null) {
              GameId = new global::Spelldawn.Protos.GameIdentifier();
            }
            input.ReadMessage(GameId);
            break;
          }
          case 24: {
            UserId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (action_ == null) {
              Action = new global::Spelldawn.Protos.GameAction();
            }
            input.ReadMessage(Action);
            break;
          }
          case 18: {
            if (gameId_ == null) {
              GameId = new global::Spelldawn.Protos.GameIdentifier();
            }
            input.ReadMessage(GameId);
            break;
          }
          case 24: {
            UserId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DebugLogCommand : pb::IMessage<DebugLogCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DebugLogCommand> _parser = new pb::MessageParser<DebugLogCommand>(() => new DebugLogCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DebugLogCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugLogCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugLogCommand(DebugLogCommand other) : this() {
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugLogCommand Clone() {
      return new DebugLogCommand(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DebugLogCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DebugLogCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DebugLogCommand other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Run a series of command lists simultaneously. Warning: applying multiple
  /// commands to the same game object will have unpredictable results.
  /// </summary>
  public sealed partial class RunInParallelCommand : pb::IMessage<RunInParallelCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RunInParallelCommand> _parser = new pb::MessageParser<RunInParallelCommand>(() => new RunInParallelCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunInParallelCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunInParallelCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunInParallelCommand(RunInParallelCommand other) : this() {
      commands_ = other.commands_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunInParallelCommand Clone() {
      return new RunInParallelCommand(this);
    }

    /// <summary>Field number for the "commands" field.</summary>
    public const int CommandsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.CommandList> _repeated_commands_codec
        = pb::FieldCodec.ForMessage(10, global::Spelldawn.Protos.CommandList.Parser);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.CommandList> commands_ = new pbc::RepeatedField<global::Spelldawn.Protos.CommandList>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.CommandList> Commands {
      get { return commands_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunInParallelCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunInParallelCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!commands_.Equals(other.commands_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= commands_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      commands_.WriteTo(output, _repeated_commands_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      commands_.WriteTo(ref output, _repeated_commands_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += commands_.CalculateSize(_repeated_commands_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunInParallelCommand other) {
      if (other == null) {
        return;
      }
      commands_.Add(other.commands_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            commands_.AddEntriesFrom(input, _repeated_commands_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            commands_.AddEntriesFrom(ref input, _repeated_commands_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Wait before executing the next command in sequence. 
  /// </summary>
  public sealed partial class DelayCommand : pb::IMessage<DelayCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DelayCommand> _parser = new pb::MessageParser<DelayCommand>(() => new DelayCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DelayCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelayCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelayCommand(DelayCommand other) : this() {
      duration_ = other.duration_ != null ? other.duration_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelayCommand Clone() {
      return new DelayCommand(this);
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 1;
    private global::Spelldawn.Protos.TimeValue duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.TimeValue Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DelayCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DelayCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Duration, other.Duration)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (duration_ != null) hash ^= Duration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (duration_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Duration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (duration_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Duration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (duration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Duration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DelayCommand other) {
      if (other == null) {
        return;
      }
      if (other.duration_ != null) {
        if (duration_ == null) {
          Duration = new global::Spelldawn.Protos.TimeValue();
        }
        Duration.MergeFrom(other.Duration);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (duration_ == null) {
              Duration = new global::Spelldawn.Protos.TimeValue();
            }
            input.ReadMessage(Duration);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (duration_ == null) {
              Duration = new global::Spelldawn.Protos.TimeValue();
            }
            input.ReadMessage(Duration);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InterfacePanel : pb::IMessage<InterfacePanel>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InterfacePanel> _parser = new pb::MessageParser<InterfacePanel>(() => new InterfacePanel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InterfacePanel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InterfacePanel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InterfacePanel(InterfacePanel other) : this() {
      address_ = other.address_;
      node_ = other.node_ != null ? other.node_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InterfacePanel Clone() {
      return new InterfacePanel(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private global::Spelldawn.Protos.PanelAddress address_ = global::Spelldawn.Protos.PanelAddress.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PanelAddress Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 2;
    private global::Spelldawn.Protos.Node node_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Node Node {
      get { return node_; }
      set {
        node_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InterfacePanel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InterfacePanel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (!object.Equals(Node, other.Node)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address != global::Spelldawn.Protos.PanelAddress.Unspecified) hash ^= Address.GetHashCode();
      if (node_ != null) hash ^= Node.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Address != global::Spelldawn.Protos.PanelAddress.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Address);
      }
      if (node_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Node);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Address != global::Spelldawn.Protos.PanelAddress.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Address);
      }
      if (node_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Node);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address != global::Spelldawn.Protos.PanelAddress.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Address);
      }
      if (node_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InterfacePanel other) {
      if (other == null) {
        return;
      }
      if (other.Address != global::Spelldawn.Protos.PanelAddress.Unspecified) {
        Address = other.Address;
      }
      if (other.node_ != null) {
        if (node_ == null) {
          Node = new global::Spelldawn.Protos.Node();
        }
        Node.MergeFrom(other.Node);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Address = (global::Spelldawn.Protos.PanelAddress) input.ReadEnum();
            break;
          }
          case 18: {
            if (node_ == null) {
              Node = new global::Spelldawn.Protos.Node();
            }
            input.ReadMessage(Node);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Address = (global::Spelldawn.Protos.PanelAddress) input.ReadEnum();
            break;
          }
          case 18: {
            if (node_ == null) {
              Node = new global::Spelldawn.Protos.Node();
            }
            input.ReadMessage(Node);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InterfaceMainControls : pb::IMessage<InterfaceMainControls>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InterfaceMainControls> _parser = new pb::MessageParser<InterfaceMainControls>(() => new InterfaceMainControls());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InterfaceMainControls> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InterfaceMainControls() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InterfaceMainControls(InterfaceMainControls other) : this() {
      node_ = other.node_ != null ? other.node_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InterfaceMainControls Clone() {
      return new InterfaceMainControls(this);
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 1;
    private global::Spelldawn.Protos.Node node_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Node Node {
      get { return node_; }
      set {
        node_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InterfaceMainControls);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InterfaceMainControls other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Node, other.Node)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (node_ != null) hash ^= Node.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (node_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Node);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (node_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Node);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (node_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InterfaceMainControls other) {
      if (other == null) {
        return;
      }
      if (other.node_ != null) {
        if (node_ == null) {
          Node = new global::Spelldawn.Protos.Node();
        }
        Node.MergeFrom(other.Node);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (node_ == null) {
              Node = new global::Spelldawn.Protos.Node();
            }
            input.ReadMessage(Node);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (node_ == null) {
              Node = new global::Spelldawn.Protos.Node();
            }
            input.ReadMessage(Node);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Render an interface element attached to a specific card. 
  /// </summary>
  public sealed partial class CardAnchorNode : pb::IMessage<CardAnchorNode>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CardAnchorNode> _parser = new pb::MessageParser<CardAnchorNode>(() => new CardAnchorNode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardAnchorNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAnchorNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAnchorNode(CardAnchorNode other) : this() {
      cardId_ = other.cardId_ != null ? other.cardId_.Clone() : null;
      node_ = other.node_ != null ? other.node_.Clone() : null;
      anchorPosition_ = other.anchorPosition_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAnchorNode Clone() {
      return new CardAnchorNode(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private global::Spelldawn.Protos.CardIdentifier cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardIdentifier CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 2;
    private global::Spelldawn.Protos.Node node_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Node Node {
      get { return node_; }
      set {
        node_ = value;
      }
    }

    /// <summary>Field number for the "anchor_position" field.</summary>
    public const int AnchorPositionFieldNumber = 3;
    private global::Spelldawn.Protos.CardNodeAnchorPosition anchorPosition_ = global::Spelldawn.Protos.CardNodeAnchorPosition.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardNodeAnchorPosition AnchorPosition {
      get { return anchorPosition_; }
      set {
        anchorPosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardAnchorNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardAnchorNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CardId, other.CardId)) return false;
      if (!object.Equals(Node, other.Node)) return false;
      if (AnchorPosition != other.AnchorPosition) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cardId_ != null) hash ^= CardId.GetHashCode();
      if (node_ != null) hash ^= Node.GetHashCode();
      if (AnchorPosition != global::Spelldawn.Protos.CardNodeAnchorPosition.Unspecified) hash ^= AnchorPosition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (cardId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardId);
      }
      if (node_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Node);
      }
      if (AnchorPosition != global::Spelldawn.Protos.CardNodeAnchorPosition.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) AnchorPosition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (cardId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardId);
      }
      if (node_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Node);
      }
      if (AnchorPosition != global::Spelldawn.Protos.CardNodeAnchorPosition.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) AnchorPosition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cardId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardId);
      }
      if (node_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
      }
      if (AnchorPosition != global::Spelldawn.Protos.CardNodeAnchorPosition.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AnchorPosition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardAnchorNode other) {
      if (other == null) {
        return;
      }
      if (other.cardId_ != null) {
        if (cardId_ == null) {
          CardId = new global::Spelldawn.Protos.CardIdentifier();
        }
        CardId.MergeFrom(other.CardId);
      }
      if (other.node_ != null) {
        if (node_ == null) {
          Node = new global::Spelldawn.Protos.Node();
        }
        Node.MergeFrom(other.Node);
      }
      if (other.AnchorPosition != global::Spelldawn.Protos.CardNodeAnchorPosition.Unspecified) {
        AnchorPosition = other.AnchorPosition;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cardId_ == null) {
              CardId = new global::Spelldawn.Protos.CardIdentifier();
            }
            input.ReadMessage(CardId);
            break;
          }
          case 18: {
            if (node_ == null) {
              Node = new global::Spelldawn.Protos.Node();
            }
            input.ReadMessage(Node);
            break;
          }
          case 24: {
            AnchorPosition = (global::Spelldawn.Protos.CardNodeAnchorPosition) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (cardId_ == null) {
              CardId = new global::Spelldawn.Protos.CardIdentifier();
            }
            input.ReadMessage(CardId);
            break;
          }
          case 18: {
            if (node_ == null) {
              Node = new global::Spelldawn.Protos.Node();
            }
            input.ReadMessage(Node);
            break;
          }
          case 24: {
            AnchorPosition = (global::Spelldawn.Protos.CardNodeAnchorPosition) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Updates the content of the user interface.
  /// </summary>
  public sealed partial class RenderInterfaceCommand : pb::IMessage<RenderInterfaceCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RenderInterfaceCommand> _parser = new pb::MessageParser<RenderInterfaceCommand>(() => new RenderInterfaceCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RenderInterfaceCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenderInterfaceCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenderInterfaceCommand(RenderInterfaceCommand other) : this() {
      panels_ = other.panels_.Clone();
      mainControls_ = other.mainControls_ != null ? other.mainControls_.Clone() : null;
      cardAnchorNodes_ = other.cardAnchorNodes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenderInterfaceCommand Clone() {
      return new RenderInterfaceCommand(this);
    }

    /// <summary>Field number for the "panels" field.</summary>
    public const int PanelsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.InterfacePanel> _repeated_panels_codec
        = pb::FieldCodec.ForMessage(10, global::Spelldawn.Protos.InterfacePanel.Parser);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.InterfacePanel> panels_ = new pbc::RepeatedField<global::Spelldawn.Protos.InterfacePanel>();
    /// <summary>
    /// List of panels to update.
    ///
    /// A 'panel' is an independently addressable block of UI. The contents
    /// of each known panel are cached and can then be opened immediately
    /// via TogglePanelAction, without waiting for a server response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.InterfacePanel> Panels {
      get { return panels_; }
    }

    /// <summary>Field number for the "main_controls" field.</summary>
    public const int MainControlsFieldNumber = 2;
    private global::Spelldawn.Protos.InterfaceMainControls mainControls_;
    /// <summary>
    /// Controls for game actions such as interface prompts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.InterfaceMainControls MainControls {
      get { return mainControls_; }
      set {
        mainControls_ = value;
      }
    }

    /// <summary>Field number for the "card_anchor_nodes" field.</summary>
    public const int CardAnchorNodesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.CardAnchorNode> _repeated_cardAnchorNodes_codec
        = pb::FieldCodec.ForMessage(26, global::Spelldawn.Protos.CardAnchorNode.Parser);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.CardAnchorNode> cardAnchorNodes_ = new pbc::RepeatedField<global::Spelldawn.Protos.CardAnchorNode>();
    /// <summary>
    /// Controls for specific cards
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.CardAnchorNode> CardAnchorNodes {
      get { return cardAnchorNodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RenderInterfaceCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RenderInterfaceCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!panels_.Equals(other.panels_)) return false;
      if (!object.Equals(MainControls, other.MainControls)) return false;
      if(!cardAnchorNodes_.Equals(other.cardAnchorNodes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= panels_.GetHashCode();
      if (mainControls_ != null) hash ^= MainControls.GetHashCode();
      hash ^= cardAnchorNodes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      panels_.WriteTo(output, _repeated_panels_codec);
      if (mainControls_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MainControls);
      }
      cardAnchorNodes_.WriteTo(output, _repeated_cardAnchorNodes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      panels_.WriteTo(ref output, _repeated_panels_codec);
      if (mainControls_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MainControls);
      }
      cardAnchorNodes_.WriteTo(ref output, _repeated_cardAnchorNodes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += panels_.CalculateSize(_repeated_panels_codec);
      if (mainControls_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MainControls);
      }
      size += cardAnchorNodes_.CalculateSize(_repeated_cardAnchorNodes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RenderInterfaceCommand other) {
      if (other == null) {
        return;
      }
      panels_.Add(other.panels_);
      if (other.mainControls_ != null) {
        if (mainControls_ == null) {
          MainControls = new global::Spelldawn.Protos.InterfaceMainControls();
        }
        MainControls.MergeFrom(other.MainControls);
      }
      cardAnchorNodes_.Add(other.cardAnchorNodes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            panels_.AddEntriesFrom(input, _repeated_panels_codec);
            break;
          }
          case 18: {
            if (mainControls_ == null) {
              MainControls = new global::Spelldawn.Protos.InterfaceMainControls();
            }
            input.ReadMessage(MainControls);
            break;
          }
          case 26: {
            cardAnchorNodes_.AddEntriesFrom(input, _repeated_cardAnchorNodes_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            panels_.AddEntriesFrom(ref input, _repeated_panels_codec);
            break;
          }
          case 18: {
            if (mainControls_ == null) {
              MainControls = new global::Spelldawn.Protos.InterfaceMainControls();
            }
            input.ReadMessage(MainControls);
            break;
          }
          case 26: {
            cardAnchorNodes_.AddEntriesFrom(ref input, _repeated_cardAnchorNodes_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Updates the current GameView state. 
  /// </summary>
  public sealed partial class UpdateGameViewCommand : pb::IMessage<UpdateGameViewCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpdateGameViewCommand> _parser = new pb::MessageParser<UpdateGameViewCommand>(() => new UpdateGameViewCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateGameViewCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateGameViewCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateGameViewCommand(UpdateGameViewCommand other) : this() {
      game_ = other.game_ != null ? other.game_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateGameViewCommand Clone() {
      return new UpdateGameViewCommand(this);
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 1;
    private global::Spelldawn.Protos.GameView game_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.GameView Game {
      get { return game_; }
      set {
        game_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateGameViewCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateGameViewCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Game, other.Game)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (game_ != null) hash ^= Game.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (game_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Game);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (game_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Game);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (game_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Game);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateGameViewCommand other) {
      if (other == null) {
        return;
      }
      if (other.game_ != null) {
        if (game_ == null) {
          Game = new global::Spelldawn.Protos.GameView();
        }
        Game.MergeFrom(other.Game);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (game_ == null) {
              Game = new global::Spelldawn.Protos.GameView();
            }
            input.ReadMessage(Game);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (game_ == null) {
              Game = new global::Spelldawn.Protos.GameView();
            }
            input.ReadMessage(Game);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Animates 'initiator' moving to a room and plays a standard particle effect
  /// based on the visit type.
  /// </summary>
  public sealed partial class VisitRoomCommand : pb::IMessage<VisitRoomCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VisitRoomCommand> _parser = new pb::MessageParser<VisitRoomCommand>(() => new VisitRoomCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VisitRoomCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitRoomCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitRoomCommand(VisitRoomCommand other) : this() {
      initiator_ = other.initiator_;
      roomId_ = other.roomId_;
      visitType_ = other.visitType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitRoomCommand Clone() {
      return new VisitRoomCommand(this);
    }

    /// <summary>Field number for the "initiator" field.</summary>
    public const int InitiatorFieldNumber = 1;
    private global::Spelldawn.Protos.PlayerName initiator_ = global::Spelldawn.Protos.PlayerName.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName Initiator {
      get { return initiator_; }
      set {
        initiator_ = value;
      }
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private global::Spelldawn.Protos.RoomIdentifier roomId_ = global::Spelldawn.Protos.RoomIdentifier.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RoomIdentifier RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "visit_type" field.</summary>
    public const int VisitTypeFieldNumber = 3;
    private global::Spelldawn.Protos.RoomVisitType visitType_ = global::Spelldawn.Protos.RoomVisitType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RoomVisitType VisitType {
      get { return visitType_; }
      set {
        visitType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VisitRoomCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VisitRoomCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Initiator != other.Initiator) return false;
      if (RoomId != other.RoomId) return false;
      if (VisitType != other.VisitType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Initiator != global::Spelldawn.Protos.PlayerName.Unspecified) hash ^= Initiator.GetHashCode();
      if (RoomId != global::Spelldawn.Protos.RoomIdentifier.Unspecified) hash ^= RoomId.GetHashCode();
      if (VisitType != global::Spelldawn.Protos.RoomVisitType.Unspecified) hash ^= VisitType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Initiator != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Initiator);
      }
      if (RoomId != global::Spelldawn.Protos.RoomIdentifier.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RoomId);
      }
      if (VisitType != global::Spelldawn.Protos.RoomVisitType.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) VisitType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Initiator != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Initiator);
      }
      if (RoomId != global::Spelldawn.Protos.RoomIdentifier.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RoomId);
      }
      if (VisitType != global::Spelldawn.Protos.RoomVisitType.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) VisitType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Initiator != global::Spelldawn.Protos.PlayerName.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Initiator);
      }
      if (RoomId != global::Spelldawn.Protos.RoomIdentifier.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomId);
      }
      if (VisitType != global::Spelldawn.Protos.RoomVisitType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VisitType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VisitRoomCommand other) {
      if (other == null) {
        return;
      }
      if (other.Initiator != global::Spelldawn.Protos.PlayerName.Unspecified) {
        Initiator = other.Initiator;
      }
      if (other.RoomId != global::Spelldawn.Protos.RoomIdentifier.Unspecified) {
        RoomId = other.RoomId;
      }
      if (other.VisitType != global::Spelldawn.Protos.RoomVisitType.Unspecified) {
        VisitType = other.VisitType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Initiator = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
          case 16: {
            RoomId = (global::Spelldawn.Protos.RoomIdentifier) input.ReadEnum();
            break;
          }
          case 24: {
            VisitType = (global::Spelldawn.Protos.RoomVisitType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Initiator = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
          case 16: {
            RoomId = (global::Spelldawn.Protos.RoomIdentifier) input.ReadEnum();
            break;
          }
          case 24: {
            VisitType = (global::Spelldawn.Protos.RoomVisitType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Creates a new card, or updates an existing card if one is already present
  /// with the provided CardId.
  ///
  /// When a user takes the 'draw card' game action, an optimistically-created
  /// card is constructed and animated to the staging area face down. If an
  /// optimistically-created card is found, that card is updated with the 'card'
  /// value here instead.
  /// </summary>
  public sealed partial class CreateOrUpdateCardCommand : pb::IMessage<CreateOrUpdateCardCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateOrUpdateCardCommand> _parser = new pb::MessageParser<CreateOrUpdateCardCommand>(() => new CreateOrUpdateCardCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateOrUpdateCardCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateOrUpdateCardCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateOrUpdateCardCommand(CreateOrUpdateCardCommand other) : this() {
      card_ = other.card_ != null ? other.card_.Clone() : null;
      createPosition_ = other.createPosition_ != null ? other.createPosition_.Clone() : null;
      createAnimation_ = other.createAnimation_;
      disableFlipAnimation_ = other.disableFlipAnimation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateOrUpdateCardCommand Clone() {
      return new CreateOrUpdateCardCommand(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private global::Spelldawn.Protos.CardView card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardView Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    /// <summary>Field number for the "create_position" field.</summary>
    public const int CreatePositionFieldNumber = 2;
    private global::Spelldawn.Protos.ObjectPosition createPosition_;
    /// <summary>
    ///
    /// Optionally, a position in which to create this card. Ignored if the card
    /// already exists, if a 'create_animation' is specified, or during optimistic
    /// card draw.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPosition CreatePosition {
      get { return createPosition_; }
      set {
        createPosition_ = value;
      }
    }

    /// <summary>Field number for the "create_animation" field.</summary>
    public const int CreateAnimationFieldNumber = 3;
    private global::Spelldawn.Protos.CardCreationAnimation createAnimation_ = global::Spelldawn.Protos.CardCreationAnimation.Unspecified;
    /// <summary>
    ///
    /// Optionally, an animation to play after creating the card. Ignored if
    /// the card already exists. Ignored during optimistic card draw.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardCreationAnimation CreateAnimation {
      get { return createAnimation_; }
      set {
        createAnimation_ = value;
      }
    }

    /// <summary>Field number for the "disable_flip_animation" field.</summary>
    public const int DisableFlipAnimationFieldNumber = 4;
    private bool disableFlipAnimation_;
    /// <summary>
    ///
    /// Disables the flip animation for this card, allowing it immediately
    /// transition to a revealed state.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableFlipAnimation {
      get { return disableFlipAnimation_; }
      set {
        disableFlipAnimation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateOrUpdateCardCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateOrUpdateCardCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Card, other.Card)) return false;
      if (!object.Equals(CreatePosition, other.CreatePosition)) return false;
      if (CreateAnimation != other.CreateAnimation) return false;
      if (DisableFlipAnimation != other.DisableFlipAnimation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (card_ != null) hash ^= Card.GetHashCode();
      if (createPosition_ != null) hash ^= CreatePosition.GetHashCode();
      if (CreateAnimation != global::Spelldawn.Protos.CardCreationAnimation.Unspecified) hash ^= CreateAnimation.GetHashCode();
      if (DisableFlipAnimation != false) hash ^= DisableFlipAnimation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (card_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Card);
      }
      if (createPosition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CreatePosition);
      }
      if (CreateAnimation != global::Spelldawn.Protos.CardCreationAnimation.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) CreateAnimation);
      }
      if (DisableFlipAnimation != false) {
        output.WriteRawTag(32);
        output.WriteBool(DisableFlipAnimation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (card_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Card);
      }
      if (createPosition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CreatePosition);
      }
      if (CreateAnimation != global::Spelldawn.Protos.CardCreationAnimation.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) CreateAnimation);
      }
      if (DisableFlipAnimation != false) {
        output.WriteRawTag(32);
        output.WriteBool(DisableFlipAnimation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      if (createPosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatePosition);
      }
      if (CreateAnimation != global::Spelldawn.Protos.CardCreationAnimation.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CreateAnimation);
      }
      if (DisableFlipAnimation != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateOrUpdateCardCommand other) {
      if (other == null) {
        return;
      }
      if (other.card_ != null) {
        if (card_ == null) {
          Card = new global::Spelldawn.Protos.CardView();
        }
        Card.MergeFrom(other.Card);
      }
      if (other.createPosition_ != null) {
        if (createPosition_ == null) {
          CreatePosition = new global::Spelldawn.Protos.ObjectPosition();
        }
        CreatePosition.MergeFrom(other.CreatePosition);
      }
      if (other.CreateAnimation != global::Spelldawn.Protos.CardCreationAnimation.Unspecified) {
        CreateAnimation = other.CreateAnimation;
      }
      if (other.DisableFlipAnimation != false) {
        DisableFlipAnimation = other.DisableFlipAnimation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (card_ == null) {
              Card = new global::Spelldawn.Protos.CardView();
            }
            input.ReadMessage(Card);
            break;
          }
          case 18: {
            if (createPosition_ == null) {
              CreatePosition = new global::Spelldawn.Protos.ObjectPosition();
            }
            input.ReadMessage(CreatePosition);
            break;
          }
          case 24: {
            CreateAnimation = (global::Spelldawn.Protos.CardCreationAnimation) input.ReadEnum();
            break;
          }
          case 32: {
            DisableFlipAnimation = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (card_ == null) {
              Card = new global::Spelldawn.Protos.CardView();
            }
            input.ReadMessage(Card);
            break;
          }
          case 18: {
            if (createPosition_ == null) {
              CreatePosition = new global::Spelldawn.Protos.ObjectPosition();
            }
            input.ReadMessage(CreatePosition);
            break;
          }
          case 24: {
            CreateAnimation = (global::Spelldawn.Protos.CardCreationAnimation) input.ReadEnum();
            break;
          }
          case 32: {
            DisableFlipAnimation = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Requests to destroy a card game object.
  /// </summary>
  public sealed partial class DestroyCardCommand : pb::IMessage<DestroyCardCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DestroyCardCommand> _parser = new pb::MessageParser<DestroyCardCommand>(() => new DestroyCardCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DestroyCardCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestroyCardCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestroyCardCommand(DestroyCardCommand other) : this() {
      cardId_ = other.cardId_ != null ? other.cardId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestroyCardCommand Clone() {
      return new DestroyCardCommand(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private global::Spelldawn.Protos.CardIdentifier cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardIdentifier CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DestroyCardCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DestroyCardCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CardId, other.CardId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cardId_ != null) hash ^= CardId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (cardId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (cardId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cardId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DestroyCardCommand other) {
      if (other == null) {
        return;
      }
      if (other.cardId_ != null) {
        if (cardId_ == null) {
          CardId = new global::Spelldawn.Protos.CardIdentifier();
        }
        CardId.MergeFrom(other.CardId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cardId_ == null) {
              CardId = new global::Spelldawn.Protos.CardIdentifier();
            }
            input.ReadMessage(CardId);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (cardId_ == null) {
              CardId = new global::Spelldawn.Protos.CardIdentifier();
            }
            input.ReadMessage(CardId);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Moves a list of GameObjects to a new position.
  ///
  /// Objects already in the target position are skipped.
  /// </summary>
  public sealed partial class MoveGameObjectsCommand : pb::IMessage<MoveGameObjectsCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MoveGameObjectsCommand> _parser = new pb::MessageParser<MoveGameObjectsCommand>(() => new MoveGameObjectsCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveGameObjectsCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveGameObjectsCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveGameObjectsCommand(MoveGameObjectsCommand other) : this() {
      ids_ = other.ids_.Clone();
      position_ = other.position_ != null ? other.position_.Clone() : null;
      disableAnimation_ = other.disableAnimation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveGameObjectsCommand Clone() {
      return new MoveGameObjectsCommand(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.GameObjectIdentifier> _repeated_ids_codec
        = pb::FieldCodec.ForMessage(10, global::Spelldawn.Protos.GameObjectIdentifier.Parser);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.GameObjectIdentifier> ids_ = new pbc::RepeatedField<global::Spelldawn.Protos.GameObjectIdentifier>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.GameObjectIdentifier> Ids {
      get { return ids_; }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Spelldawn.Protos.ObjectPosition position_;
    /// <summary>
    ///
    /// Position at which to insert. If multiple ids are specified, each
    /// additional object will be given a sorting key which is 1 greater than
    /// the previous object's sorting key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPosition Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "disable_animation" field.</summary>
    public const int DisableAnimationFieldNumber = 3;
    private bool disableAnimation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableAnimation {
      get { return disableAnimation_; }
      set {
        disableAnimation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveGameObjectsCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveGameObjectsCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ids_.Equals(other.ids_)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (DisableAnimation != other.DisableAnimation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ids_.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (DisableAnimation != false) hash ^= DisableAnimation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      ids_.WriteTo(output, _repeated_ids_codec);
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (DisableAnimation != false) {
        output.WriteRawTag(24);
        output.WriteBool(DisableAnimation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      ids_.WriteTo(ref output, _repeated_ids_codec);
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (DisableAnimation != false) {
        output.WriteRawTag(24);
        output.WriteBool(DisableAnimation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (DisableAnimation != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveGameObjectsCommand other) {
      if (other == null) {
        return;
      }
      ids_.Add(other.ids_);
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Spelldawn.Protos.ObjectPosition();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.DisableAnimation != false) {
        DisableAnimation = other.DisableAnimation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::Spelldawn.Protos.ObjectPosition();
            }
            input.ReadMessage(Position);
            break;
          }
          case 24: {
            DisableAnimation = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ids_.AddEntriesFrom(ref input, _repeated_ids_codec);
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::Spelldawn.Protos.ObjectPosition();
            }
            input.ReadMessage(Position);
            break;
          }
          case 24: {
            DisableAnimation = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Request to move all GameObjects located at a specific object position to
  /// another object position.
  /// </summary>
  public sealed partial class MoveGameObjectsAtPositionCommand : pb::IMessage<MoveGameObjectsAtPositionCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MoveGameObjectsAtPositionCommand> _parser = new pb::MessageParser<MoveGameObjectsAtPositionCommand>(() => new MoveGameObjectsAtPositionCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveGameObjectsAtPositionCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveGameObjectsAtPositionCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveGameObjectsAtPositionCommand(MoveGameObjectsAtPositionCommand other) : this() {
      sourcePosition_ = other.sourcePosition_ != null ? other.sourcePosition_.Clone() : null;
      targetPosition_ = other.targetPosition_ != null ? other.targetPosition_.Clone() : null;
      disableAnimation_ = other.disableAnimation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveGameObjectsAtPositionCommand Clone() {
      return new MoveGameObjectsAtPositionCommand(this);
    }

    /// <summary>Field number for the "source_position" field.</summary>
    public const int SourcePositionFieldNumber = 1;
    private global::Spelldawn.Protos.ObjectPosition sourcePosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPosition SourcePosition {
      get { return sourcePosition_; }
      set {
        sourcePosition_ = value;
      }
    }

    /// <summary>Field number for the "target_position" field.</summary>
    public const int TargetPositionFieldNumber = 2;
    private global::Spelldawn.Protos.ObjectPosition targetPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPosition TargetPosition {
      get { return targetPosition_; }
      set {
        targetPosition_ = value;
      }
    }

    /// <summary>Field number for the "disable_animation" field.</summary>
    public const int DisableAnimationFieldNumber = 3;
    private bool disableAnimation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableAnimation {
      get { return disableAnimation_; }
      set {
        disableAnimation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveGameObjectsAtPositionCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveGameObjectsAtPositionCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SourcePosition, other.SourcePosition)) return false;
      if (!object.Equals(TargetPosition, other.TargetPosition)) return false;
      if (DisableAnimation != other.DisableAnimation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sourcePosition_ != null) hash ^= SourcePosition.GetHashCode();
      if (targetPosition_ != null) hash ^= TargetPosition.GetHashCode();
      if (DisableAnimation != false) hash ^= DisableAnimation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (sourcePosition_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SourcePosition);
      }
      if (targetPosition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetPosition);
      }
      if (DisableAnimation != false) {
        output.WriteRawTag(24);
        output.WriteBool(DisableAnimation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (sourcePosition_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SourcePosition);
      }
      if (targetPosition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetPosition);
      }
      if (DisableAnimation != false) {
        output.WriteRawTag(24);
        output.WriteBool(DisableAnimation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sourcePosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourcePosition);
      }
      if (targetPosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetPosition);
      }
      if (DisableAnimation != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveGameObjectsAtPositionCommand other) {
      if (other == null) {
        return;
      }
      if (other.sourcePosition_ != null) {
        if (sourcePosition_ == null) {
          SourcePosition = new global::Spelldawn.Protos.ObjectPosition();
        }
        SourcePosition.MergeFrom(other.SourcePosition);
      }
      if (other.targetPosition_ != null) {
        if (targetPosition_ == null) {
          TargetPosition = new global::Spelldawn.Protos.ObjectPosition();
        }
        TargetPosition.MergeFrom(other.TargetPosition);
      }
      if (other.DisableAnimation != false) {
        DisableAnimation = other.DisableAnimation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (sourcePosition_ == null) {
              SourcePosition = new global::Spelldawn.Protos.ObjectPosition();
            }
            input.ReadMessage(SourcePosition);
            break;
          }
          case 18: {
            if (targetPosition_ == null) {
              TargetPosition = new global::Spelldawn.Protos.ObjectPosition();
            }
            input.ReadMessage(TargetPosition);
            break;
          }
          case 24: {
            DisableAnimation = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (sourcePosition_ == null) {
              SourcePosition = new global::Spelldawn.Protos.ObjectPosition();
            }
            input.ReadMessage(SourcePosition);
            break;
          }
          case 18: {
            if (targetPosition_ == null) {
              TargetPosition = new global::Spelldawn.Protos.ObjectPosition();
            }
            input.ReadMessage(TargetPosition);
            break;
          }
          case 24: {
            DisableAnimation = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlaySoundCommand : pb::IMessage<PlaySoundCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlaySoundCommand> _parser = new pb::MessageParser<PlaySoundCommand>(() => new PlaySoundCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlaySoundCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaySoundCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaySoundCommand(PlaySoundCommand other) : this() {
      sound_ = other.sound_ != null ? other.sound_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaySoundCommand Clone() {
      return new PlaySoundCommand(this);
    }

    /// <summary>Field number for the "sound" field.</summary>
    public const int SoundFieldNumber = 1;
    private global::Spelldawn.Protos.AudioClipAddress sound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.AudioClipAddress Sound {
      get { return sound_; }
      set {
        sound_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlaySoundCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlaySoundCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Sound, other.Sound)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sound_ != null) hash ^= Sound.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (sound_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Sound);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (sound_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Sound);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sound_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sound);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlaySoundCommand other) {
      if (other == null) {
        return;
      }
      if (other.sound_ != null) {
        if (sound_ == null) {
          Sound = new global::Spelldawn.Protos.AudioClipAddress();
        }
        Sound.MergeFrom(other.Sound);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (sound_ == null) {
              Sound = new global::Spelldawn.Protos.AudioClipAddress();
            }
            input.ReadMessage(Sound);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (sound_ == null) {
              Sound = new global::Spelldawn.Protos.AudioClipAddress();
            }
            input.ReadMessage(Sound);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SetMusicCommand : pb::IMessage<SetMusicCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SetMusicCommand> _parser = new pb::MessageParser<SetMusicCommand>(() => new SetMusicCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetMusicCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMusicCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMusicCommand(SetMusicCommand other) : this() {
      musicState_ = other.musicState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMusicCommand Clone() {
      return new SetMusicCommand(this);
    }

    /// <summary>Field number for the "music_state" field.</summary>
    public const int MusicStateFieldNumber = 1;
    private global::Spelldawn.Protos.MusicState musicState_ = global::Spelldawn.Protos.MusicState.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.MusicState MusicState {
      get { return musicState_; }
      set {
        musicState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetMusicCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetMusicCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MusicState != other.MusicState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MusicState != global::Spelldawn.Protos.MusicState.Unspecified) hash ^= MusicState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MusicState != global::Spelldawn.Protos.MusicState.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MusicState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MusicState != global::Spelldawn.Protos.MusicState.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MusicState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MusicState != global::Spelldawn.Protos.MusicState.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MusicState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetMusicCommand other) {
      if (other == null) {
        return;
      }
      if (other.MusicState != global::Spelldawn.Protos.MusicState.Unspecified) {
        MusicState = other.MusicState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MusicState = (global::Spelldawn.Protos.MusicState) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MusicState = (global::Spelldawn.Protos.MusicState) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Fire a projectile from one game object at another.
  /// </summary>
  public sealed partial class FireProjectileCommand : pb::IMessage<FireProjectileCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FireProjectileCommand> _parser = new pb::MessageParser<FireProjectileCommand>(() => new FireProjectileCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FireProjectileCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FireProjectileCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FireProjectileCommand(FireProjectileCommand other) : this() {
      sourceId_ = other.sourceId_ != null ? other.sourceId_.Clone() : null;
      targetId_ = other.targetId_ != null ? other.targetId_.Clone() : null;
      projectile_ = other.projectile_ != null ? other.projectile_.Clone() : null;
      travelDuration_ = other.travelDuration_ != null ? other.travelDuration_.Clone() : null;
      fireSound_ = other.fireSound_ != null ? other.fireSound_.Clone() : null;
      impactSound_ = other.impactSound_ != null ? other.impactSound_.Clone() : null;
      additionalHit_ = other.additionalHit_ != null ? other.additionalHit_.Clone() : null;
      additionalHitDelay_ = other.additionalHitDelay_ != null ? other.additionalHitDelay_.Clone() : null;
      waitDuration_ = other.waitDuration_ != null ? other.waitDuration_.Clone() : null;
      hideOnHit_ = other.hideOnHit_;
      jumpToPosition_ = other.jumpToPosition_ != null ? other.jumpToPosition_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FireProjectileCommand Clone() {
      return new FireProjectileCommand(this);
    }

    /// <summary>Field number for the "source_id" field.</summary>
    public const int SourceIdFieldNumber = 1;
    private global::Spelldawn.Protos.GameObjectIdentifier sourceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.GameObjectIdentifier SourceId {
      get { return sourceId_; }
      set {
        sourceId_ = value;
      }
    }

    /// <summary>Field number for the "target_id" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private global::Spelldawn.Protos.GameObjectIdentifier targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.GameObjectIdentifier TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "projectile" field.</summary>
    public const int ProjectileFieldNumber = 3;
    private global::Spelldawn.Protos.ProjectileAddress projectile_;
    /// <summary>
    /// Projectile to fire from the 'source_id' card to 'target_id' 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ProjectileAddress Projectile {
      get { return projectile_; }
      set {
        projectile_ = value;
      }
    }

    /// <summary>Field number for the "travel_duration" field.</summary>
    public const int TravelDurationFieldNumber = 4;
    private global::Spelldawn.Protos.TimeValue travelDuration_;
    /// <summary>
    /// How long the projectile should take to hit its target. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.TimeValue TravelDuration {
      get { return travelDuration_; }
      set {
        travelDuration_ = value;
      }
    }

    /// <summary>Field number for the "fire_sound" field.</summary>
    public const int FireSoundFieldNumber = 5;
    private global::Spelldawn.Protos.AudioClipAddress fireSound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.AudioClipAddress FireSound {
      get { return fireSound_; }
      set {
        fireSound_ = value;
      }
    }

    /// <summary>Field number for the "impact_sound" field.</summary>
    public const int ImpactSoundFieldNumber = 6;
    private global::Spelldawn.Protos.AudioClipAddress impactSound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.AudioClipAddress ImpactSound {
      get { return impactSound_; }
      set {
        impactSound_ = value;
      }
    }

    /// <summary>Field number for the "additional_hit" field.</summary>
    public const int AdditionalHitFieldNumber = 7;
    private global::Spelldawn.Protos.EffectAddress additionalHit_;
    /// <summary>
    /// Additional effect to display on the target on hit. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.EffectAddress AdditionalHit {
      get { return additionalHit_; }
      set {
        additionalHit_ = value;
      }
    }

    /// <summary>Field number for the "additional_hit_delay" field.</summary>
    public const int AdditionalHitDelayFieldNumber = 8;
    private global::Spelldawn.Protos.TimeValue additionalHitDelay_;
    /// <summary>
    ///
    /// Delay before showing the additional hit. If provided, the original
    /// projectile Hit effect will be hidden before showing the new hit effect.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.TimeValue AdditionalHitDelay {
      get { return additionalHitDelay_; }
      set {
        additionalHitDelay_ = value;
      }
    }

    /// <summary>Field number for the "wait_duration" field.</summary>
    public const int WaitDurationFieldNumber = 9;
    private global::Spelldawn.Protos.TimeValue waitDuration_;
    /// <summary>
    ///
    /// During to wait for the project's impact effect before continuing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.TimeValue WaitDuration {
      get { return waitDuration_; }
      set {
        waitDuration_ = value;
      }
    }

    /// <summary>Field number for the "hide_on_hit" field.</summary>
    public const int HideOnHitFieldNumber = 10;
    private bool hideOnHit_;
    /// <summary>
    ///
    /// If true, the target will be hidden after being hit during the
    /// 'wait_duration' and before jumping to 'jump_to_position'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HideOnHit {
      get { return hideOnHit_; }
      set {
        hideOnHit_ = value;
      }
    }

    /// <summary>Field number for the "jump_to_position" field.</summary>
    public const int JumpToPositionFieldNumber = 11;
    private global::Spelldawn.Protos.ObjectPosition jumpToPosition_;
    /// <summary>
    ///
    /// Position for the target to jump to after being hit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPosition JumpToPosition {
      get { return jumpToPosition_; }
      set {
        jumpToPosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FireProjectileCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FireProjectileCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SourceId, other.SourceId)) return false;
      if (!object.Equals(TargetId, other.TargetId)) return false;
      if (!object.Equals(Projectile, other.Projectile)) return false;
      if (!object.Equals(TravelDuration, other.TravelDuration)) return false;
      if (!object.Equals(FireSound, other.FireSound)) return false;
      if (!object.Equals(ImpactSound, other.ImpactSound)) return false;
      if (!object.Equals(AdditionalHit, other.AdditionalHit)) return false;
      if (!object.Equals(AdditionalHitDelay, other.AdditionalHitDelay)) return false;
      if (!object.Equals(WaitDuration, other.WaitDuration)) return false;
      if (HideOnHit != other.HideOnHit) return false;
      if (!object.Equals(JumpToPosition, other.JumpToPosition)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sourceId_ != null) hash ^= SourceId.GetHashCode();
      if (targetId_ != null) hash ^= TargetId.GetHashCode();
      if (projectile_ != null) hash ^= Projectile.GetHashCode();
      if (travelDuration_ != null) hash ^= TravelDuration.GetHashCode();
      if (fireSound_ != null) hash ^= FireSound.GetHashCode();
      if (impactSound_ != null) hash ^= ImpactSound.GetHashCode();
      if (additionalHit_ != null) hash ^= AdditionalHit.GetHashCode();
      if (additionalHitDelay_ != null) hash ^= AdditionalHitDelay.GetHashCode();
      if (waitDuration_ != null) hash ^= WaitDuration.GetHashCode();
      if (HideOnHit != false) hash ^= HideOnHit.GetHashCode();
      if (jumpToPosition_ != null) hash ^= JumpToPosition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (sourceId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SourceId);
      }
      if (targetId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetId);
      }
      if (projectile_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Projectile);
      }
      if (travelDuration_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TravelDuration);
      }
      if (fireSound_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(FireSound);
      }
      if (impactSound_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ImpactSound);
      }
      if (additionalHit_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(AdditionalHit);
      }
      if (additionalHitDelay_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(AdditionalHitDelay);
      }
      if (waitDuration_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(WaitDuration);
      }
      if (HideOnHit != false) {
        output.WriteRawTag(80);
        output.WriteBool(HideOnHit);
      }
      if (jumpToPosition_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(JumpToPosition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (sourceId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SourceId);
      }
      if (targetId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetId);
      }
      if (projectile_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Projectile);
      }
      if (travelDuration_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TravelDuration);
      }
      if (fireSound_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(FireSound);
      }
      if (impactSound_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ImpactSound);
      }
      if (additionalHit_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(AdditionalHit);
      }
      if (additionalHitDelay_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(AdditionalHitDelay);
      }
      if (waitDuration_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(WaitDuration);
      }
      if (HideOnHit != false) {
        output.WriteRawTag(80);
        output.WriteBool(HideOnHit);
      }
      if (jumpToPosition_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(JumpToPosition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sourceId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceId);
      }
      if (targetId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetId);
      }
      if (projectile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Projectile);
      }
      if (travelDuration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TravelDuration);
      }
      if (fireSound_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FireSound);
      }
      if (impactSound_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImpactSound);
      }
      if (additionalHit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdditionalHit);
      }
      if (additionalHitDelay_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdditionalHitDelay);
      }
      if (waitDuration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WaitDuration);
      }
      if (HideOnHit != false) {
        size += 1 + 1;
      }
      if (jumpToPosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JumpToPosition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FireProjectileCommand other) {
      if (other == null) {
        return;
      }
      if (other.sourceId_ != null) {
        if (sourceId_ == null) {
          SourceId = new global::Spelldawn.Protos.GameObjectIdentifier();
        }
        SourceId.MergeFrom(other.SourceId);
      }
      if (other.targetId_ != null) {
        if (targetId_ == null) {
          TargetId = new global::Spelldawn.Protos.GameObjectIdentifier();
        }
        TargetId.MergeFrom(other.TargetId);
      }
      if (other.projectile_ != null) {
        if (projectile_ == null) {
          Projectile = new global::Spelldawn.Protos.ProjectileAddress();
        }
        Projectile.MergeFrom(other.Projectile);
      }
      if (other.travelDuration_ != null) {
        if (travelDuration_ == null) {
          TravelDuration = new global::Spelldawn.Protos.TimeValue();
        }
        TravelDuration.MergeFrom(other.TravelDuration);
      }
      if (other.fireSound_ != null) {
        if (fireSound_ == null) {
          FireSound = new global::Spelldawn.Protos.AudioClipAddress();
        }
        FireSound.MergeFrom(other.FireSound);
      }
      if (other.impactSound_ != null) {
        if (impactSound_ == null) {
          ImpactSound = new global::Spelldawn.Protos.AudioClipAddress();
        }
        ImpactSound.MergeFrom(other.ImpactSound);
      }
      if (other.additionalHit_ != null) {
        if (additionalHit_ == null) {
          AdditionalHit = new global::Spelldawn.Protos.EffectAddress();
        }
        AdditionalHit.MergeFrom(other.AdditionalHit);
      }
      if (other.additionalHitDelay_ != null) {
        if (additionalHitDelay_ == null) {
          AdditionalHitDelay = new global::Spelldawn.Protos.TimeValue();
        }
        AdditionalHitDelay.MergeFrom(other.AdditionalHitDelay);
      }
      if (other.waitDuration_ != null) {
        if (waitDuration_ == null) {
          WaitDuration = new global::Spelldawn.Protos.TimeValue();
        }
        WaitDuration.MergeFrom(other.WaitDuration);
      }
      if (other.HideOnHit != false) {
        HideOnHit = other.HideOnHit;
      }
      if (other.jumpToPosition_ != null) {
        if (jumpToPosition_ == null) {
          JumpToPosition = new global::Spelldawn.Protos.ObjectPosition();
        }
        JumpToPosition.MergeFrom(other.JumpToPosition);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (sourceId_ == null) {
              SourceId = new global::Spelldawn.Protos.GameObjectIdentifier();
            }
            input.ReadMessage(SourceId);
            break;
          }
          case 18: {
            if (targetId_ == null) {
              TargetId = new global::Spelldawn.Protos.GameObjectIdentifier();
            }
            input.ReadMessage(TargetId);
            break;
          }
          case 26: {
            if (projectile_ == null) {
              Projectile = new global::Spelldawn.Protos.ProjectileAddress();
            }
            input.ReadMessage(Projectile);
            break;
          }
          case 34: {
            if (travelDuration_ == null) {
              TravelDuration = new global::Spelldawn.Protos.TimeValue();
            }
            input.ReadMessage(TravelDuration);
            break;
          }
          case 42: {
            if (fireSound_ == null) {
              FireSound = new global::Spelldawn.Protos.AudioClipAddress();
            }
            input.ReadMessage(FireSound);
            break;
          }
          case 50: {
            if (impactSound_ == null) {
              ImpactSound = new global::Spelldawn.Protos.AudioClipAddress();
            }
            input.ReadMessage(ImpactSound);
            break;
          }
          case 58: {
            if (additionalHit_ == null) {
              AdditionalHit = new global::Spelldawn.Protos.EffectAddress();
            }
            input.ReadMessage(AdditionalHit);
            break;
          }
          case 66: {
            if (additionalHitDelay_ == null) {
              AdditionalHitDelay = new global::Spelldawn.Protos.TimeValue();
            }
            input.ReadMessage(AdditionalHitDelay);
            break;
          }
          case 74: {
            if (waitDuration_ == null) {
              WaitDuration = new global::Spelldawn.Protos.TimeValue();
            }
            input.ReadMessage(WaitDuration);
            break;
          }
          case 80: {
            HideOnHit = input.ReadBool();
            break;
          }
          case 90: {
            if (jumpToPosition_ == null) {
              JumpToPosition = new global::Spelldawn.Protos.ObjectPosition();
            }
            input.ReadMessage(JumpToPosition);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (sourceId_ == null) {
              SourceId = new global::Spelldawn.Protos.GameObjectIdentifier();
            }
            input.ReadMessage(SourceId);
            break;
          }
          case 18: {
            if (targetId_ == null) {
              TargetId = new global::Spelldawn.Protos.GameObjectIdentifier();
            }
            input.ReadMessage(TargetId);
            break;
          }
          case 26: {
            if (projectile_ == null) {
              Projectile = new global::Spelldawn.Protos.ProjectileAddress();
            }
            input.ReadMessage(Projectile);
            break;
          }
          case 34: {
            if (travelDuration_ == null) {
              TravelDuration = new global::Spelldawn.Protos.TimeValue();
            }
            input.ReadMessage(TravelDuration);
            break;
          }
          case 42: {
            if (fireSound_ == null) {
              FireSound = new global::Spelldawn.Protos.AudioClipAddress();
            }
            input.ReadMessage(FireSound);
            break;
          }
          case 50: {
            if (impactSound_ == null) {
              ImpactSound = new global::Spelldawn.Protos.AudioClipAddress();
            }
            input.ReadMessage(ImpactSound);
            break;
          }
          case 58: {
            if (additionalHit_ == null) {
              AdditionalHit = new global::Spelldawn.Protos.EffectAddress();
            }
            input.ReadMessage(AdditionalHit);
            break;
          }
          case 66: {
            if (additionalHitDelay_ == null) {
              AdditionalHitDelay = new global::Spelldawn.Protos.TimeValue();
            }
            input.ReadMessage(AdditionalHitDelay);
            break;
          }
          case 74: {
            if (waitDuration_ == null) {
              WaitDuration = new global::Spelldawn.Protos.TimeValue();
            }
            input.ReadMessage(WaitDuration);
            break;
          }
          case 80: {
            HideOnHit = input.ReadBool();
            break;
          }
          case 90: {
            if (jumpToPosition_ == null) {
              JumpToPosition = new global::Spelldawn.Protos.ObjectPosition();
            }
            input.ReadMessage(JumpToPosition);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlayEffectPosition : pb::IMessage<PlayEffectPosition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayEffectPosition> _parser = new pb::MessageParser<PlayEffectPosition>(() => new PlayEffectPosition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayEffectPosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayEffectPosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayEffectPosition(PlayEffectPosition other) : this() {
      switch (other.EffectPositionCase) {
        case EffectPositionOneofCase.GameObject:
          GameObject = other.GameObject.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayEffectPosition Clone() {
      return new PlayEffectPosition(this);
    }

    /// <summary>Field number for the "game_object" field.</summary>
    public const int GameObjectFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.GameObjectIdentifier GameObject {
      get { return effectPositionCase_ == EffectPositionOneofCase.GameObject ? (global::Spelldawn.Protos.GameObjectIdentifier) effectPosition_ : null; }
      set {
        effectPosition_ = value;
        effectPositionCase_ = value == null ? EffectPositionOneofCase.None : EffectPositionOneofCase.GameObject;
      }
    }

    private object effectPosition_;
    /// <summary>Enum of possible cases for the "effect_position" oneof.</summary>
    public enum EffectPositionOneofCase {
      None = 0,
      GameObject = 1,
    }
    private EffectPositionOneofCase effectPositionCase_ = EffectPositionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectPositionOneofCase EffectPositionCase {
      get { return effectPositionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEffectPosition() {
      effectPositionCase_ = EffectPositionOneofCase.None;
      effectPosition_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayEffectPosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayEffectPosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameObject, other.GameObject)) return false;
      if (EffectPositionCase != other.EffectPositionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (effectPositionCase_ == EffectPositionOneofCase.GameObject) hash ^= GameObject.GetHashCode();
      hash ^= (int) effectPositionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (effectPositionCase_ == EffectPositionOneofCase.GameObject) {
        output.WriteRawTag(10);
        output.WriteMessage(GameObject);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (effectPositionCase_ == EffectPositionOneofCase.GameObject) {
        output.WriteRawTag(10);
        output.WriteMessage(GameObject);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (effectPositionCase_ == EffectPositionOneofCase.GameObject) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameObject);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayEffectPosition other) {
      if (other == null) {
        return;
      }
      switch (other.EffectPositionCase) {
        case EffectPositionOneofCase.GameObject:
          if (GameObject == null) {
            GameObject = new global::Spelldawn.Protos.GameObjectIdentifier();
          }
          GameObject.MergeFrom(other.GameObject);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Spelldawn.Protos.GameObjectIdentifier subBuilder = new global::Spelldawn.Protos.GameObjectIdentifier();
            if (effectPositionCase_ == EffectPositionOneofCase.GameObject) {
              subBuilder.MergeFrom(GameObject);
            }
            input.ReadMessage(subBuilder);
            GameObject = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Spelldawn.Protos.GameObjectIdentifier subBuilder = new global::Spelldawn.Protos.GameObjectIdentifier();
            if (effectPositionCase_ == EffectPositionOneofCase.GameObject) {
              subBuilder.MergeFrom(GameObject);
            }
            input.ReadMessage(subBuilder);
            GameObject = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlayEffectCommand : pb::IMessage<PlayEffectCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayEffectCommand> _parser = new pb::MessageParser<PlayEffectCommand>(() => new PlayEffectCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayEffectCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayEffectCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayEffectCommand(PlayEffectCommand other) : this() {
      effect_ = other.effect_ != null ? other.effect_.Clone() : null;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      Scale = other.Scale;
      duration_ = other.duration_ != null ? other.duration_.Clone() : null;
      sound_ = other.sound_ != null ? other.sound_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayEffectCommand Clone() {
      return new PlayEffectCommand(this);
    }

    /// <summary>Field number for the "effect" field.</summary>
    public const int EffectFieldNumber = 1;
    private global::Spelldawn.Protos.EffectAddress effect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.EffectAddress Effect {
      get { return effect_; }
      set {
        effect_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Spelldawn.Protos.PlayEffectPosition position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayEffectPosition Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 3;
    private static readonly pb::FieldCodec<float?> _single_scale_codec = pb::FieldCodec.ForStructWrapper<float>(26);
    private float? scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }


    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 4;
    private global::Spelldawn.Protos.TimeValue duration_;
    /// <summary>
    /// How long to wait before continuing. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.TimeValue Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "sound" field.</summary>
    public const int SoundFieldNumber = 5;
    private global::Spelldawn.Protos.AudioClipAddress sound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.AudioClipAddress Sound {
      get { return sound_; }
      set {
        sound_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayEffectCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayEffectCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Effect, other.Effect)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      if (!object.Equals(Duration, other.Duration)) return false;
      if (!object.Equals(Sound, other.Sound)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (effect_ != null) hash ^= Effect.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (scale_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Scale);
      if (duration_ != null) hash ^= Duration.GetHashCode();
      if (sound_ != null) hash ^= Sound.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (effect_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Effect);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (scale_ != null) {
        _single_scale_codec.WriteTagAndValue(output, Scale);
      }
      if (duration_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Duration);
      }
      if (sound_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Sound);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (effect_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Effect);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (scale_ != null) {
        _single_scale_codec.WriteTagAndValue(ref output, Scale);
      }
      if (duration_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Duration);
      }
      if (sound_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Sound);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (effect_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Effect);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (scale_ != null) {
        size += _single_scale_codec.CalculateSizeWithTag(Scale);
      }
      if (duration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Duration);
      }
      if (sound_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sound);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayEffectCommand other) {
      if (other == null) {
        return;
      }
      if (other.effect_ != null) {
        if (effect_ == null) {
          Effect = new global::Spelldawn.Protos.EffectAddress();
        }
        Effect.MergeFrom(other.Effect);
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Spelldawn.Protos.PlayEffectPosition();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.scale_ != null) {
        if (scale_ == null || other.Scale != 0F) {
          Scale = other.Scale;
        }
      }
      if (other.duration_ != null) {
        if (duration_ == null) {
          Duration = new global::Spelldawn.Protos.TimeValue();
        }
        Duration.MergeFrom(other.Duration);
      }
      if (other.sound_ != null) {
        if (sound_ == null) {
          Sound = new global::Spelldawn.Protos.AudioClipAddress();
        }
        Sound.MergeFrom(other.Sound);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (effect_ == null) {
              Effect = new global::Spelldawn.Protos.EffectAddress();
            }
            input.ReadMessage(Effect);
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::Spelldawn.Protos.PlayEffectPosition();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            float? value = _single_scale_codec.Read(input);
            if (scale_ == null || value != 0F) {
              Scale = value;
            }
            break;
          }
          case 34: {
            if (duration_ == null) {
              Duration = new global::Spelldawn.Protos.TimeValue();
            }
            input.ReadMessage(Duration);
            break;
          }
          case 42: {
            if (sound_ == null) {
              Sound = new global::Spelldawn.Protos.AudioClipAddress();
            }
            input.ReadMessage(Sound);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (effect_ == null) {
              Effect = new global::Spelldawn.Protos.EffectAddress();
            }
            input.ReadMessage(Effect);
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::Spelldawn.Protos.PlayEffectPosition();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            float? value = _single_scale_codec.Read(ref input);
            if (scale_ == null || value != 0F) {
              Scale = value;
            }
            break;
          }
          case 34: {
            if (duration_ == null) {
              Duration = new global::Spelldawn.Protos.TimeValue();
            }
            input.ReadMessage(Duration);
            break;
          }
          case 42: {
            if (sound_ == null) {
              Sound = new global::Spelldawn.Protos.AudioClipAddress();
            }
            input.ReadMessage(Sound);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DisplayGameMessageCommand : pb::IMessage<DisplayGameMessageCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DisplayGameMessageCommand> _parser = new pb::MessageParser<DisplayGameMessageCommand>(() => new DisplayGameMessageCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisplayGameMessageCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayGameMessageCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayGameMessageCommand(DisplayGameMessageCommand other) : this() {
      messageType_ = other.messageType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayGameMessageCommand Clone() {
      return new DisplayGameMessageCommand(this);
    }

    /// <summary>Field number for the "message_type" field.</summary>
    public const int MessageTypeFieldNumber = 1;
    private global::Spelldawn.Protos.GameMessageType messageType_ = global::Spelldawn.Protos.GameMessageType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.GameMessageType MessageType {
      get { return messageType_; }
      set {
        messageType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisplayGameMessageCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisplayGameMessageCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageType != other.MessageType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageType != global::Spelldawn.Protos.GameMessageType.Unspecified) hash ^= MessageType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MessageType != global::Spelldawn.Protos.GameMessageType.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MessageType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MessageType != global::Spelldawn.Protos.GameMessageType.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MessageType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageType != global::Spelldawn.Protos.GameMessageType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MessageType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisplayGameMessageCommand other) {
      if (other == null) {
        return;
      }
      if (other.MessageType != global::Spelldawn.Protos.GameMessageType.Unspecified) {
        MessageType = other.MessageType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MessageType = (global::Spelldawn.Protos.GameMessageType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MessageType = (global::Spelldawn.Protos.GameMessageType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Used to hide and show all game UI elements. 
  /// </summary>
  public sealed partial class SetGameObjectsEnabledCommand : pb::IMessage<SetGameObjectsEnabledCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SetGameObjectsEnabledCommand> _parser = new pb::MessageParser<SetGameObjectsEnabledCommand>(() => new SetGameObjectsEnabledCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetGameObjectsEnabledCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGameObjectsEnabledCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGameObjectsEnabledCommand(SetGameObjectsEnabledCommand other) : this() {
      gameObjectsEnabled_ = other.gameObjectsEnabled_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGameObjectsEnabledCommand Clone() {
      return new SetGameObjectsEnabledCommand(this);
    }

    /// <summary>Field number for the "game_objects_enabled" field.</summary>
    public const int GameObjectsEnabledFieldNumber = 1;
    private bool gameObjectsEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GameObjectsEnabled {
      get { return gameObjectsEnabled_; }
      set {
        gameObjectsEnabled_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetGameObjectsEnabledCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetGameObjectsEnabledCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameObjectsEnabled != other.GameObjectsEnabled) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameObjectsEnabled != false) hash ^= GameObjectsEnabled.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GameObjectsEnabled != false) {
        output.WriteRawTag(8);
        output.WriteBool(GameObjectsEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GameObjectsEnabled != false) {
        output.WriteRawTag(8);
        output.WriteBool(GameObjectsEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameObjectsEnabled != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetGameObjectsEnabledCommand other) {
      if (other == null) {
        return;
      }
      if (other.GameObjectsEnabled != false) {
        GameObjectsEnabled = other.GameObjectsEnabled;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameObjectsEnabled = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GameObjectsEnabled = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DisplayRewardsCommand : pb::IMessage<DisplayRewardsCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DisplayRewardsCommand> _parser = new pb::MessageParser<DisplayRewardsCommand>(() => new DisplayRewardsCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisplayRewardsCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayRewardsCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayRewardsCommand(DisplayRewardsCommand other) : this() {
      rewards_ = other.rewards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayRewardsCommand Clone() {
      return new DisplayRewardsCommand(this);
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.CardView> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(10, global::Spelldawn.Protos.CardView.Parser);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.CardView> rewards_ = new pbc::RepeatedField<global::Spelldawn.Protos.CardView>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.CardView> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisplayRewardsCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisplayRewardsCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rewards_.Equals(other.rewards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rewards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      rewards_.WriteTo(output, _repeated_rewards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      rewards_.WriteTo(ref output, _repeated_rewards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisplayRewardsCommand other) {
      if (other == null) {
        return;
      }
      rewards_.Add(other.rewards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            rewards_.AddEntriesFrom(ref input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  //// Loads a named Unity scene
  /// </summary>
  public sealed partial class LoadSceneCommand : pb::IMessage<LoadSceneCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LoadSceneCommand> _parser = new pb::MessageParser<LoadSceneCommand>(() => new LoadSceneCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadSceneCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadSceneCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadSceneCommand(LoadSceneCommand other) : this() {
      sceneName_ = other.sceneName_;
      mode_ = other.mode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadSceneCommand Clone() {
      return new LoadSceneCommand(this);
    }

    /// <summary>Field number for the "scene_name" field.</summary>
    public const int SceneNameFieldNumber = 1;
    private string sceneName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SceneName {
      get { return sceneName_; }
      set {
        sceneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 2;
    private global::Spelldawn.Protos.SceneLoadMode mode_ = global::Spelldawn.Protos.SceneLoadMode.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.SceneLoadMode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadSceneCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadSceneCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SceneName != other.SceneName) return false;
      if (Mode != other.Mode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SceneName.Length != 0) hash ^= SceneName.GetHashCode();
      if (Mode != global::Spelldawn.Protos.SceneLoadMode.Unspecified) hash ^= Mode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SceneName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SceneName);
      }
      if (Mode != global::Spelldawn.Protos.SceneLoadMode.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Mode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SceneName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SceneName);
      }
      if (Mode != global::Spelldawn.Protos.SceneLoadMode.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Mode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SceneName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneName);
      }
      if (Mode != global::Spelldawn.Protos.SceneLoadMode.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadSceneCommand other) {
      if (other == null) {
        return;
      }
      if (other.SceneName.Length != 0) {
        SceneName = other.SceneName;
      }
      if (other.Mode != global::Spelldawn.Protos.SceneLoadMode.Unspecified) {
        Mode = other.Mode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SceneName = input.ReadString();
            break;
          }
          case 16: {
            Mode = (global::Spelldawn.Protos.SceneLoadMode) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            SceneName = input.ReadString();
            break;
          }
          case 16: {
            Mode = (global::Spelldawn.Protos.SceneLoadMode) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameCommand : pb::IMessage<GameCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameCommand> _parser = new pb::MessageParser<GameCommand>(() => new GameCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameCommand(GameCommand other) : this() {
      switch (other.CommandCase) {
        case CommandOneofCase.DebugLog:
          DebugLog = other.DebugLog.Clone();
          break;
        case CommandOneofCase.RunInParallel:
          RunInParallel = other.RunInParallel.Clone();
          break;
        case CommandOneofCase.Delay:
          Delay = other.Delay.Clone();
          break;
        case CommandOneofCase.RenderInterface:
          RenderInterface = other.RenderInterface.Clone();
          break;
        case CommandOneofCase.UpdateGameView:
          UpdateGameView = other.UpdateGameView.Clone();
          break;
        case CommandOneofCase.VisitRoom:
          VisitRoom = other.VisitRoom.Clone();
          break;
        case CommandOneofCase.CreateOrUpdateCard:
          CreateOrUpdateCard = other.CreateOrUpdateCard.Clone();
          break;
        case CommandOneofCase.DestroyCard:
          DestroyCard = other.DestroyCard.Clone();
          break;
        case CommandOneofCase.MoveGameObjects:
          MoveGameObjects = other.MoveGameObjects.Clone();
          break;
        case CommandOneofCase.MoveObjectsAtPosition:
          MoveObjectsAtPosition = other.MoveObjectsAtPosition.Clone();
          break;
        case CommandOneofCase.PlaySound:
          PlaySound = other.PlaySound.Clone();
          break;
        case CommandOneofCase.SetMusic:
          SetMusic = other.SetMusic.Clone();
          break;
        case CommandOneofCase.FireProjectile:
          FireProjectile = other.FireProjectile.Clone();
          break;
        case CommandOneofCase.PlayEffect:
          PlayEffect = other.PlayEffect.Clone();
          break;
        case CommandOneofCase.DisplayGameMessage:
          DisplayGameMessage = other.DisplayGameMessage.Clone();
          break;
        case CommandOneofCase.SetGameObjectsEnabled:
          SetGameObjectsEnabled = other.SetGameObjectsEnabled.Clone();
          break;
        case CommandOneofCase.DisplayRewards:
          DisplayRewards = other.DisplayRewards.Clone();
          break;
        case CommandOneofCase.LoadScene:
          LoadScene = other.LoadScene.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameCommand Clone() {
      return new GameCommand(this);
    }

    /// <summary>Field number for the "debug_log" field.</summary>
    public const int DebugLogFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.DebugLogCommand DebugLog {
      get { return commandCase_ == CommandOneofCase.DebugLog ? (global::Spelldawn.Protos.DebugLogCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.DebugLog;
      }
    }

    /// <summary>Field number for the "run_in_parallel" field.</summary>
    public const int RunInParallelFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RunInParallelCommand RunInParallel {
      get { return commandCase_ == CommandOneofCase.RunInParallel ? (global::Spelldawn.Protos.RunInParallelCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.RunInParallel;
      }
    }

    /// <summary>Field number for the "delay" field.</summary>
    public const int DelayFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.DelayCommand Delay {
      get { return commandCase_ == CommandOneofCase.Delay ? (global::Spelldawn.Protos.DelayCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.Delay;
      }
    }

    /// <summary>Field number for the "render_interface" field.</summary>
    public const int RenderInterfaceFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RenderInterfaceCommand RenderInterface {
      get { return commandCase_ == CommandOneofCase.RenderInterface ? (global::Spelldawn.Protos.RenderInterfaceCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.RenderInterface;
      }
    }

    /// <summary>Field number for the "update_game_view" field.</summary>
    public const int UpdateGameViewFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.UpdateGameViewCommand UpdateGameView {
      get { return commandCase_ == CommandOneofCase.UpdateGameView ? (global::Spelldawn.Protos.UpdateGameViewCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.UpdateGameView;
      }
    }

    /// <summary>Field number for the "visit_room" field.</summary>
    public const int VisitRoomFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.VisitRoomCommand VisitRoom {
      get { return commandCase_ == CommandOneofCase.VisitRoom ? (global::Spelldawn.Protos.VisitRoomCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.VisitRoom;
      }
    }

    /// <summary>Field number for the "create_or_update_card" field.</summary>
    public const int CreateOrUpdateCardFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CreateOrUpdateCardCommand CreateOrUpdateCard {
      get { return commandCase_ == CommandOneofCase.CreateOrUpdateCard ? (global::Spelldawn.Protos.CreateOrUpdateCardCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.CreateOrUpdateCard;
      }
    }

    /// <summary>Field number for the "destroy_card" field.</summary>
    public const int DestroyCardFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.DestroyCardCommand DestroyCard {
      get { return commandCase_ == CommandOneofCase.DestroyCard ? (global::Spelldawn.Protos.DestroyCardCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.DestroyCard;
      }
    }

    /// <summary>Field number for the "move_game_objects" field.</summary>
    public const int MoveGameObjectsFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.MoveGameObjectsCommand MoveGameObjects {
      get { return commandCase_ == CommandOneofCase.MoveGameObjects ? (global::Spelldawn.Protos.MoveGameObjectsCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.MoveGameObjects;
      }
    }

    /// <summary>Field number for the "move_objects_at_position" field.</summary>
    public const int MoveObjectsAtPositionFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.MoveGameObjectsAtPositionCommand MoveObjectsAtPosition {
      get { return commandCase_ == CommandOneofCase.MoveObjectsAtPosition ? (global::Spelldawn.Protos.MoveGameObjectsAtPositionCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.MoveObjectsAtPosition;
      }
    }

    /// <summary>Field number for the "play_sound" field.</summary>
    public const int PlaySoundFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlaySoundCommand PlaySound {
      get { return commandCase_ == CommandOneofCase.PlaySound ? (global::Spelldawn.Protos.PlaySoundCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.PlaySound;
      }
    }

    /// <summary>Field number for the "set_music" field.</summary>
    public const int SetMusicFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.SetMusicCommand SetMusic {
      get { return commandCase_ == CommandOneofCase.SetMusic ? (global::Spelldawn.Protos.SetMusicCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.SetMusic;
      }
    }

    /// <summary>Field number for the "fire_projectile" field.</summary>
    public const int FireProjectileFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FireProjectileCommand FireProjectile {
      get { return commandCase_ == CommandOneofCase.FireProjectile ? (global::Spelldawn.Protos.FireProjectileCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.FireProjectile;
      }
    }

    /// <summary>Field number for the "play_effect" field.</summary>
    public const int PlayEffectFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayEffectCommand PlayEffect {
      get { return commandCase_ == CommandOneofCase.PlayEffect ? (global::Spelldawn.Protos.PlayEffectCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.PlayEffect;
      }
    }

    /// <summary>Field number for the "display_game_message" field.</summary>
    public const int DisplayGameMessageFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.DisplayGameMessageCommand DisplayGameMessage {
      get { return commandCase_ == CommandOneofCase.DisplayGameMessage ? (global::Spelldawn.Protos.DisplayGameMessageCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.DisplayGameMessage;
      }
    }

    /// <summary>Field number for the "set_game_objects_enabled" field.</summary>
    public const int SetGameObjectsEnabledFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.SetGameObjectsEnabledCommand SetGameObjectsEnabled {
      get { return commandCase_ == CommandOneofCase.SetGameObjectsEnabled ? (global::Spelldawn.Protos.SetGameObjectsEnabledCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.SetGameObjectsEnabled;
      }
    }

    /// <summary>Field number for the "display_rewards" field.</summary>
    public const int DisplayRewardsFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.DisplayRewardsCommand DisplayRewards {
      get { return commandCase_ == CommandOneofCase.DisplayRewards ? (global::Spelldawn.Protos.DisplayRewardsCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.DisplayRewards;
      }
    }

    /// <summary>Field number for the "load_scene" field.</summary>
    public const int LoadSceneFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.LoadSceneCommand LoadScene {
      get { return commandCase_ == CommandOneofCase.LoadScene ? (global::Spelldawn.Protos.LoadSceneCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.LoadScene;
      }
    }

    private object command_;
    /// <summary>Enum of possible cases for the "command" oneof.</summary>
    public enum CommandOneofCase {
      None = 0,
      DebugLog = 1,
      RunInParallel = 2,
      Delay = 3,
      RenderInterface = 4,
      UpdateGameView = 5,
      VisitRoom = 8,
      CreateOrUpdateCard = 9,
      DestroyCard = 10,
      MoveGameObjects = 11,
      MoveObjectsAtPosition = 12,
      PlaySound = 13,
      SetMusic = 14,
      FireProjectile = 15,
      PlayEffect = 16,
      DisplayGameMessage = 17,
      SetGameObjectsEnabled = 18,
      DisplayRewards = 19,
      LoadScene = 20,
    }
    private CommandOneofCase commandCase_ = CommandOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandOneofCase CommandCase {
      get { return commandCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCommand() {
      commandCase_ = CommandOneofCase.None;
      command_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DebugLog, other.DebugLog)) return false;
      if (!object.Equals(RunInParallel, other.RunInParallel)) return false;
      if (!object.Equals(Delay, other.Delay)) return false;
      if (!object.Equals(RenderInterface, other.RenderInterface)) return false;
      if (!object.Equals(UpdateGameView, other.UpdateGameView)) return false;
      if (!object.Equals(VisitRoom, other.VisitRoom)) return false;
      if (!object.Equals(CreateOrUpdateCard, other.CreateOrUpdateCard)) return false;
      if (!object.Equals(DestroyCard, other.DestroyCard)) return false;
      if (!object.Equals(MoveGameObjects, other.MoveGameObjects)) return false;
      if (!object.Equals(MoveObjectsAtPosition, other.MoveObjectsAtPosition)) return false;
      if (!object.Equals(PlaySound, other.PlaySound)) return false;
      if (!object.Equals(SetMusic, other.SetMusic)) return false;
      if (!object.Equals(FireProjectile, other.FireProjectile)) return false;
      if (!object.Equals(PlayEffect, other.PlayEffect)) return false;
      if (!object.Equals(DisplayGameMessage, other.DisplayGameMessage)) return false;
      if (!object.Equals(SetGameObjectsEnabled, other.SetGameObjectsEnabled)) return false;
      if (!object.Equals(DisplayRewards, other.DisplayRewards)) return false;
      if (!object.Equals(LoadScene, other.LoadScene)) return false;
      if (CommandCase != other.CommandCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (commandCase_ == CommandOneofCase.DebugLog) hash ^= DebugLog.GetHashCode();
      if (commandCase_ == CommandOneofCase.RunInParallel) hash ^= RunInParallel.GetHashCode();
      if (commandCase_ == CommandOneofCase.Delay) hash ^= Delay.GetHashCode();
      if (commandCase_ == CommandOneofCase.RenderInterface) hash ^= RenderInterface.GetHashCode();
      if (commandCase_ == CommandOneofCase.UpdateGameView) hash ^= UpdateGameView.GetHashCode();
      if (commandCase_ == CommandOneofCase.VisitRoom) hash ^= VisitRoom.GetHashCode();
      if (commandCase_ == CommandOneofCase.CreateOrUpdateCard) hash ^= CreateOrUpdateCard.GetHashCode();
      if (commandCase_ == CommandOneofCase.DestroyCard) hash ^= DestroyCard.GetHashCode();
      if (commandCase_ == CommandOneofCase.MoveGameObjects) hash ^= MoveGameObjects.GetHashCode();
      if (commandCase_ == CommandOneofCase.MoveObjectsAtPosition) hash ^= MoveObjectsAtPosition.GetHashCode();
      if (commandCase_ == CommandOneofCase.PlaySound) hash ^= PlaySound.GetHashCode();
      if (commandCase_ == CommandOneofCase.SetMusic) hash ^= SetMusic.GetHashCode();
      if (commandCase_ == CommandOneofCase.FireProjectile) hash ^= FireProjectile.GetHashCode();
      if (commandCase_ == CommandOneofCase.PlayEffect) hash ^= PlayEffect.GetHashCode();
      if (commandCase_ == CommandOneofCase.DisplayGameMessage) hash ^= DisplayGameMessage.GetHashCode();
      if (commandCase_ == CommandOneofCase.SetGameObjectsEnabled) hash ^= SetGameObjectsEnabled.GetHashCode();
      if (commandCase_ == CommandOneofCase.DisplayRewards) hash ^= DisplayRewards.GetHashCode();
      if (commandCase_ == CommandOneofCase.LoadScene) hash ^= LoadScene.GetHashCode();
      hash ^= (int) commandCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (commandCase_ == CommandOneofCase.DebugLog) {
        output.WriteRawTag(10);
        output.WriteMessage(DebugLog);
      }
      if (commandCase_ == CommandOneofCase.RunInParallel) {
        output.WriteRawTag(18);
        output.WriteMessage(RunInParallel);
      }
      if (commandCase_ == CommandOneofCase.Delay) {
        output.WriteRawTag(26);
        output.WriteMessage(Delay);
      }
      if (commandCase_ == CommandOneofCase.RenderInterface) {
        output.WriteRawTag(34);
        output.WriteMessage(RenderInterface);
      }
      if (commandCase_ == CommandOneofCase.UpdateGameView) {
        output.WriteRawTag(42);
        output.WriteMessage(UpdateGameView);
      }
      if (commandCase_ == CommandOneofCase.VisitRoom) {
        output.WriteRawTag(66);
        output.WriteMessage(VisitRoom);
      }
      if (commandCase_ == CommandOneofCase.CreateOrUpdateCard) {
        output.WriteRawTag(74);
        output.WriteMessage(CreateOrUpdateCard);
      }
      if (commandCase_ == CommandOneofCase.DestroyCard) {
        output.WriteRawTag(82);
        output.WriteMessage(DestroyCard);
      }
      if (commandCase_ == CommandOneofCase.MoveGameObjects) {
        output.WriteRawTag(90);
        output.WriteMessage(MoveGameObjects);
      }
      if (commandCase_ == CommandOneofCase.MoveObjectsAtPosition) {
        output.WriteRawTag(98);
        output.WriteMessage(MoveObjectsAtPosition);
      }
      if (commandCase_ == CommandOneofCase.PlaySound) {
        output.WriteRawTag(106);
        output.WriteMessage(PlaySound);
      }
      if (commandCase_ == CommandOneofCase.SetMusic) {
        output.WriteRawTag(114);
        output.WriteMessage(SetMusic);
      }
      if (commandCase_ == CommandOneofCase.FireProjectile) {
        output.WriteRawTag(122);
        output.WriteMessage(FireProjectile);
      }
      if (commandCase_ == CommandOneofCase.PlayEffect) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(PlayEffect);
      }
      if (commandCase_ == CommandOneofCase.DisplayGameMessage) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(DisplayGameMessage);
      }
      if (commandCase_ == CommandOneofCase.SetGameObjectsEnabled) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(SetGameObjectsEnabled);
      }
      if (commandCase_ == CommandOneofCase.DisplayRewards) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(DisplayRewards);
      }
      if (commandCase_ == CommandOneofCase.LoadScene) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(LoadScene);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (commandCase_ == CommandOneofCase.DebugLog) {
        output.WriteRawTag(10);
        output.WriteMessage(DebugLog);
      }
      if (commandCase_ == CommandOneofCase.RunInParallel) {
        output.WriteRawTag(18);
        output.WriteMessage(RunInParallel);
      }
      if (commandCase_ == CommandOneofCase.Delay) {
        output.WriteRawTag(26);
        output.WriteMessage(Delay);
      }
      if (commandCase_ == CommandOneofCase.RenderInterface) {
        output.WriteRawTag(34);
        output.WriteMessage(RenderInterface);
      }
      if (commandCase_ == CommandOneofCase.UpdateGameView) {
        output.WriteRawTag(42);
        output.WriteMessage(UpdateGameView);
      }
      if (commandCase_ == CommandOneofCase.VisitRoom) {
        output.WriteRawTag(66);
        output.WriteMessage(VisitRoom);
      }
      if (commandCase_ == CommandOneofCase.CreateOrUpdateCard) {
        output.WriteRawTag(74);
        output.WriteMessage(CreateOrUpdateCard);
      }
      if (commandCase_ == CommandOneofCase.DestroyCard) {
        output.WriteRawTag(82);
        output.WriteMessage(DestroyCard);
      }
      if (commandCase_ == CommandOneofCase.MoveGameObjects) {
        output.WriteRawTag(90);
        output.WriteMessage(MoveGameObjects);
      }
      if (commandCase_ == CommandOneofCase.MoveObjectsAtPosition) {
        output.WriteRawTag(98);
        output.WriteMessage(MoveObjectsAtPosition);
      }
      if (commandCase_ == CommandOneofCase.PlaySound) {
        output.WriteRawTag(106);
        output.WriteMessage(PlaySound);
      }
      if (commandCase_ == CommandOneofCase.SetMusic) {
        output.WriteRawTag(114);
        output.WriteMessage(SetMusic);
      }
      if (commandCase_ == CommandOneofCase.FireProjectile) {
        output.WriteRawTag(122);
        output.WriteMessage(FireProjectile);
      }
      if (commandCase_ == CommandOneofCase.PlayEffect) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(PlayEffect);
      }
      if (commandCase_ == CommandOneofCase.DisplayGameMessage) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(DisplayGameMessage);
      }
      if (commandCase_ == CommandOneofCase.SetGameObjectsEnabled) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(SetGameObjectsEnabled);
      }
      if (commandCase_ == CommandOneofCase.DisplayRewards) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(DisplayRewards);
      }
      if (commandCase_ == CommandOneofCase.LoadScene) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(LoadScene);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (commandCase_ == CommandOneofCase.DebugLog) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DebugLog);
      }
      if (commandCase_ == CommandOneofCase.RunInParallel) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RunInParallel);
      }
      if (commandCase_ == CommandOneofCase.Delay) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Delay);
      }
      if (commandCase_ == CommandOneofCase.RenderInterface) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RenderInterface);
      }
      if (commandCase_ == CommandOneofCase.UpdateGameView) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateGameView);
      }
      if (commandCase_ == CommandOneofCase.VisitRoom) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VisitRoom);
      }
      if (commandCase_ == CommandOneofCase.CreateOrUpdateCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateOrUpdateCard);
      }
      if (commandCase_ == CommandOneofCase.DestroyCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DestroyCard);
      }
      if (commandCase_ == CommandOneofCase.MoveGameObjects) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MoveGameObjects);
      }
      if (commandCase_ == CommandOneofCase.MoveObjectsAtPosition) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MoveObjectsAtPosition);
      }
      if (commandCase_ == CommandOneofCase.PlaySound) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlaySound);
      }
      if (commandCase_ == CommandOneofCase.SetMusic) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SetMusic);
      }
      if (commandCase_ == CommandOneofCase.FireProjectile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FireProjectile);
      }
      if (commandCase_ == CommandOneofCase.PlayEffect) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PlayEffect);
      }
      if (commandCase_ == CommandOneofCase.DisplayGameMessage) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DisplayGameMessage);
      }
      if (commandCase_ == CommandOneofCase.SetGameObjectsEnabled) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetGameObjectsEnabled);
      }
      if (commandCase_ == CommandOneofCase.DisplayRewards) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DisplayRewards);
      }
      if (commandCase_ == CommandOneofCase.LoadScene) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LoadScene);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameCommand other) {
      if (other == null) {
        return;
      }
      switch (other.CommandCase) {
        case CommandOneofCase.DebugLog:
          if (DebugLog == null) {
            DebugLog = new global::Spelldawn.Protos.DebugLogCommand();
          }
          DebugLog.MergeFrom(other.DebugLog);
          break;
        case CommandOneofCase.RunInParallel:
          if (RunInParallel == null) {
            RunInParallel = new global::Spelldawn.Protos.RunInParallelCommand();
          }
          RunInParallel.MergeFrom(other.RunInParallel);
          break;
        case CommandOneofCase.Delay:
          if (Delay == null) {
            Delay = new global::Spelldawn.Protos.DelayCommand();
          }
          Delay.MergeFrom(other.Delay);
          break;
        case CommandOneofCase.RenderInterface:
          if (RenderInterface == null) {
            RenderInterface = new global::Spelldawn.Protos.RenderInterfaceCommand();
          }
          RenderInterface.MergeFrom(other.RenderInterface);
          break;
        case CommandOneofCase.UpdateGameView:
          if (UpdateGameView == null) {
            UpdateGameView = new global::Spelldawn.Protos.UpdateGameViewCommand();
          }
          UpdateGameView.MergeFrom(other.UpdateGameView);
          break;
        case CommandOneofCase.VisitRoom:
          if (VisitRoom == null) {
            VisitRoom = new global::Spelldawn.Protos.VisitRoomCommand();
          }
          VisitRoom.MergeFrom(other.VisitRoom);
          break;
        case CommandOneofCase.CreateOrUpdateCard:
          if (CreateOrUpdateCard == null) {
            CreateOrUpdateCard = new global::Spelldawn.Protos.CreateOrUpdateCardCommand();
          }
          CreateOrUpdateCard.MergeFrom(other.CreateOrUpdateCard);
          break;
        case CommandOneofCase.DestroyCard:
          if (DestroyCard == null) {
            DestroyCard = new global::Spelldawn.Protos.DestroyCardCommand();
          }
          DestroyCard.MergeFrom(other.DestroyCard);
          break;
        case CommandOneofCase.MoveGameObjects:
          if (MoveGameObjects == null) {
            MoveGameObjects = new global::Spelldawn.Protos.MoveGameObjectsCommand();
          }
          MoveGameObjects.MergeFrom(other.MoveGameObjects);
          break;
        case CommandOneofCase.MoveObjectsAtPosition:
          if (MoveObjectsAtPosition == null) {
            MoveObjectsAtPosition = new global::Spelldawn.Protos.MoveGameObjectsAtPositionCommand();
          }
          MoveObjectsAtPosition.MergeFrom(other.MoveObjectsAtPosition);
          break;
        case CommandOneofCase.PlaySound:
          if (PlaySound == null) {
            PlaySound = new global::Spelldawn.Protos.PlaySoundCommand();
          }
          PlaySound.MergeFrom(other.PlaySound);
          break;
        case CommandOneofCase.SetMusic:
          if (SetMusic == null) {
            SetMusic = new global::Spelldawn.Protos.SetMusicCommand();
          }
          SetMusic.MergeFrom(other.SetMusic);
          break;
        case CommandOneofCase.FireProjectile:
          if (FireProjectile == null) {
            FireProjectile = new global::Spelldawn.Protos.FireProjectileCommand();
          }
          FireProjectile.MergeFrom(other.FireProjectile);
          break;
        case CommandOneofCase.PlayEffect:
          if (PlayEffect == null) {
            PlayEffect = new global::Spelldawn.Protos.PlayEffectCommand();
          }
          PlayEffect.MergeFrom(other.PlayEffect);
          break;
        case CommandOneofCase.DisplayGameMessage:
          if (DisplayGameMessage == null) {
            DisplayGameMessage = new global::Spelldawn.Protos.DisplayGameMessageCommand();
          }
          DisplayGameMessage.MergeFrom(other.DisplayGameMessage);
          break;
        case CommandOneofCase.SetGameObjectsEnabled:
          if (SetGameObjectsEnabled == null) {
            SetGameObjectsEnabled = new global::Spelldawn.Protos.SetGameObjectsEnabledCommand();
          }
          SetGameObjectsEnabled.MergeFrom(other.SetGameObjectsEnabled);
          break;
        case CommandOneofCase.DisplayRewards:
          if (DisplayRewards == null) {
            DisplayRewards = new global::Spelldawn.Protos.DisplayRewardsCommand();
          }
          DisplayRewards.MergeFrom(other.DisplayRewards);
          break;
        case CommandOneofCase.LoadScene:
          if (LoadScene == null) {
            LoadScene = new global::Spelldawn.Protos.LoadSceneCommand();
          }
          LoadScene.MergeFrom(other.LoadScene);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Spelldawn.Protos.DebugLogCommand subBuilder = new global::Spelldawn.Protos.DebugLogCommand();
            if (commandCase_ == CommandOneofCase.DebugLog) {
              subBuilder.MergeFrom(DebugLog);
            }
            input.ReadMessage(subBuilder);
            DebugLog = subBuilder;
            break;
          }
          case 18: {
            global::Spelldawn.Protos.RunInParallelCommand subBuilder = new global::Spelldawn.Protos.RunInParallelCommand();
            if (commandCase_ == CommandOneofCase.RunInParallel) {
              subBuilder.MergeFrom(RunInParallel);
            }
            input.ReadMessage(subBuilder);
            RunInParallel = subBuilder;
            break;
          }
          case 26: {
            global::Spelldawn.Protos.DelayCommand subBuilder = new global::Spelldawn.Protos.DelayCommand();
            if (commandCase_ == CommandOneofCase.Delay) {
              subBuilder.MergeFrom(Delay);
            }
            input.ReadMessage(subBuilder);
            Delay = subBuilder;
            break;
          }
          case 34: {
            global::Spelldawn.Protos.RenderInterfaceCommand subBuilder = new global::Spelldawn.Protos.RenderInterfaceCommand();
            if (commandCase_ == CommandOneofCase.RenderInterface) {
              subBuilder.MergeFrom(RenderInterface);
            }
            input.ReadMessage(subBuilder);
            RenderInterface = subBuilder;
            break;
          }
          case 42: {
            global::Spelldawn.Protos.UpdateGameViewCommand subBuilder = new global::Spelldawn.Protos.UpdateGameViewCommand();
            if (commandCase_ == CommandOneofCase.UpdateGameView) {
              subBuilder.MergeFrom(UpdateGameView);
            }
            input.ReadMessage(subBuilder);
            UpdateGameView = subBuilder;
            break;
          }
          case 66: {
            global::Spelldawn.Protos.VisitRoomCommand subBuilder = new global::Spelldawn.Protos.VisitRoomCommand();
            if (commandCase_ == CommandOneofCase.VisitRoom) {
              subBuilder.MergeFrom(VisitRoom);
            }
            input.ReadMessage(subBuilder);
            VisitRoom = subBuilder;
            break;
          }
          case 74: {
            global::Spelldawn.Protos.CreateOrUpdateCardCommand subBuilder = new global::Spelldawn.Protos.CreateOrUpdateCardCommand();
            if (commandCase_ == CommandOneofCase.CreateOrUpdateCard) {
              subBuilder.MergeFrom(CreateOrUpdateCard);
            }
            input.ReadMessage(subBuilder);
            CreateOrUpdateCard = subBuilder;
            break;
          }
          case 82: {
            global::Spelldawn.Protos.DestroyCardCommand subBuilder = new global::Spelldawn.Protos.DestroyCardCommand();
            if (commandCase_ == CommandOneofCase.DestroyCard) {
              subBuilder.MergeFrom(DestroyCard);
            }
            input.ReadMessage(subBuilder);
            DestroyCard = subBuilder;
            break;
          }
          case 90: {
            global::Spelldawn.Protos.MoveGameObjectsCommand subBuilder = new global::Spelldawn.Protos.MoveGameObjectsCommand();
            if (commandCase_ == CommandOneofCase.MoveGameObjects) {
              subBuilder.MergeFrom(MoveGameObjects);
            }
            input.ReadMessage(subBuilder);
            MoveGameObjects = subBuilder;
            break;
          }
          case 98: {
            global::Spelldawn.Protos.MoveGameObjectsAtPositionCommand subBuilder = new global::Spelldawn.Protos.MoveGameObjectsAtPositionCommand();
            if (commandCase_ == CommandOneofCase.MoveObjectsAtPosition) {
              subBuilder.MergeFrom(MoveObjectsAtPosition);
            }
            input.ReadMessage(subBuilder);
            MoveObjectsAtPosition = subBuilder;
            break;
          }
          case 106: {
            global::Spelldawn.Protos.PlaySoundCommand subBuilder = new global::Spelldawn.Protos.PlaySoundCommand();
            if (commandCase_ == CommandOneofCase.PlaySound) {
              subBuilder.MergeFrom(PlaySound);
            }
            input.ReadMessage(subBuilder);
            PlaySound = subBuilder;
            break;
          }
          case 114: {
            global::Spelldawn.Protos.SetMusicCommand subBuilder = new global::Spelldawn.Protos.SetMusicCommand();
            if (commandCase_ == CommandOneofCase.SetMusic) {
              subBuilder.MergeFrom(SetMusic);
            }
            input.ReadMessage(subBuilder);
            SetMusic = subBuilder;
            break;
          }
          case 122: {
            global::Spelldawn.Protos.FireProjectileCommand subBuilder = new global::Spelldawn.Protos.FireProjectileCommand();
            if (commandCase_ == CommandOneofCase.FireProjectile) {
              subBuilder.MergeFrom(FireProjectile);
            }
            input.ReadMessage(subBuilder);
            FireProjectile = subBuilder;
            break;
          }
          case 130: {
            global::Spelldawn.Protos.PlayEffectCommand subBuilder = new global::Spelldawn.Protos.PlayEffectCommand();
            if (commandCase_ == CommandOneofCase.PlayEffect) {
              subBuilder.MergeFrom(PlayEffect);
            }
            input.ReadMessage(subBuilder);
            PlayEffect = subBuilder;
            break;
          }
          case 138: {
            global::Spelldawn.Protos.DisplayGameMessageCommand subBuilder = new global::Spelldawn.Protos.DisplayGameMessageCommand();
            if (commandCase_ == CommandOneofCase.DisplayGameMessage) {
              subBuilder.MergeFrom(DisplayGameMessage);
            }
            input.ReadMessage(subBuilder);
            DisplayGameMessage = subBuilder;
            break;
          }
          case 146: {
            global::Spelldawn.Protos.SetGameObjectsEnabledCommand subBuilder = new global::Spelldawn.Protos.SetGameObjectsEnabledCommand();
            if (commandCase_ == CommandOneofCase.SetGameObjectsEnabled) {
              subBuilder.MergeFrom(SetGameObjectsEnabled);
            }
            input.ReadMessage(subBuilder);
            SetGameObjectsEnabled = subBuilder;
            break;
          }
          case 154: {
            global::Spelldawn.Protos.DisplayRewardsCommand subBuilder = new global::Spelldawn.Protos.DisplayRewardsCommand();
            if (commandCase_ == CommandOneofCase.DisplayRewards) {
              subBuilder.MergeFrom(DisplayRewards);
            }
            input.ReadMessage(subBuilder);
            DisplayRewards = subBuilder;
            break;
          }
          case 162: {
            global::Spelldawn.Protos.LoadSceneCommand subBuilder = new global::Spelldawn.Protos.LoadSceneCommand();
            if (commandCase_ == CommandOneofCase.LoadScene) {
              subBuilder.MergeFrom(LoadScene);
            }
            input.ReadMessage(subBuilder);
            LoadScene = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Spelldawn.Protos.DebugLogCommand subBuilder = new global::Spelldawn.Protos.DebugLogCommand();
            if (commandCase_ == CommandOneofCase.DebugLog) {
              subBuilder.MergeFrom(DebugLog);
            }
            input.ReadMessage(subBuilder);
            DebugLog = subBuilder;
            break;
          }
          case 18: {
            global::Spelldawn.Protos.RunInParallelCommand subBuilder = new global::Spelldawn.Protos.RunInParallelCommand();
            if (commandCase_ == CommandOneofCase.RunInParallel) {
              subBuilder.MergeFrom(RunInParallel);
            }
            input.ReadMessage(subBuilder);
            RunInParallel = subBuilder;
            break;
          }
          case 26: {
            global::Spelldawn.Protos.DelayCommand subBuilder = new global::Spelldawn.Protos.DelayCommand();
            if (commandCase_ == CommandOneofCase.Delay) {
              subBuilder.MergeFrom(Delay);
            }
            input.ReadMessage(subBuilder);
            Delay = subBuilder;
            break;
          }
          case 34: {
            global::Spelldawn.Protos.RenderInterfaceCommand subBuilder = new global::Spelldawn.Protos.RenderInterfaceCommand();
            if (commandCase_ == CommandOneofCase.RenderInterface) {
              subBuilder.MergeFrom(RenderInterface);
            }
            input.ReadMessage(subBuilder);
            RenderInterface = subBuilder;
            break;
          }
          case 42: {
            global::Spelldawn.Protos.UpdateGameViewCommand subBuilder = new global::Spelldawn.Protos.UpdateGameViewCommand();
            if (commandCase_ == CommandOneofCase.UpdateGameView) {
              subBuilder.MergeFrom(UpdateGameView);
            }
            input.ReadMessage(subBuilder);
            UpdateGameView = subBuilder;
            break;
          }
          case 66: {
            global::Spelldawn.Protos.VisitRoomCommand subBuilder = new global::Spelldawn.Protos.VisitRoomCommand();
            if (commandCase_ == CommandOneofCase.VisitRoom) {
              subBuilder.MergeFrom(VisitRoom);
            }
            input.ReadMessage(subBuilder);
            VisitRoom = subBuilder;
            break;
          }
          case 74: {
            global::Spelldawn.Protos.CreateOrUpdateCardCommand subBuilder = new global::Spelldawn.Protos.CreateOrUpdateCardCommand();
            if (commandCase_ == CommandOneofCase.CreateOrUpdateCard) {
              subBuilder.MergeFrom(CreateOrUpdateCard);
            }
            input.ReadMessage(subBuilder);
            CreateOrUpdateCard = subBuilder;
            break;
          }
          case 82: {
            global::Spelldawn.Protos.DestroyCardCommand subBuilder = new global::Spelldawn.Protos.DestroyCardCommand();
            if (commandCase_ == CommandOneofCase.DestroyCard) {
              subBuilder.MergeFrom(DestroyCard);
            }
            input.ReadMessage(subBuilder);
            DestroyCard = subBuilder;
            break;
          }
          case 90: {
            global::Spelldawn.Protos.MoveGameObjectsCommand subBuilder = new global::Spelldawn.Protos.MoveGameObjectsCommand();
            if (commandCase_ == CommandOneofCase.MoveGameObjects) {
              subBuilder.MergeFrom(MoveGameObjects);
            }
            input.ReadMessage(subBuilder);
            MoveGameObjects = subBuilder;
            break;
          }
          case 98: {
            global::Spelldawn.Protos.MoveGameObjectsAtPositionCommand subBuilder = new global::Spelldawn.Protos.MoveGameObjectsAtPositionCommand();
            if (commandCase_ == CommandOneofCase.MoveObjectsAtPosition) {
              subBuilder.MergeFrom(MoveObjectsAtPosition);
            }
            input.ReadMessage(subBuilder);
            MoveObjectsAtPosition = subBuilder;
            break;
          }
          case 106: {
            global::Spelldawn.Protos.PlaySoundCommand subBuilder = new global::Spelldawn.Protos.PlaySoundCommand();
            if (commandCase_ == CommandOneofCase.PlaySound) {
              subBuilder.MergeFrom(PlaySound);
            }
            input.ReadMessage(subBuilder);
            PlaySound = subBuilder;
            break;
          }
          case 114: {
            global::Spelldawn.Protos.SetMusicCommand subBuilder = new global::Spelldawn.Protos.SetMusicCommand();
            if (commandCase_ == CommandOneofCase.SetMusic) {
              subBuilder.MergeFrom(SetMusic);
            }
            input.ReadMessage(subBuilder);
            SetMusic = subBuilder;
            break;
          }
          case 122: {
            global::Spelldawn.Protos.FireProjectileCommand subBuilder = new global::Spelldawn.Protos.FireProjectileCommand();
            if (commandCase_ == CommandOneofCase.FireProjectile) {
              subBuilder.MergeFrom(FireProjectile);
            }
            input.ReadMessage(subBuilder);
            FireProjectile = subBuilder;
            break;
          }
          case 130: {
            global::Spelldawn.Protos.PlayEffectCommand subBuilder = new global::Spelldawn.Protos.PlayEffectCommand();
            if (commandCase_ == CommandOneofCase.PlayEffect) {
              subBuilder.MergeFrom(PlayEffect);
            }
            input.ReadMessage(subBuilder);
            PlayEffect = subBuilder;
            break;
          }
          case 138: {
            global::Spelldawn.Protos.DisplayGameMessageCommand subBuilder = new global::Spelldawn.Protos.DisplayGameMessageCommand();
            if (commandCase_ == CommandOneofCase.DisplayGameMessage) {
              subBuilder.MergeFrom(DisplayGameMessage);
            }
            input.ReadMessage(subBuilder);
            DisplayGameMessage = subBuilder;
            break;
          }
          case 146: {
            global::Spelldawn.Protos.SetGameObjectsEnabledCommand subBuilder = new global::Spelldawn.Protos.SetGameObjectsEnabledCommand();
            if (commandCase_ == CommandOneofCase.SetGameObjectsEnabled) {
              subBuilder.MergeFrom(SetGameObjectsEnabled);
            }
            input.ReadMessage(subBuilder);
            SetGameObjectsEnabled = subBuilder;
            break;
          }
          case 154: {
            global::Spelldawn.Protos.DisplayRewardsCommand subBuilder = new global::Spelldawn.Protos.DisplayRewardsCommand();
            if (commandCase_ == CommandOneofCase.DisplayRewards) {
              subBuilder.MergeFrom(DisplayRewards);
            }
            input.ReadMessage(subBuilder);
            DisplayRewards = subBuilder;
            break;
          }
          case 162: {
            global::Spelldawn.Protos.LoadSceneCommand subBuilder = new global::Spelldawn.Protos.LoadSceneCommand();
            if (commandCase_ == CommandOneofCase.LoadScene) {
              subBuilder.MergeFrom(LoadScene);
            }
            input.ReadMessage(subBuilder);
            LoadScene = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CommandList : pb::IMessage<CommandList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CommandList> _parser = new pb::MessageParser<CommandList>(() => new CommandList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandList(CommandList other) : this() {
      commands_ = other.commands_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandList Clone() {
      return new CommandList(this);
    }

    /// <summary>Field number for the "commands" field.</summary>
    public const int CommandsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.GameCommand> _repeated_commands_codec
        = pb::FieldCodec.ForMessage(10, global::Spelldawn.Protos.GameCommand.Parser);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.GameCommand> commands_ = new pbc::RepeatedField<global::Spelldawn.Protos.GameCommand>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.GameCommand> Commands {
      get { return commands_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!commands_.Equals(other.commands_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= commands_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      commands_.WriteTo(output, _repeated_commands_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      commands_.WriteTo(ref output, _repeated_commands_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += commands_.CalculateSize(_repeated_commands_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandList other) {
      if (other == null) {
        return;
      }
      commands_.Add(other.commands_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            commands_.AddEntriesFrom(input, _repeated_commands_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            commands_.AddEntriesFrom(ref input, _repeated_commands_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Initiate a play session. If a game_id is provided, connects to an ongoing
  /// game. Otherwise, creates a new game. This must be sent from an empty game
  /// scene.
  /// </summary>
  public sealed partial class ConnectRequest : pb::IMessage<ConnectRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConnectRequest> _parser = new pb::MessageParser<ConnectRequest>(() => new ConnectRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectRequest(ConnectRequest other) : this() {
      gameId_ = other.gameId_ != null ? other.gameId_.Clone() : null;
      userId_ = other.userId_;
      testMode_ = other.testMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectRequest Clone() {
      return new ConnectRequest(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private global::Spelldawn.Protos.GameIdentifier gameId_;
    /// <summary>
    /// Target game to connect to, if any 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.GameIdentifier GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private ulong userId_;
    /// <summary>
    /// User making this request. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "test_mode" field.</summary>
    public const int TestModeFieldNumber = 3;
    private bool testMode_;
    /// <summary>
    ///
    /// If test_mode is true, the generated GameId for a new game will always
    /// be 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TestMode {
      get { return testMode_; }
      set {
        testMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameId, other.GameId)) return false;
      if (UserId != other.UserId) return false;
      if (TestMode != other.TestMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameId_ != null) hash ^= GameId.GetHashCode();
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (TestMode != false) hash ^= TestMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (gameId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameId);
      }
      if (UserId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserId);
      }
      if (TestMode != false) {
        output.WriteRawTag(24);
        output.WriteBool(TestMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (gameId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameId);
      }
      if (UserId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserId);
      }
      if (TestMode != false) {
        output.WriteRawTag(24);
        output.WriteBool(TestMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameId);
      }
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (TestMode != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectRequest other) {
      if (other == null) {
        return;
      }
      if (other.gameId_ != null) {
        if (gameId_ == null) {
          GameId = new global::Spelldawn.Protos.GameIdentifier();
        }
        GameId.MergeFrom(other.GameId);
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.TestMode != false) {
        TestMode = other.TestMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gameId_ == null) {
              GameId = new global::Spelldawn.Protos.GameIdentifier();
            }
            input.ReadMessage(GameId);
            break;
          }
          case 16: {
            UserId = input.ReadUInt64();
            break;
          }
          case 24: {
            TestMode = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (gameId_ == null) {
              GameId = new global::Spelldawn.Protos.GameIdentifier();
            }
            input.ReadMessage(GameId);
            break;
          }
          case 16: {
            UserId = input.ReadUInt64();
            break;
          }
          case 24: {
            TestMode = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
