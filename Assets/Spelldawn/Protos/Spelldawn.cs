// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: spelldawn.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spelldawn.Protos {

  /// <summary>Holder for reflection information generated from spelldawn.proto</summary>
  public static partial class SpelldawnReflection {

    #region Descriptor
    /// <summary>File descriptor for spelldawn.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpelldawnReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9zcGVsbGRhd24ucHJvdG8SDWNvbS5zcGVsbGRhd24aHmdvb2dsZS9wcm90",
            "b2J1Zi93cmFwcGVycy5wcm90bxoZZ29vZ2xlL3Byb3RvYnVmL2FueS5wcm90",
            "byJECglGbGV4Q29sb3ISCwoDcmVkGAEgASgCEg0KBWdyZWVuGAIgASgCEgwK",
            "BGJsdWUYAyABKAISDQoFYWxwaGEYBCABKAIiIAoNU3ByaXRlQWRkcmVzcxIP",
            "CgdhZGRyZXNzGAEgASgJIh4KC0ZvbnRBZGRyZXNzEg8KB2FkZHJlc3MYASAB",
            "KAkiJAoRUHJvamVjdGlsZUFkZHJlc3MSDwoHYWRkcmVzcxgBIAEoCSIgCg1F",
            "ZmZlY3RBZGRyZXNzEg8KB2FkZHJlc3MYASABKAkiIwoLRmxleFZlY3RvcjIS",
            "CQoBeBgBIAEoAhIJCgF5GAIgASgCIi4KC0ZsZXhWZWN0b3IzEgkKAXgYASAB",
            "KAISCQoBeRgCIAEoAhIJCgF6GAMgASgCIkYKCURpbWVuc2lvbhIqCgR1bml0",
            "GAEgASgOMhwuY29tLnNwZWxsZGF3bi5EaW1lbnNpb25Vbml0Eg0KBXZhbHVl",
            "GAIgASgCIrIBCg5EaW1lbnNpb25Hcm91cBIlCgN0b3AYASABKAsyGC5jb20u",
            "c3BlbGxkYXduLkRpbWVuc2lvbhInCgVyaWdodBgCIAEoCzIYLmNvbS5zcGVs",
            "bGRhd24uRGltZW5zaW9uEigKBmJvdHRvbRgDIAEoCzIYLmNvbS5zcGVsbGRh",
            "d24uRGltZW5zaW9uEiYKBGxlZnQYBCABKAsyGC5jb20uc3BlbGxkYXduLkRp",
            "bWVuc2lvbiJHCgtCb3JkZXJXaWR0aBILCgN0b3AYASABKAISDQoFcmlnaHQY",
            "AiABKAISDgoGYm90dG9tGAMgASgCEgwKBGxlZnQYBCABKAIirwEKC0JvcmRl",
            "ckNvbG9yEiUKA3RvcBgBIAEoCzIYLmNvbS5zcGVsbGRhd24uRmxleENvbG9y",
            "EicKBXJpZ2h0GAIgASgLMhguY29tLnNwZWxsZGF3bi5GbGV4Q29sb3ISKAoG",
            "Ym90dG9tGAMgASgLMhguY29tLnNwZWxsZGF3bi5GbGV4Q29sb3ISJgoEbGVm",
            "dBgEIAEoCzIYLmNvbS5zcGVsbGRhd24uRmxleENvbG9yIsYBCgxCb3JkZXJS",
            "YWRpdXMSKgoIdG9wX2xlZnQYASABKAsyGC5jb20uc3BlbGxkYXduLkRpbWVu",
            "c2lvbhIrCgl0b3BfcmlnaHQYAiABKAsyGC5jb20uc3BlbGxkYXduLkRpbWVu",
            "c2lvbhIuCgxib3R0b21fcmlnaHQYAyABKAsyGC5jb20uc3BlbGxkYXduLkRp",
            "bWVuc2lvbhItCgtib3R0b21fbGVmdBgEIAEoCzIYLmNvbS5zcGVsbGRhd24u",
            "RGltZW5zaW9uIh0KCkZsZXhSb3RhdGUSDwoHZGVncmVlcxgBIAEoAiJkCg1G",
            "bGV4VHJhbnNsYXRlEiMKAXgYASABKAsyGC5jb20uc3BlbGxkYXduLkRpbWVu",
            "c2lvbhIjCgF5GAIgASgLMhguY29tLnNwZWxsZGF3bi5EaW1lbnNpb24SCQoB",
            "ehgDIAEoAiI3CglGbGV4U2NhbGUSKgoGYW1vdW50GAEgASgLMhouY29tLnNw",
            "ZWxsZGF3bi5GbGV4VmVjdG9yMyJ2CgpUZXh0U2hhZG93EioKBm9mZnNldBgB",
            "IAEoCzIaLmNvbS5zcGVsbGRhd24uRmxleFZlY3RvcjISEwoLYmx1cl9yYWRp",
            "dXMYAiABKAISJwoFY29sb3IYAyABKAsyGC5jb20uc3BlbGxkYXduLkZsZXhD",
            "b2xvciIhCglUaW1lVmFsdWUSFAoMbWlsbGlzZWNvbmRzGAEgASgFIkYKCklt",
            "YWdlU2xpY2USCwoDdG9wGAEgASgFEg0KBXJpZ2h0GAIgASgFEg4KBmJvdHRv",
            "bRgDIAEoBRIMCgRsZWZ0GAQgASgFIukVCglGbGV4U3R5bGUSLwoNYWxpZ25f",
            "Y29udGVudBgBIAEoDjIYLmNvbS5zcGVsbGRhd24uRmxleEFsaWduEi0KC2Fs",
            "aWduX2l0ZW1zGAIgASgOMhguY29tLnNwZWxsZGF3bi5GbGV4QWxpZ24SLAoK",
            "YWxpZ25fc2VsZhgDIAEoDjIYLmNvbS5zcGVsbGRhd24uRmxleEFsaWduEjIK",
            "EGJhY2tncm91bmRfY29sb3IYBCABKAsyGC5jb20uc3BlbGxkYXduLkZsZXhD",
            "b2xvchI2ChBiYWNrZ3JvdW5kX2ltYWdlGAUgASgLMhwuY29tLnNwZWxsZGF3",
            "bi5TcHJpdGVBZGRyZXNzEjAKDGJvcmRlcl9jb2xvchgGIAEoCzIaLmNvbS5z",
            "cGVsbGRhd24uQm9yZGVyQ29sb3ISMgoNYm9yZGVyX3JhZGl1cxgHIAEoCzIb",
            "LmNvbS5zcGVsbGRhd24uQm9yZGVyUmFkaXVzEjAKDGJvcmRlcl93aWR0aBgI",
            "IAEoCzIaLmNvbS5zcGVsbGRhd24uQm9yZGVyV2lkdGgSLAoFaW5zZXQYCSAB",
            "KAsyHS5jb20uc3BlbGxkYXduLkRpbWVuc2lvbkdyb3VwEicKBWNvbG9yGAog",
            "ASgLMhguY29tLnNwZWxsZGF3bi5GbGV4Q29sb3ISMAoHZGlzcGxheRgLIAEo",
            "DjIfLmNvbS5zcGVsbGRhd24uRmxleERpc3BsYXlTdHlsZRIsCgpmbGV4X2Jh",
            "c2lzGAwgASgLMhguY29tLnNwZWxsZGF3bi5EaW1lbnNpb24SNAoOZmxleF9k",
            "aXJlY3Rpb24YDSABKA4yHC5jb20uc3BlbGxkYXduLkZsZXhEaXJlY3Rpb24S",
            "LgoJZmxleF9ncm93GA4gASgLMhsuZ29vZ2xlLnByb3RvYnVmLkZsb2F0VmFs",
            "dWUSMAoLZmxleF9zaHJpbmsYDyABKAsyGy5nb29nbGUucHJvdG9idWYuRmxv",
            "YXRWYWx1ZRIlCgR3cmFwGBAgASgOMhcuY29tLnNwZWxsZGF3bi5GbGV4V3Jh",
            "cBIrCglmb250X3NpemUYESABKAsyGC5jb20uc3BlbGxkYXduLkRpbWVuc2lv",
            "bhIoCgZoZWlnaHQYEiABKAsyGC5jb20uc3BlbGxkYXduLkRpbWVuc2lvbhIz",
            "Cg9qdXN0aWZ5X2NvbnRlbnQYEyABKA4yGi5jb20uc3BlbGxkYXduLkZsZXhK",
            "dXN0aWZ5EjAKDmxldHRlcl9zcGFjaW5nGBQgASgLMhguY29tLnNwZWxsZGF3",
            "bi5EaW1lbnNpb24SLQoGbWFyZ2luGBUgASgLMh0uY29tLnNwZWxsZGF3bi5E",
            "aW1lbnNpb25Hcm91cBIsCgptYXhfaGVpZ2h0GBYgASgLMhguY29tLnNwZWxs",
            "ZGF3bi5EaW1lbnNpb24SKwoJbWF4X3dpZHRoGBcgASgLMhguY29tLnNwZWxs",
            "ZGF3bi5EaW1lbnNpb24SLAoKbWluX2hlaWdodBgYIAEoCzIYLmNvbS5zcGVs",
            "bGRhd24uRGltZW5zaW9uEisKCW1pbl93aWR0aBgZIAEoCzIYLmNvbS5zcGVs",
            "bGRhd24uRGltZW5zaW9uEiwKB29wYWNpdHkYGiABKAsyGy5nb29nbGUucHJv",
            "dG9idWYuRmxvYXRWYWx1ZRItCghvdmVyZmxvdxgbIAEoDjIbLmNvbS5zcGVs",
            "bGRhd24uRmxleE92ZXJmbG93Ei4KB3BhZGRpbmcYHCABKAsyHS5jb20uc3Bl",
            "bGxkYXduLkRpbWVuc2lvbkdyb3VwEi0KCHBvc2l0aW9uGB0gASgOMhsuY29t",
            "LnNwZWxsZGF3bi5GbGV4UG9zaXRpb24SKQoGcm90YXRlGB4gASgLMhkuY29t",
            "LnNwZWxsZGF3bi5GbGV4Um90YXRlEicKBXNjYWxlGB8gASgLMhguY29tLnNw",
            "ZWxsZGF3bi5GbGV4U2NhbGUSMgoNdGV4dF9vdmVyZmxvdxggIAEoDjIbLmNv",
            "bS5zcGVsbGRhd24uVGV4dE92ZXJmbG93Ei4KC3RleHRfc2hhZG93GCEgASgL",
            "MhkuY29tLnNwZWxsZGF3bi5UZXh0U2hhZG93EjYKEHRyYW5zZm9ybV9vcmln",
            "aW4YIiABKAsyHC5jb20uc3BlbGxkYXduLkZsZXhUcmFuc2xhdGUSMwoRdHJh",
            "bnNpdGlvbl9kZWxheXMYIyADKAsyGC5jb20uc3BlbGxkYXduLlRpbWVWYWx1",
            "ZRI2ChR0cmFuc2l0aW9uX2R1cmF0aW9ucxgkIAMoCzIYLmNvbS5zcGVsbGRh",
            "d24uVGltZVZhbHVlEh0KFXRyYW5zaXRpb25fcHJvcGVydGllcxglIAMoCRI6",
            "Chd0cmFuc2l0aW9uX2Vhc2luZ19tb2RlcxgmIAMoDjIZLmNvbS5zcGVsbGRh",
            "d24uRWFzaW5nTW9kZRIvCgl0cmFuc2xhdGUYJyABKAsyHC5jb20uc3BlbGxk",
            "YXduLkZsZXhUcmFuc2xhdGUSPQobYmFja2dyb3VuZF9pbWFnZV90aW50X2Nv",
            "bG9yGCggASgLMhguY29tLnNwZWxsZGF3bi5GbGV4Q29sb3ISQgobYmFja2dy",
            "b3VuZF9pbWFnZV9zY2FsZV9tb2RlGCkgASgOMh0uY29tLnNwZWxsZGF3bi5J",
            "bWFnZVNjYWxlTW9kZRIoCgRmb250GCogASgLMhouY29tLnNwZWxsZGF3bi5G",
            "b250QWRkcmVzcxIsCgpmb250X3N0eWxlGCsgASgOMhguY29tLnNwZWxsZGF3",
            "bi5Gb250U3R5bGUSOQoRb3ZlcmZsb3dfY2xpcF9ib3gYLCABKA4yHi5jb20u",
            "c3BlbGxkYXduLk92ZXJmbG93Q2xpcEJveBIzChFwYXJhZ3JhcGhfc3BhY2lu",
            "ZxgtIAEoCzIYLmNvbS5zcGVsbGRhd24uRGltZW5zaW9uEi4KC2ltYWdlX3Ns",
            "aWNlGC4gASgLMhkuY29tLnNwZWxsZGF3bi5JbWFnZVNsaWNlEiwKCnRleHRf",
            "YWxpZ24YLyABKA4yGC5jb20uc3BlbGxkYXduLlRleHRBbGlnbhI0ChJ0ZXh0",
            "X291dGxpbmVfY29sb3IYMCABKAsyGC5jb20uc3BlbGxkYXduLkZsZXhDb2xv",
            "chI3ChJ0ZXh0X291dGxpbmVfd2lkdGgYMSABKAsyGy5nb29nbGUucHJvdG9i",
            "dWYuRmxvYXRWYWx1ZRJDChZ0ZXh0X292ZXJmbG93X3Bvc2l0aW9uGDIgASgO",
            "MiMuY29tLnNwZWxsZGF3bi5UZXh0T3ZlcmZsb3dQb3NpdGlvbhIxCgp2aXNp",
            "YmlsaXR5GDMgASgOMh0uY29tLnNwZWxsZGF3bi5GbGV4VmlzaWJpbGl0eRIu",
            "Cgt3aGl0ZV9zcGFjZRg0IAEoDjIZLmNvbS5zcGVsbGRhd24uV2hpdGVTcGFj",
            "ZRInCgV3aWR0aBg1IAEoCzIYLmNvbS5zcGVsbGRhd24uRGltZW5zaW9uEi4K",
            "DHdvcmRfc3BhY2luZxg2IAEoCzIYLmNvbS5zcGVsbGRhd24uRGltZW5zaW9u",
            "EkYKIWJhY2tncm91bmRfaW1hZ2Vfc2NhbGVfbXVsdGlwbGllchg3IAEoCzIb",
            "Lmdvb2dsZS5wcm90b2J1Zi5GbG9hdFZhbHVlEisKI2ZpeGVkX2JhY2tncm91",
            "bmRfaW1hZ2VfYXNwZWN0X3JhdGlvGDggASgIIgkKB0ZsZXhib3giFQoEVGV4",
            "dBINCgVsYWJlbBgBIAEoCSI8Cg1FdmVudEhhbmRsZXJzEisKCG9uX2NsaWNr",
            "GAEgASgLMhkuY29tLnNwZWxsZGF3bi5HYW1lQWN0aW9uIjcKCE5vZGVUeXBl",
            "EiMKBHRleHQYASABKAsyEy5jb20uc3BlbGxkYXduLlRleHRIAEIGCgR0eXBl",
            "IrICCgROb2RlEgoKAmlkGAEgASgJEgwKBG5hbWUYAiABKAkSKgoJbm9kZV90",
            "eXBlGAMgASgLMhcuY29tLnNwZWxsZGF3bi5Ob2RlVHlwZRIlCghjaGlsZHJl",
            "bhgEIAMoCzITLmNvbS5zcGVsbGRhd24uTm9kZRI0Cg5ldmVudF9oYW5kbGVy",
            "cxgFIAEoCzIcLmNvbS5zcGVsbGRhd24uRXZlbnRIYW5kbGVycxInCgVzdHls",
            "ZRgGIAEoCzIYLmNvbS5zcGVsbGRhd24uRmxleFN0eWxlEi0KC2hvdmVyX3N0",
            "eWxlGAcgASgLMhguY29tLnNwZWxsZGF3bi5GbGV4U3R5bGUSLwoNcHJlc3Nl",
            "ZF9zdHlsZRgIIAEoCzIYLmNvbS5zcGVsbGRhd24uRmxleFN0eWxlIlgKBkNh",
            "cmRJZBIyCg1pZGVudGl0eV9jYXJkGAEgASgOMhkuY29tLnNwZWxsZGF3bi5Q",
            "bGF5ZXJOYW1lSAASDwoFdmFsdWUYAiABKAVIAEIJCgdjYXJkX2lkIscBCgxH",
            "YW1lT2JqZWN0SWQSKAoHY2FyZF9pZBgBIAEoCzIVLmNvbS5zcGVsbGRhd24u",
            "Q2FyZElkSAASKQoEZGVjaxgCIAEoDjIZLmNvbS5zcGVsbGRhd24uUGxheWVy",
            "TmFtZUgAEikKBGhhbmQYAyABKA4yGS5jb20uc3BlbGxkYXduLlBsYXllck5h",
            "bWVIABIxCgxkaXNjYXJkX3BpbGUYBCABKA4yGS5jb20uc3BlbGxkYXduLlBs",
            "YXllck5hbWVIAEIECgJpZCJhCghDYXJkSWNvbhIwCgpiYWNrZ3JvdW5kGAEg",
            "ASgLMhwuY29tLnNwZWxsZGF3bi5TcHJpdGVBZGRyZXNzEgwKBHRleHQYAiAB",
            "KAkSFQoNc2hvd19pbl9hcmVuYRgDIAEoCCKBAgoJQ2FyZEljb25zEi4KDXRv",
            "cF9sZWZ0X2ljb24YASABKAsyFy5jb20uc3BlbGxkYXduLkNhcmRJY29uEi8K",
            "DnRvcF9yaWdodF9pY29uGAIgASgLMhcuY29tLnNwZWxsZGF3bi5DYXJkSWNv",
            "bhIyChFib3R0b21fcmlnaHRfaWNvbhgDIAEoCzIXLmNvbS5zcGVsbGRhd24u",
            "Q2FyZEljb24SMQoQYm90dG9tX2xlZnRfaWNvbhgEIAEoCzIXLmNvbS5zcGVs",
            "bGRhd24uQ2FyZEljb24SLAoLY2VudGVyX2ljb24YBSABKAsyFy5jb20uc3Bl",
            "bGxkYXduLkNhcmRJY29uIhkKCUNhcmRUaXRsZRIMCgR0ZXh0GAEgASgJIhkK",
            "CVJ1bGVzVGV4dBIMCgR0ZXh0GAEgASgJIjYKCFBpY2tSb29tEioKC3ZhbGlk",
            "X3Jvb21zGAIgAygOMhUuY29tLnNwZWxsZGF3bi5Sb29tSWQiSgoNQ2FyZFRh",
            "cmdldGluZxIsCglwaWNrX3Jvb20YASABKAsyFy5jb20uc3BlbGxkYXduLlBp",
            "Y2tSb29tSABCCwoJdGFyZ2V0aW5nIsIBCghDYXJkQ29zdBIRCgltYW5hX2Nv",
            "c3QYASABKAUSEwoLYWN0aW9uX2Nvc3QYAiABKAUSEAoIY2FuX3BsYXkYAyAB",
            "KAgSOwoSY2FuX3BsYXlfYWxnb3JpdGhtGAQgASgOMh8uY29tLnNwZWxsZGF3",
            "bi5DYW5QbGF5QWxnb3JpdGhtEj8KFHNwZW5kX2Nvc3RfYWxnb3JpdGhtGAUg",
            "ASgOMiEuY29tLnNwZWxsZGF3bi5TcGVuZENvc3RBbGdvcml0aG0iGQoXT2Jq",
            "ZWN0UG9zaXRpb25PZmZzY3JlZW4inAEKEk9iamVjdFBvc2l0aW9uUm9vbRIm",
            "Cgdyb29tX2lkGAEgASgOMhUuY29tLnNwZWxsZGF3bi5Sb29tSWQSMgoNcm9v",
            "bV9sb2NhdGlvbhgCIAEoDjIbLmNvbS5zcGVsbGRhd24uUm9vbUxvY2F0aW9u",
            "EioKBWluZGV4GAMgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUi",
            "SAoST2JqZWN0UG9zaXRpb25JdGVtEjIKDWl0ZW1fbG9jYXRpb24YASABKA4y",
            "Gy5jb20uc3BlbGxkYXduLkl0ZW1Mb2NhdGlvbiIXChVPYmplY3RQb3NpdGlv",
            "blN0YWdpbmciPgoST2JqZWN0UG9zaXRpb25IYW5kEigKBW93bmVyGAEgASgO",
            "MhkuY29tLnNwZWxsZGF3bi5QbGF5ZXJOYW1lIkcKG09iamVjdFBvc2l0aW9u",
            "SGFuZENvbnRhaW5lchIoCgVvd25lchgBIAEoDjIZLmNvbS5zcGVsbGRhd24u",
            "UGxheWVyTmFtZSI+ChJPYmplY3RQb3NpdGlvbkRlY2sSKAoFb3duZXIYASAB",
            "KA4yGS5jb20uc3BlbGxkYXduLlBsYXllck5hbWUiRwobT2JqZWN0UG9zaXRp",
            "b25EZWNrQ29udGFpbmVyEigKBW93bmVyGAEgASgOMhkuY29tLnNwZWxsZGF3",
            "bi5QbGF5ZXJOYW1lIkEKFU9iamVjdFBvc2l0aW9uRGlzY2FyZBIoCgVvd25l",
            "chgBIAEoDjIZLmNvbS5zcGVsbGRhd24uUGxheWVyTmFtZSJKCh5PYmplY3RQ",
            "b3NpdGlvbkRpc2NhcmRDb250YWluZXISKAoFb3duZXIYASABKA4yGS5jb20u",
            "c3BlbGxkYXduLlBsYXllck5hbWUiQAoUT2JqZWN0UG9zaXRpb25TY29yZWQS",
            "KAoFb3duZXIYASABKA4yGS5jb20uc3BlbGxkYXduLlBsYXllck5hbWUidAoS",
            "T2JqZWN0UG9zaXRpb25SYWlkEjIKDXJvb21fbG9jYXRpb24YASABKA4yGy5j",
            "b20uc3BlbGxkYXduLlJvb21Mb2NhdGlvbhIqCgVpbmRleBgCIAEoCzIbLmdv",
            "b2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlIhcKFU9iamVjdFBvc2l0aW9uQnJv",
            "d3NlciJLCh9PYmplY3RQb3NpdGlvbklkZW50aXR5Q29udGFpbmVyEigKBW93",
            "bmVyGAEgASgOMhkuY29tLnNwZWxsZGF3bi5QbGF5ZXJOYW1lIpIGCg5PYmpl",
            "Y3RQb3NpdGlvbhI7CglvZmZzY3JlZW4YASABKAsyJi5jb20uc3BlbGxkYXdu",
            "Lk9iamVjdFBvc2l0aW9uT2Zmc2NyZWVuSAASMQoEcm9vbRgCIAEoCzIhLmNv",
            "bS5zcGVsbGRhd24uT2JqZWN0UG9zaXRpb25Sb29tSAASMQoEaXRlbRgDIAEo",
            "CzIhLmNvbS5zcGVsbGRhd24uT2JqZWN0UG9zaXRpb25JdGVtSAASNwoHc3Rh",
            "Z2luZxgEIAEoCzIkLmNvbS5zcGVsbGRhd24uT2JqZWN0UG9zaXRpb25TdGFn",
            "aW5nSAASMQoEaGFuZBgFIAEoCzIhLmNvbS5zcGVsbGRhd24uT2JqZWN0UG9z",
            "aXRpb25IYW5kSAASRAoOaGFuZF9jb250YWluZXIYBiABKAsyKi5jb20uc3Bl",
            "bGxkYXduLk9iamVjdFBvc2l0aW9uSGFuZENvbnRhaW5lckgAEjEKBGRlY2sY",
            "ByABKAsyIS5jb20uc3BlbGxkYXduLk9iamVjdFBvc2l0aW9uRGVja0gAEkQK",
            "DmRlY2tfY29udGFpbmVyGAggASgLMiouY29tLnNwZWxsZGF3bi5PYmplY3RQ",
            "b3NpdGlvbkRlY2tDb250YWluZXJIABI3CgdkaXNjYXJkGAkgASgLMiQuY29t",
            "LnNwZWxsZGF3bi5PYmplY3RQb3NpdGlvbkRpc2NhcmRIABJKChFkaXNjYXJk",
            "X2NvbnRhaW5lchgKIAEoCzItLmNvbS5zcGVsbGRhd24uT2JqZWN0UG9zaXRp",
            "b25EaXNjYXJkQ29udGFpbmVySAASNQoGc2NvcmVkGAsgASgLMiMuY29tLnNw",
            "ZWxsZGF3bi5PYmplY3RQb3NpdGlvblNjb3JlZEgAEjEKBHJhaWQYDCABKAsy",
            "IS5jb20uc3BlbGxkYXduLk9iamVjdFBvc2l0aW9uUmFpZEgAEjcKB2Jyb3dz",
            "ZXIYDSABKAsyJC5jb20uc3BlbGxkYXduLk9iamVjdFBvc2l0aW9uQnJvd3Nl",
            "ckgAQgoKCHBvc2l0aW9uIvkDChBSZXZlYWxlZENhcmRWaWV3EjAKCmNhcmRf",
            "ZnJhbWUYASABKAsyHC5jb20uc3BlbGxkYXduLlNwcml0ZUFkZHJlc3MSNgoQ",
            "dGl0bGVfYmFja2dyb3VuZBgCIAEoCzIcLmNvbS5zcGVsbGRhd24uU3ByaXRl",
            "QWRkcmVzcxIrCgVqZXdlbBgDIAEoCzIcLmNvbS5zcGVsbGRhd24uU3ByaXRl",
            "QWRkcmVzcxI2ChBpbWFnZV9iYWNrZ3JvdW5kGAQgASgLMhwuY29tLnNwZWxs",
            "ZGF3bi5TcHJpdGVBZGRyZXNzEisKBWltYWdlGAUgASgLMhwuY29tLnNwZWxs",
            "ZGF3bi5TcHJpdGVBZGRyZXNzEicKBXRpdGxlGAYgASgLMhguY29tLnNwZWxs",
            "ZGF3bi5DYXJkVGl0bGUSLAoKcnVsZXNfdGV4dBgHIAEoCzIYLmNvbS5zcGVs",
            "bGRhd24uUnVsZXNUZXh0Ei8KCXRhcmdldGluZxgIIAEoCzIcLmNvbS5zcGVs",
            "bGRhd24uQ2FyZFRhcmdldGluZxI6ChNvbl9yZWxlYXNlX3Bvc2l0aW9uGAkg",
            "ASgLMh0uY29tLnNwZWxsZGF3bi5PYmplY3RQb3NpdGlvbhIlCgRjb3N0GAog",
            "ASgLMhcuY29tLnNwZWxsZGF3bi5DYXJkQ29zdCK3AgoIQ2FyZFZpZXcSJgoH",
            "Y2FyZF9pZBgBIAEoCzIVLmNvbS5zcGVsbGRhd24uQ2FyZElkEjkKEm9uX2Ny",
            "ZWF0ZV9wb3NpdGlvbhgCIAEoCzIdLmNvbS5zcGVsbGRhd24uT2JqZWN0UG9z",
            "aXRpb24SLwoJY2FyZF9iYWNrGAMgASgLMhwuY29tLnNwZWxsZGF3bi5TcHJp",
            "dGVBZGRyZXNzEiwKCmNhcmRfaWNvbnMYBCABKAsyGC5jb20uc3BlbGxkYXdu",
            "LkNhcmRJY29ucxIxCgthcmVuYV9mcmFtZRgFIAEoCzIcLmNvbS5zcGVsbGRh",
            "d24uU3ByaXRlQWRkcmVzcxI2Cg1yZXZlYWxlZF9jYXJkGAYgASgLMh8uY29t",
            "LnNwZWxsZGF3bi5SZXZlYWxlZENhcmRWaWV3IjIKCEhhbmRWaWV3EiYKBWNh",
            "cmRzGAEgAygLMhcuY29tLnNwZWxsZGF3bi5DYXJkVmlldyI5Cg9EaXNjYXJk",
            "UGlsZVZpZXcSJgoFY2FyZHMYASADKAsyFy5jb20uc3BlbGxkYXduLkNhcmRW",
            "aWV3InoKClBsYXllckluZm8SDAoEbmFtZRgBIAEoCRIuCghwb3J0cmFpdBgC",
            "IAEoCzIcLmNvbS5zcGVsbGRhd24uU3ByaXRlQWRkcmVzcxIuCg1pZGVudGl0",
            "eV9jYXJkGAMgASgLMhcuY29tLnNwZWxsZGF3bi5DYXJkVmlldyIaCghNYW5h",
            "VmlldxIOCgZhbW91bnQYASABKAUiSQoJU2NvcmVWaWV3Eg0KBXNjb3JlGAEg",
            "ASgFEi0KDHNjb3JlZF9jYXJkcxgCIAMoCzIXLmNvbS5zcGVsbGRhd24uQ2Fy",
            "ZFZpZXciWgoIUm9vbVZpZXcSJgoHcm9vbV9pZBgBIAEoDjIVLmNvbS5zcGVs",
            "bGRhd24uUm9vbUlkEiYKBWNhcmRzGAIgAygLMhcuY29tLnNwZWxsZGF3bi5D",
            "YXJkVmlldyJ5CglBcmVuYVZpZXcSHAoUb3ZlcmxvcmRfcGVyc3BlY3RpdmUY",
            "ASABKAgSJgoFcm9vbXMYAiADKAsyFy5jb20uc3BlbGxkYXduLlJvb21WaWV3",
            "EiYKBWl0ZW1zGAMgAygLMhcuY29tLnNwZWxsZGF3bi5DYXJkVmlldyIzChFB",
            "Y3Rpb25UcmFja2VyVmlldxIeChZhdmFpbGFibGVfYWN0aW9uX2NvdW50GAEg",
            "ASgFIgoKCERlY2tWaWV3IsoCCgpQbGF5ZXJWaWV3Ei4KC3BsYXllcl9pbmZv",
            "GAEgASgLMhkuY29tLnNwZWxsZGF3bi5QbGF5ZXJJbmZvEicKBXNjb3JlGAIg",
            "ASgLMhguY29tLnNwZWxsZGF3bi5TY29yZVZpZXcSJQoEaGFuZBgDIAEoCzIX",
            "LmNvbS5zcGVsbGRhd24uSGFuZFZpZXcSJQoEbWFuYRgEIAEoCzIXLmNvbS5z",
            "cGVsbGRhd24uTWFuYVZpZXcSNAoMZGlzY2FyZF9waWxlGAUgASgLMh4uY29t",
            "LnNwZWxsZGF3bi5EaXNjYXJkUGlsZVZpZXcSOAoOYWN0aW9uX3RyYWNrZXIY",
            "BiABKAsyIC5jb20uc3BlbGxkYXduLkFjdGlvblRyYWNrZXJWaWV3EiUKBGRl",
            "Y2sYByABKAsyFy5jb20uc3BlbGxkYXduLkRlY2tWaWV3IokBCghHYW1lVmll",
            "dxInCgR1c2VyGAEgASgLMhkuY29tLnNwZWxsZGF3bi5QbGF5ZXJWaWV3EisK",
            "CG9wcG9uZW50GAIgASgLMhkuY29tLnNwZWxsZGF3bi5QbGF5ZXJWaWV3EicK",
            "BWFyZW5hGAMgASgLMhguY29tLnNwZWxsZGF3bi5BcmVuYVZpZXcibAoMU2Vy",
            "dmVyQWN0aW9uEiUKB3BheWxvYWQYASABKAsyFC5nb29nbGUucHJvdG9idWYu",
            "QW55EjUKEW9wdGltaXN0aWNfdXBkYXRlGAIgASgLMhouY29tLnNwZWxsZGF3",
            "bi5Db21tYW5kTGlzdCIQCg5HYWluTWFuYUFjdGlvbiIQCg5EcmF3Q2FyZEFj",
            "dGlvbiI3Cg1MZXZlbFVwQWN0aW9uEiYKB3Jvb21faWQYASABKA4yFS5jb20u",
            "c3BlbGxkYXduLlJvb21JZCJFCgpDYXJkVGFyZ2V0EigKB3Jvb21faWQYASAB",
            "KA4yFS5jb20uc3BlbGxkYXduLlJvb21JZEgAQg0KC2NhcmRfdGFyZ2V0ImMK",
            "DlBsYXlDYXJkQWN0aW9uEiYKB2NhcmRfaWQYASABKAsyFS5jb20uc3BlbGxk",
            "YXduLkNhcmRJZBIpCgZ0YXJnZXQYAiABKAsyGS5jb20uc3BlbGxkYXduLkNh",
            "cmRUYXJnZXQiPAoSSW5pdGlhdGVSYWlkQWN0aW9uEiYKB3Jvb21faWQYASAB",
            "KA4yFS5jb20uc3BlbGxkYXduLlJvb21JZCLWAgoKR2FtZUFjdGlvbhI0Cg1z",
            "ZXJ2ZXJfYWN0aW9uGAEgASgLMhsuY29tLnNwZWxsZGF3bi5TZXJ2ZXJBY3Rp",
            "b25IABIyCglnYWluX21hbmEYAiABKAsyHS5jb20uc3BlbGxkYXduLkdhaW5N",
            "YW5hQWN0aW9uSAASMgoJZHJhd19jYXJkGAMgASgLMh0uY29tLnNwZWxsZGF3",
            "bi5EcmF3Q2FyZEFjdGlvbkgAEjAKCGxldmVsX3VwGAQgASgLMhwuY29tLnNw",
            "ZWxsZGF3bi5MZXZlbFVwQWN0aW9uSAASMgoJcGxheV9jYXJkGAUgASgLMh0u",
            "Y29tLnNwZWxsZGF3bi5QbGF5Q2FyZEFjdGlvbkgAEjoKDWluaXRpYXRlX3Jh",
            "aWQYBiABKAsyIS5jb20uc3BlbGxkYXduLkluaXRpYXRlUmFpZEFjdGlvbkgA",
            "QggKBmFjdGlvbiJvChZSZW5kZXJJbnRlcmZhY2VDb21tYW5kEiEKBG5vZGUY",
            "ASABKAsyEy5jb20uc3BlbGxkYXduLk5vZGUSMgoIcG9zaXRpb24YAiABKA4y",
            "IC5jb20uc3BlbGxkYXduLkludGVyZmFjZVBvc2l0aW9uIjoKEVJlbmRlckdh",
            "bWVDb21tYW5kEiUKBGdhbWUYASABKAsyFy5jb20uc3BlbGxkYXduLkdhbWVW",
            "aWV3ImsKE0luaXRpYXRlUmFpZENvbW1hbmQSLAoJaW5pdGlhdG9yGAEgASgO",
            "MhkuY29tLnNwZWxsZGF3bi5QbGF5ZXJOYW1lEiYKB3Jvb21faWQYAiABKA4y",
            "FS5jb20uc3BlbGxkYXduLlJvb21JZCIQCg5FbmRSYWlkQ29tbWFuZCKQAQoR",
            "Q3JlYXRlQ2FyZENvbW1hbmQSJQoEY2FyZBgBIAEoCzIXLmNvbS5zcGVsbGRh",
            "d24uQ2FyZFZpZXcSNwoJYW5pbWF0aW9uGAIgASgOMiQuY29tLnNwZWxsZGF3",
            "bi5DYXJkQ3JlYXRpb25BbmltYXRpb24SGwoTZGlzYWxsb3dfb3B0aW1pc3Rp",
            "YxgDIAEoCCI6ChFVcGRhdGVDYXJkQ29tbWFuZBIlCgRjYXJkGAEgASgLMhcu",
            "Y29tLnNwZWxsZGF3bi5DYXJkVmlldyKMAQoVTW92ZUdhbWVPYmplY3RDb21t",
            "YW5kEicKAmlkGAEgASgLMhsuY29tLnNwZWxsZGF3bi5HYW1lT2JqZWN0SWQS",
            "LwoIcG9zaXRpb24YAiABKAsyHS5jb20uc3BlbGxkYXduLk9iamVjdFBvc2l0",
            "aW9uEhkKEWRpc2FibGVfYW5pbWF0aW9uGAMgASgIIjwKEkRlc3Ryb3lDYXJk",
            "Q29tbWFuZBImCgdjYXJkX2lkGAEgASgLMhUuY29tLnNwZWxsZGF3bi5DYXJk",
            "SWQi1gEKGFVwZGF0ZVBsYXllclN0YXRlQ29tbWFuZBIuCgtwbGF5ZXJfbmFt",
            "ZRgBIAEoDjIZLmNvbS5zcGVsbGRhd24uUGxheWVyTmFtZRInCgRpbmZvGAIg",
            "ASgLMhkuY29tLnNwZWxsZGF3bi5QbGF5ZXJJbmZvEicKBXNjb3JlGAMgASgL",
            "MhguY29tLnNwZWxsZGF3bi5TY29yZVZpZXcSOAoOYWN0aW9uX3RyYWNrZXIY",
            "BCABKAsyIC5jb20uc3BlbGxkYXduLkFjdGlvblRyYWNrZXJWaWV3IrgDChVG",
            "aXJlUHJvamVjdGlsZUNvbW1hbmQSLgoJc291cmNlX2lkGAEgASgLMhsuY29t",
            "LnNwZWxsZGF3bi5HYW1lT2JqZWN0SWQSLgoJdGFyZ2V0X2lkGAIgASgLMhsu",
            "Y29tLnNwZWxsZGF3bi5HYW1lT2JqZWN0SWQSNAoKcHJvamVjdGlsZRgDIAEo",
            "CzIgLmNvbS5zcGVsbGRhd24uUHJvamVjdGlsZUFkZHJlc3MSMQoPdHJhdmVs",
            "X2R1cmF0aW9uGAQgASgLMhguY29tLnNwZWxsZGF3bi5UaW1lVmFsdWUSNAoO",
            "YWRkaXRpb25hbF9oaXQYBSABKAsyHC5jb20uc3BlbGxkYXduLkVmZmVjdEFk",
            "ZHJlc3MSNgoUYWRkaXRpb25hbF9oaXRfZGVsYXkYBiABKAsyGC5jb20uc3Bl",
            "bGxkYXduLlRpbWVWYWx1ZRIvCg1oaWRlX2R1cmF0aW9uGAcgASgLMhguY29t",
            "LnNwZWxsZGF3bi5UaW1lVmFsdWUSNwoQanVtcF90b19wb3NpdGlvbhgIIAEo",
            "CzIdLmNvbS5zcGVsbGRhd24uT2JqZWN0UG9zaXRpb24i/AQKC0dhbWVDb21t",
            "YW5kEkEKEHJlbmRlcl9pbnRlcmZhY2UYASABKAsyJS5jb20uc3BlbGxkYXdu",
            "LlJlbmRlckludGVyZmFjZUNvbW1hbmRIABI3CgtyZW5kZXJfZ2FtZRgCIAEo",
            "CzIgLmNvbS5zcGVsbGRhd24uUmVuZGVyR2FtZUNvbW1hbmRIABI7Cg1pbml0",
            "aWF0ZV9yYWlkGAMgASgLMiIuY29tLnNwZWxsZGF3bi5Jbml0aWF0ZVJhaWRD",
            "b21tYW5kSAASMQoIZW5kX3JhaWQYBCABKAsyHS5jb20uc3BlbGxkYXduLkVu",
            "ZFJhaWRDb21tYW5kSAASNwoLY3JlYXRlX2NhcmQYBSABKAsyIC5jb20uc3Bl",
            "bGxkYXduLkNyZWF0ZUNhcmRDb21tYW5kSAASNwoLdXBkYXRlX2NhcmQYBiAB",
            "KAsyIC5jb20uc3BlbGxkYXduLlVwZGF0ZUNhcmRDb21tYW5kSAASQAoQbW92",
            "ZV9nYW1lX29iamVjdBgHIAEoCzIkLmNvbS5zcGVsbGRhd24uTW92ZUdhbWVP",
            "YmplY3RDb21tYW5kSAASOQoMZGVzdHJveV9jYXJkGAggASgLMiEuY29tLnNw",
            "ZWxsZGF3bi5EZXN0cm95Q2FyZENvbW1hbmRIABJGChN1cGRhdGVfcGxheWVy",
            "X3N0YXRlGAkgASgLMicuY29tLnNwZWxsZGF3bi5VcGRhdGVQbGF5ZXJTdGF0",
            "ZUNvbW1hbmRIABI/Cg9maXJlX3Byb2plY3RpbGUYCiABKAsyJC5jb20uc3Bl",
            "bGxkYXduLkZpcmVQcm9qZWN0aWxlQ29tbWFuZEgAQgkKB2NvbW1hbmQiOwoL",
            "Q29tbWFuZExpc3QSLAoIY29tbWFuZHMYASADKAsyGi5jb20uc3BlbGxkYXdu",
            "LkdhbWVDb21tYW5kKp8BCglGbGV4QWxpZ24SGgoWRkxFWF9BTElHTl9VTlNQ",
            "RUNJRklFRBAAEhMKD0ZMRVhfQUxJR05fQVVUTxABEhkKFUZMRVhfQUxJR05f",
            "RkxFWF9TVEFSVBACEhUKEUZMRVhfQUxJR05fQ0VOVEVSEAMSFwoTRkxFWF9B",
            "TElHTl9GTEVYX0VORBAEEhYKEkZMRVhfQUxJR05fU1RSRVRDSBAFKnAKEEZs",
            "ZXhEaXNwbGF5U3R5bGUSIgoeRkxFWF9ESVNQTEFZX1NUWUxFX1VOU1BFQ0lG",
            "SUVEEAASGwoXRkxFWF9ESVNQTEFZX1NUWUxFX0ZMRVgQARIbChdGTEVYX0RJ",
            "U1BMQVlfU1RZTEVfTk9ORRACKqUBCg1GbGV4RGlyZWN0aW9uEh4KGkZMRVhf",
            "RElSRUNUSU9OX1VOU1BFQ0lGSUVEEAASGQoVRkxFWF9ESVJFQ1RJT05fQ09M",
            "VU1OEAESIQodRkxFWF9ESVJFQ1RJT05fQ09MVU1OX1JFVkVSU0UQAhIWChJG",
            "TEVYX0RJUkVDVElPTl9ST1cQAxIeChpGTEVYX0RJUkVDVElPTl9ST1dfUkVW",
            "RVJTRRAEKmwKCEZsZXhXcmFwEhkKFUZMRVhfV1JBUF9VTlNQRUNJRklFRBAA",
            "EhUKEUZMRVhfV1JBUF9OT19XUkFQEAESEgoORkxFWF9XUkFQX1dSQVAQAhIa",
            "ChZGTEVYX1dSQVBfV1JBUF9SRVZFUlNFEAMquwEKC0ZsZXhKdXN0aWZ5EhwK",
            "GEZMRVhfSlVTVElGWV9VTlNQRUNJRklFRBAAEhsKF0ZMRVhfSlVTVElGWV9G",
            "TEVYX1NUQVJUEAESFwoTRkxFWF9KVVNUSUZZX0NFTlRFUhACEhkKFUZMRVhf",
            "SlVTVElGWV9GTEVYX0VORBADEh4KGkZMRVhfSlVTVElGWV9TUEFDRV9CRVRX",
            "RUVOEAQSHQoZRkxFWF9KVVNUSUZZX1NQQUNFX0FST1VORBAFKmIKDEZsZXhP",
            "dmVyZmxvdxIdChlGTEVYX09WRVJGTE9XX1VOU1BFQ0lGSUVEEAASGQoVRkxF",
            "WF9PVkVSRkxPV19WSVNJQkxFEAESGAoURkxFWF9PVkVSRkxPV19ISURERU4Q",
            "AiplCgxGbGV4UG9zaXRpb24SHQoZRkxFWF9QT1NJVElPTl9VTlNQRUNJRklF",
            "RBAAEhoKFkZMRVhfUE9TSVRJT05fUkVMQVRJVkUQARIaChZGTEVYX1BPU0lU",
            "SU9OX0FCU09MVVRFEAIqYQoMVGV4dE92ZXJmbG93Eh0KGVRFWFRfT1ZFUkZM",
            "T1dfVU5TUEVDSUZJRUQQABIWChJURVhUX09WRVJGTE9XX0NMSVAQARIaChZU",
            "RVhUX09WRVJGTE9XX0VMTElQU0lTEAIq8wUKCkVhc2luZ01vZGUSGwoXRUFT",
            "SU5HX01PREVfVU5TUEVDSUZJRUQQABIUChBFQVNJTkdfTU9ERV9FQVNFEAES",
            "FwoTRUFTSU5HX01PREVfRUFTRV9JThACEhgKFEVBU0lOR19NT0RFX0VBU0Vf",
            "T1VUEAMSGwoXRUFTSU5HX01PREVfRUFTRV9JTl9PVVQQBBIWChJFQVNJTkdf",
            "TU9ERV9MSU5FQVIQBRIcChhFQVNJTkdfTU9ERV9FQVNFX0lOX1NJTkUQBhId",
            "ChlFQVNJTkdfTU9ERV9FQVNFX09VVF9TSU5FEAcSIAocRUFTSU5HX01PREVf",
            "RUFTRV9JTl9PVVRfU0lORRAIEh0KGUVBU0lOR19NT0RFX0VBU0VfSU5fQ1VC",
            "SUMQCRIeChpFQVNJTkdfTU9ERV9FQVNFX09VVF9DVUJJQxAKEiEKHUVBU0lO",
            "R19NT0RFX0VBU0VfSU5fT1VUX0NVQklDEAsSHAoYRUFTSU5HX01PREVfRUFT",
            "RV9JTl9DSVJDEAwSHQoZRUFTSU5HX01PREVfRUFTRV9PVVRfQ0lSQxANEiAK",
            "HEVBU0lOR19NT0RFX0VBU0VfSU5fT1VUX0NJUkMQDhIfChtFQVNJTkdfTU9E",
            "RV9FQVNFX0lOX0VMQVNUSUMQDxIgChxFQVNJTkdfTU9ERV9FQVNFX09VVF9F",
            "TEFTVElDEBASIwofRUFTSU5HX01PREVfRUFTRV9JTl9PVVRfRUxBU1RJQxAR",
            "EhwKGEVBU0lOR19NT0RFX0VBU0VfSU5fQkFDSxASEh0KGUVBU0lOR19NT0RF",
            "X0VBU0VfT1VUX0JBQ0sQExIgChxFQVNJTkdfTU9ERV9FQVNFX0lOX09VVF9C",
            "QUNLEBQSHgoaRUFTSU5HX01PREVfRUFTRV9JTl9CT1VOQ0UQFRIfChtFQVNJ",
            "TkdfTU9ERV9FQVNFX09VVF9CT1VOQ0UQFhIiCh5FQVNJTkdfTU9ERV9FQVNF",
            "X0lOX09VVF9CT1VOQ0UQFyqgAQoOSW1hZ2VTY2FsZU1vZGUSIAocSU1BR0Vf",
            "U0NBTEVfTU9ERV9VTlNQRUNJRklFRBAAEiQKIElNQUdFX1NDQUxFX01PREVf",
            "U1RSRVRDSF9UT19GSUxMEAESIwofSU1BR0VfU0NBTEVfTU9ERV9TQ0FMRV9B",
            "TkRfQ1JPUBACEiEKHUlNQUdFX1NDQUxFX01PREVfU0NBTEVfVE9fRklUEAMq",
            "igEKCUZvbnRTdHlsZRIaChZGT05UX1NUWUxFX1VOU1BFQ0lGSUVEEAASFQoR",
            "Rk9OVF9TVFlMRV9OT1JNQUwQARITCg9GT05UX1NUWUxFX0JPTEQQAhIVChFG",
            "T05UX1NUWUxFX0lUQUxJQxADEh4KGkZPTlRfU1RZTEVfQk9MRF9BTkRfSVRB",
            "TElDEAQqegoPT3ZlcmZsb3dDbGlwQm94EiEKHU9WRVJGTE9XX0NMSVBfQk9Y",
            "X1VOU1BFQ0lGSUVEEAASIQodT1ZFUkZMT1dfQ0xJUF9CT1hfUEFERElOR19C",
            "T1gQARIhCh1PVkVSRkxPV19DTElQX0JPWF9DT05URU5UX0JPWBACKqYCCglU",
            "ZXh0QWxpZ24SGgoWVEVYVF9BTElHTl9VTlNQRUNJRklFRBAAEhkKFVRFWFRf",
            "QUxJR05fVVBQRVJfTEVGVBABEhsKF1RFWFRfQUxJR05fVVBQRVJfQ0VOVEVS",
            "EAISGgoWVEVYVF9BTElHTl9VUFBFUl9SSUdIVBADEhoKFlRFWFRfQUxJR05f",
            "TUlERExFX0xFRlQQBBIcChhURVhUX0FMSUdOX01JRERMRV9DRU5URVIQBRIb",
            "ChdURVhUX0FMSUdOX01JRERMRV9SSUdIVBAGEhkKFVRFWFRfQUxJR05fTE9X",
            "RVJfTEVGVBAHEhsKF1RFWFRfQUxJR05fTE9XRVJfQ0VOVEVSEAgSGgoWVEVY",
            "VF9BTElHTl9MT1dFUl9SSUdIVBAJKqMBChRUZXh0T3ZlcmZsb3dQb3NpdGlv",
            "bhImCiJURVhUX09WRVJGTE9XX1BPU0lUSU9OX1VOU1BFQ0lGSUVEEAASHgoa",
            "VEVYVF9PVkVSRkxPV19QT1NJVElPTl9FTkQQARIgChxURVhUX09WRVJGTE9X",
            "X1BPU0lUSU9OX1NUQVJUEAISIQodVEVYVF9PVkVSRkxPV19QT1NJVElPTl9N",
            "SURETEUQAypqCg5GbGV4VmlzaWJpbGl0eRIfChtGTEVYX1ZJU0lCSUxJVFlf",
            "VU5TUEVDSUZJRUQQABIbChdGTEVYX1ZJU0lCSUxJVFlfVklTSUJMRRABEhoK",
            "FkZMRVhfVklTSUJJTElUWV9ISURERU4QAipaCgpXaGl0ZVNwYWNlEhsKF1dI",
            "SVRFX1NQQUNFX1VOU1BFQ0lGSUVEEAASFgoSV0hJVEVfU1BBQ0VfTk9STUFM",
            "EAESFwoTV0hJVEVfU1BBQ0VfTk9fV1JBUBACKn8KDURpbWVuc2lvblVuaXQS",
            "HgoaRElNRU5TSU9OX1VOSVRfVU5TUEVDSUZJRUQQABIWChJESU1FTlNJT05f",
            "VU5JVF9ESVAQARIdChlESU1FTlNJT05fVU5JVF9QRVJDRU5UQUdFEAISFwoT",
            "RElNRU5TSU9OX1VOSVRfVk1JThADKlkKClBsYXllck5hbWUSGwoXUExBWUVS",
            "X05BTUVfVU5TUEVDSUZJRUQQABIUChBQTEFZRVJfTkFNRV9VU0VSEAESGAoU",
            "UExBWUVSX05BTUVfT1BQT05FTlQQAirEAQoGUm9vbUlkEhcKE1JPT01fSURf",
            "VU5TUEVDSUZJRUQQABIUChBST09NX0lEX1RSRUFTVVJZEAESEwoPUk9PTV9J",
            "RF9TQU5DVFVNEAISEgoOUk9PTV9JRF9DUllQVFMQAxISCg5ST09NX0lEX1JP",
            "T01fQRAEEhIKDlJPT01fSURfUk9PTV9CEAUSEgoOUk9PTV9JRF9ST09NX0MQ",
            "BhISCg5ST09NX0lEX1JPT01fRBAHEhIKDlJPT01fSURfUk9PTV9FEAgqfwoO",
            "VGFyZ2V0aW5nQXJyb3cSHwobVEFSR0VUSU5HX0FSUk9XX1VOU1BFQ0lGSUVE",
            "EAASFwoTVEFSR0VUSU5HX0FSUk9XX1JFRBABEhgKFFRBUkdFVElOR19BUlJP",
            "V19CTFVFEAISGQoVVEFSR0VUSU5HX0FSUk9XX0dSRUVOEAMqywEKEENhblBs",
            "YXlBbGdvcml0aG0SIgoeQ0FOX1BMQVlfQUxHT1JJVEhNX1VOU1BFQ0lGSUVE",
            "EAASIQodQ0FOX1BMQVlfQUxHT1JJVEhNX09QVElNSVNUSUMQARImCiJDQU5f",
            "UExBWV9BTEdPUklUSE1fQURESVRJT05BTF9DT1NUEAISJgoiQ0FOX1BMQVlf",
            "QUxHT1JJVEhNX0FERElUSU9OQUxfUExBWRADEiAKHENBTl9QTEFZX0FMR09S",
            "SVRITV9OT19VUERBVEUQBCqDAQoSU3BlbmRDb3N0QWxnb3JpdGhtEiQKIFNQ",
            "RU5EX0NPU1RfQUxHT1JJVEhNX1VOU1BFQ0lGSUVEEAASIwofU1BFTkRfQ09T",
            "VF9BTEdPUklUSE1fT1BUSU1JU1RJQxABEiIKHlNQRU5EX0NPU1RfQUxHT1JJ",
            "VEhNX05PX1VQREFURRACKl4KDFJvb21Mb2NhdGlvbhIdChlST09NX0xPQ0FU",
            "SU9OX1VOU1BFQ0lGSUVEEAASFgoSUk9PTV9MT0NBVElPTl9CQUNLEAESFwoT",
            "Uk9PTV9MT0NBVElPTl9GUk9OVBACKl4KDEl0ZW1Mb2NhdGlvbhIdChlJVEVN",
            "X0xPQ0FUSU9OX1VOU1BFQ0lGSUVEEAASFgoSSVRFTV9MT0NBVElPTl9MRUZU",
            "EAESFwoTSVRFTV9MT0NBVElPTl9SSUdIVBACKoEBChFJbnRlcmZhY2VQb3Np",
            "dGlvbhIiCh5JTlRFUkZBQ0VfUE9TSVRJT05fVU5TUEVDSUZJRUQQABIiCh5J",
            "TlRFUkZBQ0VfUE9TSVRJT05fRlVMTF9TQ1JFRU4QARIkCiBJTlRFUkZBQ0Vf",
            "UE9TSVRJT05fUkFJRF9DT05UUk9MUxACKnIKFUNhcmRDcmVhdGlvbkFuaW1h",
            "dGlvbhInCiNDQVJEX0NSRUFUSU9OX0FOSU1BVElPTl9VTlNQRUNJRklFRBAA",
            "EjAKLENBUkRfQ1JFQVRJT05fQU5JTUFUSU9OX1VTRVJfREVDS19UT19TVEFH",
            "SU5HEAFCE6oCEFNwZWxsZGF3bi5Qcm90b3NiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Spelldawn.Protos.FlexAlign), typeof(global::Spelldawn.Protos.FlexDisplayStyle), typeof(global::Spelldawn.Protos.FlexDirection), typeof(global::Spelldawn.Protos.FlexWrap), typeof(global::Spelldawn.Protos.FlexJustify), typeof(global::Spelldawn.Protos.FlexOverflow), typeof(global::Spelldawn.Protos.FlexPosition), typeof(global::Spelldawn.Protos.TextOverflow), typeof(global::Spelldawn.Protos.EasingMode), typeof(global::Spelldawn.Protos.ImageScaleMode), typeof(global::Spelldawn.Protos.FontStyle), typeof(global::Spelldawn.Protos.OverflowClipBox), typeof(global::Spelldawn.Protos.TextAlign), typeof(global::Spelldawn.Protos.TextOverflowPosition), typeof(global::Spelldawn.Protos.FlexVisibility), typeof(global::Spelldawn.Protos.WhiteSpace), typeof(global::Spelldawn.Protos.DimensionUnit), typeof(global::Spelldawn.Protos.PlayerName), typeof(global::Spelldawn.Protos.RoomId), typeof(global::Spelldawn.Protos.TargetingArrow), typeof(global::Spelldawn.Protos.CanPlayAlgorithm), typeof(global::Spelldawn.Protos.SpendCostAlgorithm), typeof(global::Spelldawn.Protos.RoomLocation), typeof(global::Spelldawn.Protos.ItemLocation), typeof(global::Spelldawn.Protos.InterfacePosition), typeof(global::Spelldawn.Protos.CardCreationAnimation), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.FlexColor), global::Spelldawn.Protos.FlexColor.Parser, new[]{ "Red", "Green", "Blue", "Alpha" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.SpriteAddress), global::Spelldawn.Protos.SpriteAddress.Parser, new[]{ "Address" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.FontAddress), global::Spelldawn.Protos.FontAddress.Parser, new[]{ "Address" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ProjectileAddress), global::Spelldawn.Protos.ProjectileAddress.Parser, new[]{ "Address" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.EffectAddress), global::Spelldawn.Protos.EffectAddress.Parser, new[]{ "Address" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.FlexVector2), global::Spelldawn.Protos.FlexVector2.Parser, new[]{ "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.FlexVector3), global::Spelldawn.Protos.FlexVector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.Dimension), global::Spelldawn.Protos.Dimension.Parser, new[]{ "Unit", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.DimensionGroup), global::Spelldawn.Protos.DimensionGroup.Parser, new[]{ "Top", "Right", "Bottom", "Left" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.BorderWidth), global::Spelldawn.Protos.BorderWidth.Parser, new[]{ "Top", "Right", "Bottom", "Left" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.BorderColor), global::Spelldawn.Protos.BorderColor.Parser, new[]{ "Top", "Right", "Bottom", "Left" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.BorderRadius), global::Spelldawn.Protos.BorderRadius.Parser, new[]{ "TopLeft", "TopRight", "BottomRight", "BottomLeft" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.FlexRotate), global::Spelldawn.Protos.FlexRotate.Parser, new[]{ "Degrees" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.FlexTranslate), global::Spelldawn.Protos.FlexTranslate.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.FlexScale), global::Spelldawn.Protos.FlexScale.Parser, new[]{ "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.TextShadow), global::Spelldawn.Protos.TextShadow.Parser, new[]{ "Offset", "BlurRadius", "Color" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.TimeValue), global::Spelldawn.Protos.TimeValue.Parser, new[]{ "Milliseconds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ImageSlice), global::Spelldawn.Protos.ImageSlice.Parser, new[]{ "Top", "Right", "Bottom", "Left" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.FlexStyle), global::Spelldawn.Protos.FlexStyle.Parser, new[]{ "AlignContent", "AlignItems", "AlignSelf", "BackgroundColor", "BackgroundImage", "BorderColor", "BorderRadius", "BorderWidth", "Inset", "Color", "Display", "FlexBasis", "FlexDirection", "FlexGrow", "FlexShrink", "Wrap", "FontSize", "Height", "JustifyContent", "LetterSpacing", "Margin", "MaxHeight", "MaxWidth", "MinHeight", "MinWidth", "Opacity", "Overflow", "Padding", "Position", "Rotate", "Scale", "TextOverflow", "TextShadow", "TransformOrigin", "TransitionDelays", "TransitionDurations", "TransitionProperties", "TransitionEasingModes", "Translate", "BackgroundImageTintColor", "BackgroundImageScaleMode", "Font", "FontStyle", "OverflowClipBox", "ParagraphSpacing", "ImageSlice", "TextAlign", "TextOutlineColor", "TextOutlineWidth", "TextOverflowPosition", "Visibility", "WhiteSpace", "Width", "WordSpacing", "BackgroundImageScaleMultiplier", "FixedBackgroundImageAspectRatio" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.Flexbox), global::Spelldawn.Protos.Flexbox.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.Text), global::Spelldawn.Protos.Text.Parser, new[]{ "Label" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.EventHandlers), global::Spelldawn.Protos.EventHandlers.Parser, new[]{ "OnClick" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.NodeType), global::Spelldawn.Protos.NodeType.Parser, new[]{ "Text" }, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.Node), global::Spelldawn.Protos.Node.Parser, new[]{ "Id", "Name", "NodeType", "Children", "EventHandlers", "Style", "HoverStyle", "PressedStyle" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.CardId), global::Spelldawn.Protos.CardId.Parser, new[]{ "IdentityCard", "Value" }, new[]{ "CardId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.GameObjectId), global::Spelldawn.Protos.GameObjectId.Parser, new[]{ "CardId", "Deck", "Hand", "DiscardPile" }, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.CardIcon), global::Spelldawn.Protos.CardIcon.Parser, new[]{ "Background", "Text", "ShowInArena" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.CardIcons), global::Spelldawn.Protos.CardIcons.Parser, new[]{ "TopLeftIcon", "TopRightIcon", "BottomRightIcon", "BottomLeftIcon", "CenterIcon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.CardTitle), global::Spelldawn.Protos.CardTitle.Parser, new[]{ "Text" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.RulesText), global::Spelldawn.Protos.RulesText.Parser, new[]{ "Text" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.PickRoom), global::Spelldawn.Protos.PickRoom.Parser, new[]{ "ValidRooms" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.CardTargeting), global::Spelldawn.Protos.CardTargeting.Parser, new[]{ "PickRoom" }, new[]{ "Targeting" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.CardCost), global::Spelldawn.Protos.CardCost.Parser, new[]{ "ManaCost", "ActionCost", "CanPlay", "CanPlayAlgorithm", "SpendCostAlgorithm" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionOffscreen), global::Spelldawn.Protos.ObjectPositionOffscreen.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionRoom), global::Spelldawn.Protos.ObjectPositionRoom.Parser, new[]{ "RoomId", "RoomLocation", "Index" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionItem), global::Spelldawn.Protos.ObjectPositionItem.Parser, new[]{ "ItemLocation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionStaging), global::Spelldawn.Protos.ObjectPositionStaging.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionHand), global::Spelldawn.Protos.ObjectPositionHand.Parser, new[]{ "Owner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionHandContainer), global::Spelldawn.Protos.ObjectPositionHandContainer.Parser, new[]{ "Owner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionDeck), global::Spelldawn.Protos.ObjectPositionDeck.Parser, new[]{ "Owner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionDeckContainer), global::Spelldawn.Protos.ObjectPositionDeckContainer.Parser, new[]{ "Owner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionDiscard), global::Spelldawn.Protos.ObjectPositionDiscard.Parser, new[]{ "Owner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionDiscardContainer), global::Spelldawn.Protos.ObjectPositionDiscardContainer.Parser, new[]{ "Owner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionScored), global::Spelldawn.Protos.ObjectPositionScored.Parser, new[]{ "Owner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionRaid), global::Spelldawn.Protos.ObjectPositionRaid.Parser, new[]{ "RoomLocation", "Index" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionBrowser), global::Spelldawn.Protos.ObjectPositionBrowser.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPositionIdentityContainer), global::Spelldawn.Protos.ObjectPositionIdentityContainer.Parser, new[]{ "Owner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ObjectPosition), global::Spelldawn.Protos.ObjectPosition.Parser, new[]{ "Offscreen", "Room", "Item", "Staging", "Hand", "HandContainer", "Deck", "DeckContainer", "Discard", "DiscardContainer", "Scored", "Raid", "Browser" }, new[]{ "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.RevealedCardView), global::Spelldawn.Protos.RevealedCardView.Parser, new[]{ "CardFrame", "TitleBackground", "Jewel", "ImageBackground", "Image", "Title", "RulesText", "Targeting", "OnReleasePosition", "Cost" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.CardView), global::Spelldawn.Protos.CardView.Parser, new[]{ "CardId", "OnCreatePosition", "CardBack", "CardIcons", "ArenaFrame", "RevealedCard" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.HandView), global::Spelldawn.Protos.HandView.Parser, new[]{ "Cards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.DiscardPileView), global::Spelldawn.Protos.DiscardPileView.Parser, new[]{ "Cards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.PlayerInfo), global::Spelldawn.Protos.PlayerInfo.Parser, new[]{ "Name", "Portrait", "IdentityCard" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ManaView), global::Spelldawn.Protos.ManaView.Parser, new[]{ "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ScoreView), global::Spelldawn.Protos.ScoreView.Parser, new[]{ "Score", "ScoredCards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.RoomView), global::Spelldawn.Protos.RoomView.Parser, new[]{ "RoomId", "Cards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ArenaView), global::Spelldawn.Protos.ArenaView.Parser, new[]{ "OverlordPerspective", "Rooms", "Items" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ActionTrackerView), global::Spelldawn.Protos.ActionTrackerView.Parser, new[]{ "AvailableActionCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.DeckView), global::Spelldawn.Protos.DeckView.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.PlayerView), global::Spelldawn.Protos.PlayerView.Parser, new[]{ "PlayerInfo", "Score", "Hand", "Mana", "DiscardPile", "ActionTracker", "Deck" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.GameView), global::Spelldawn.Protos.GameView.Parser, new[]{ "User", "Opponent", "Arena" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ServerAction), global::Spelldawn.Protos.ServerAction.Parser, new[]{ "Payload", "OptimisticUpdate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.GainManaAction), global::Spelldawn.Protos.GainManaAction.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.DrawCardAction), global::Spelldawn.Protos.DrawCardAction.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.LevelUpAction), global::Spelldawn.Protos.LevelUpAction.Parser, new[]{ "RoomId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.CardTarget), global::Spelldawn.Protos.CardTarget.Parser, new[]{ "RoomId" }, new[]{ "CardTarget" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.PlayCardAction), global::Spelldawn.Protos.PlayCardAction.Parser, new[]{ "CardId", "Target" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.InitiateRaidAction), global::Spelldawn.Protos.InitiateRaidAction.Parser, new[]{ "RoomId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.GameAction), global::Spelldawn.Protos.GameAction.Parser, new[]{ "ServerAction", "GainMana", "DrawCard", "LevelUp", "PlayCard", "InitiateRaid" }, new[]{ "Action" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.RenderInterfaceCommand), global::Spelldawn.Protos.RenderInterfaceCommand.Parser, new[]{ "Node", "Position" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.RenderGameCommand), global::Spelldawn.Protos.RenderGameCommand.Parser, new[]{ "Game" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.InitiateRaidCommand), global::Spelldawn.Protos.InitiateRaidCommand.Parser, new[]{ "Initiator", "RoomId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.EndRaidCommand), global::Spelldawn.Protos.EndRaidCommand.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.CreateCardCommand), global::Spelldawn.Protos.CreateCardCommand.Parser, new[]{ "Card", "Animation", "DisallowOptimistic" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.UpdateCardCommand), global::Spelldawn.Protos.UpdateCardCommand.Parser, new[]{ "Card" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.MoveGameObjectCommand), global::Spelldawn.Protos.MoveGameObjectCommand.Parser, new[]{ "Id", "Position", "DisableAnimation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.DestroyCardCommand), global::Spelldawn.Protos.DestroyCardCommand.Parser, new[]{ "CardId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.UpdatePlayerStateCommand), global::Spelldawn.Protos.UpdatePlayerStateCommand.Parser, new[]{ "PlayerName", "Info", "Score", "ActionTracker" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.FireProjectileCommand), global::Spelldawn.Protos.FireProjectileCommand.Parser, new[]{ "SourceId", "TargetId", "Projectile", "TravelDuration", "AdditionalHit", "AdditionalHitDelay", "HideDuration", "JumpToPosition" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.GameCommand), global::Spelldawn.Protos.GameCommand.Parser, new[]{ "RenderInterface", "RenderGame", "InitiateRaid", "EndRaid", "CreateCard", "UpdateCard", "MoveGameObject", "DestroyCard", "UpdatePlayerState", "FireProjectile" }, new[]{ "Command" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.CommandList), global::Spelldawn.Protos.CommandList.Parser, new[]{ "Commands" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum FlexAlign {
    [pbr::OriginalName("FLEX_ALIGN_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("FLEX_ALIGN_AUTO")] Auto = 1,
    [pbr::OriginalName("FLEX_ALIGN_FLEX_START")] FlexStart = 2,
    [pbr::OriginalName("FLEX_ALIGN_CENTER")] Center = 3,
    [pbr::OriginalName("FLEX_ALIGN_FLEX_END")] FlexEnd = 4,
    [pbr::OriginalName("FLEX_ALIGN_STRETCH")] Stretch = 5,
  }

  public enum FlexDisplayStyle {
    [pbr::OriginalName("FLEX_DISPLAY_STYLE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("FLEX_DISPLAY_STYLE_FLEX")] Flex = 1,
    [pbr::OriginalName("FLEX_DISPLAY_STYLE_NONE")] None = 2,
  }

  public enum FlexDirection {
    [pbr::OriginalName("FLEX_DIRECTION_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("FLEX_DIRECTION_COLUMN")] Column = 1,
    [pbr::OriginalName("FLEX_DIRECTION_COLUMN_REVERSE")] ColumnReverse = 2,
    [pbr::OriginalName("FLEX_DIRECTION_ROW")] Row = 3,
    [pbr::OriginalName("FLEX_DIRECTION_ROW_REVERSE")] RowReverse = 4,
  }

  public enum FlexWrap {
    [pbr::OriginalName("FLEX_WRAP_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("FLEX_WRAP_NO_WRAP")] NoWrap = 1,
    [pbr::OriginalName("FLEX_WRAP_WRAP")] Wrap = 2,
    [pbr::OriginalName("FLEX_WRAP_WRAP_REVERSE")] WrapReverse = 3,
  }

  public enum FlexJustify {
    [pbr::OriginalName("FLEX_JUSTIFY_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("FLEX_JUSTIFY_FLEX_START")] FlexStart = 1,
    [pbr::OriginalName("FLEX_JUSTIFY_CENTER")] Center = 2,
    [pbr::OriginalName("FLEX_JUSTIFY_FLEX_END")] FlexEnd = 3,
    [pbr::OriginalName("FLEX_JUSTIFY_SPACE_BETWEEN")] SpaceBetween = 4,
    [pbr::OriginalName("FLEX_JUSTIFY_SPACE_AROUND")] SpaceAround = 5,
  }

  public enum FlexOverflow {
    [pbr::OriginalName("FLEX_OVERFLOW_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("FLEX_OVERFLOW_VISIBLE")] Visible = 1,
    [pbr::OriginalName("FLEX_OVERFLOW_HIDDEN")] Hidden = 2,
  }

  public enum FlexPosition {
    [pbr::OriginalName("FLEX_POSITION_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("FLEX_POSITION_RELATIVE")] Relative = 1,
    [pbr::OriginalName("FLEX_POSITION_ABSOLUTE")] Absolute = 2,
  }

  public enum TextOverflow {
    [pbr::OriginalName("TEXT_OVERFLOW_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("TEXT_OVERFLOW_CLIP")] Clip = 1,
    [pbr::OriginalName("TEXT_OVERFLOW_ELLIPSIS")] Ellipsis = 2,
  }

  public enum EasingMode {
    [pbr::OriginalName("EASING_MODE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("EASING_MODE_EASE")] Ease = 1,
    [pbr::OriginalName("EASING_MODE_EASE_IN")] EaseIn = 2,
    [pbr::OriginalName("EASING_MODE_EASE_OUT")] EaseOut = 3,
    [pbr::OriginalName("EASING_MODE_EASE_IN_OUT")] EaseInOut = 4,
    [pbr::OriginalName("EASING_MODE_LINEAR")] Linear = 5,
    [pbr::OriginalName("EASING_MODE_EASE_IN_SINE")] EaseInSine = 6,
    [pbr::OriginalName("EASING_MODE_EASE_OUT_SINE")] EaseOutSine = 7,
    [pbr::OriginalName("EASING_MODE_EASE_IN_OUT_SINE")] EaseInOutSine = 8,
    [pbr::OriginalName("EASING_MODE_EASE_IN_CUBIC")] EaseInCubic = 9,
    [pbr::OriginalName("EASING_MODE_EASE_OUT_CUBIC")] EaseOutCubic = 10,
    [pbr::OriginalName("EASING_MODE_EASE_IN_OUT_CUBIC")] EaseInOutCubic = 11,
    [pbr::OriginalName("EASING_MODE_EASE_IN_CIRC")] EaseInCirc = 12,
    [pbr::OriginalName("EASING_MODE_EASE_OUT_CIRC")] EaseOutCirc = 13,
    [pbr::OriginalName("EASING_MODE_EASE_IN_OUT_CIRC")] EaseInOutCirc = 14,
    [pbr::OriginalName("EASING_MODE_EASE_IN_ELASTIC")] EaseInElastic = 15,
    [pbr::OriginalName("EASING_MODE_EASE_OUT_ELASTIC")] EaseOutElastic = 16,
    [pbr::OriginalName("EASING_MODE_EASE_IN_OUT_ELASTIC")] EaseInOutElastic = 17,
    [pbr::OriginalName("EASING_MODE_EASE_IN_BACK")] EaseInBack = 18,
    [pbr::OriginalName("EASING_MODE_EASE_OUT_BACK")] EaseOutBack = 19,
    [pbr::OriginalName("EASING_MODE_EASE_IN_OUT_BACK")] EaseInOutBack = 20,
    [pbr::OriginalName("EASING_MODE_EASE_IN_BOUNCE")] EaseInBounce = 21,
    [pbr::OriginalName("EASING_MODE_EASE_OUT_BOUNCE")] EaseOutBounce = 22,
    [pbr::OriginalName("EASING_MODE_EASE_IN_OUT_BOUNCE")] EaseInOutBounce = 23,
  }

  public enum ImageScaleMode {
    [pbr::OriginalName("IMAGE_SCALE_MODE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("IMAGE_SCALE_MODE_STRETCH_TO_FILL")] StretchToFill = 1,
    [pbr::OriginalName("IMAGE_SCALE_MODE_SCALE_AND_CROP")] ScaleAndCrop = 2,
    [pbr::OriginalName("IMAGE_SCALE_MODE_SCALE_TO_FIT")] ScaleToFit = 3,
  }

  public enum FontStyle {
    [pbr::OriginalName("FONT_STYLE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("FONT_STYLE_NORMAL")] Normal = 1,
    [pbr::OriginalName("FONT_STYLE_BOLD")] Bold = 2,
    [pbr::OriginalName("FONT_STYLE_ITALIC")] Italic = 3,
    [pbr::OriginalName("FONT_STYLE_BOLD_AND_ITALIC")] BoldAndItalic = 4,
  }

  public enum OverflowClipBox {
    [pbr::OriginalName("OVERFLOW_CLIP_BOX_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("OVERFLOW_CLIP_BOX_PADDING_BOX")] PaddingBox = 1,
    [pbr::OriginalName("OVERFLOW_CLIP_BOX_CONTENT_BOX")] ContentBox = 2,
  }

  public enum TextAlign {
    [pbr::OriginalName("TEXT_ALIGN_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("TEXT_ALIGN_UPPER_LEFT")] UpperLeft = 1,
    [pbr::OriginalName("TEXT_ALIGN_UPPER_CENTER")] UpperCenter = 2,
    [pbr::OriginalName("TEXT_ALIGN_UPPER_RIGHT")] UpperRight = 3,
    [pbr::OriginalName("TEXT_ALIGN_MIDDLE_LEFT")] MiddleLeft = 4,
    [pbr::OriginalName("TEXT_ALIGN_MIDDLE_CENTER")] MiddleCenter = 5,
    [pbr::OriginalName("TEXT_ALIGN_MIDDLE_RIGHT")] MiddleRight = 6,
    [pbr::OriginalName("TEXT_ALIGN_LOWER_LEFT")] LowerLeft = 7,
    [pbr::OriginalName("TEXT_ALIGN_LOWER_CENTER")] LowerCenter = 8,
    [pbr::OriginalName("TEXT_ALIGN_LOWER_RIGHT")] LowerRight = 9,
  }

  public enum TextOverflowPosition {
    [pbr::OriginalName("TEXT_OVERFLOW_POSITION_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("TEXT_OVERFLOW_POSITION_END")] End = 1,
    [pbr::OriginalName("TEXT_OVERFLOW_POSITION_START")] Start = 2,
    [pbr::OriginalName("TEXT_OVERFLOW_POSITION_MIDDLE")] Middle = 3,
  }

  public enum FlexVisibility {
    [pbr::OriginalName("FLEX_VISIBILITY_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("FLEX_VISIBILITY_VISIBLE")] Visible = 1,
    [pbr::OriginalName("FLEX_VISIBILITY_HIDDEN")] Hidden = 2,
  }

  public enum WhiteSpace {
    [pbr::OriginalName("WHITE_SPACE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("WHITE_SPACE_NORMAL")] Normal = 1,
    [pbr::OriginalName("WHITE_SPACE_NO_WRAP")] NoWrap = 2,
  }

  public enum DimensionUnit {
    [pbr::OriginalName("DIMENSION_UNIT_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///* Density-independent pixels, which unity also calls "pixels". 
    /// </summary>
    [pbr::OriginalName("DIMENSION_UNIT_DIP")] Dip = 1,
    [pbr::OriginalName("DIMENSION_UNIT_PERCENTAGE")] Percentage = 2,
    [pbr::OriginalName("DIMENSION_UNIT_VMIN")] Vmin = 3,
  }

  public enum PlayerName {
    [pbr::OriginalName("PLAYER_NAME_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("PLAYER_NAME_USER")] User = 1,
    [pbr::OriginalName("PLAYER_NAME_OPPONENT")] Opponent = 2,
  }

  public enum RoomId {
    [pbr::OriginalName("ROOM_ID_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("ROOM_ID_TREASURY")] Treasury = 1,
    [pbr::OriginalName("ROOM_ID_SANCTUM")] Sanctum = 2,
    [pbr::OriginalName("ROOM_ID_CRYPTS")] Crypts = 3,
    [pbr::OriginalName("ROOM_ID_ROOM_A")] RoomA = 4,
    [pbr::OriginalName("ROOM_ID_ROOM_B")] RoomB = 5,
    [pbr::OriginalName("ROOM_ID_ROOM_C")] RoomC = 6,
    [pbr::OriginalName("ROOM_ID_ROOM_D")] RoomD = 7,
    [pbr::OriginalName("ROOM_ID_ROOM_E")] RoomE = 8,
  }

  public enum TargetingArrow {
    [pbr::OriginalName("TARGETING_ARROW_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("TARGETING_ARROW_RED")] Red = 1,
    [pbr::OriginalName("TARGETING_ARROW_BLUE")] Blue = 2,
    [pbr::OriginalName("TARGETING_ARROW_GREEN")] Green = 3,
  }

  public enum CanPlayAlgorithm {
    [pbr::OriginalName("CAN_PLAY_ALGORITHM_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///*
    /// Always update the 'can_play' state automatically based on available mana
    /// and actions.
    /// </summary>
    [pbr::OriginalName("CAN_PLAY_ALGORITHM_OPTIMISTIC")] Optimistic = 1,
    /// <summary>
    ///*
    /// 'Optimistic False' algorithm for cards with an additional cost. Will
    /// transition the 'can_play' state to false based on available mana and
    /// actions, but not to true.
    /// </summary>
    [pbr::OriginalName("CAN_PLAY_ALGORITHM_ADDITIONAL_COST")] AdditionalCost = 2,
    /// <summary>
    ///*
    /// 'Optimistic True' algorithm, for cards which can always be played for
    /// their normal cost, but have other valid play windows as well. Will
    /// transition the 'can_play' state to true based on available mana and
    /// actions, but not to false.
    /// </summary>
    [pbr::OriginalName("CAN_PLAY_ALGORITHM_ADDITIONAL_PLAY")] AdditionalPlay = 3,
    /// <summary>
    ///*
    /// Do not transition the 'can_play' state automatically
    /// </summary>
    [pbr::OriginalName("CAN_PLAY_ALGORITHM_NO_UPDATE")] NoUpdate = 4,
  }

  public enum SpendCostAlgorithm {
    [pbr::OriginalName("SPEND_COST_ALGORITHM_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///* Deduct the mana &amp; action cost immediately when this card is played. 
    /// </summary>
    [pbr::OriginalName("SPEND_COST_ALGORITHM_OPTIMISTIC")] Optimistic = 1,
    /// <summary>
    ///* Do not modify mana &amp; action values when this card is played. 
    /// </summary>
    [pbr::OriginalName("SPEND_COST_ALGORITHM_NO_UPDATE")] NoUpdate = 2,
  }

  public enum RoomLocation {
    [pbr::OriginalName("ROOM_LOCATION_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("ROOM_LOCATION_BACK")] Back = 1,
    [pbr::OriginalName("ROOM_LOCATION_FRONT")] Front = 2,
  }

  public enum ItemLocation {
    [pbr::OriginalName("ITEM_LOCATION_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("ITEM_LOCATION_LEFT")] Left = 1,
    [pbr::OriginalName("ITEM_LOCATION_RIGHT")] Right = 2,
  }

  public enum InterfacePosition {
    [pbr::OriginalName("INTERFACE_POSITION_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("INTERFACE_POSITION_FULL_SCREEN")] FullScreen = 1,
    [pbr::OriginalName("INTERFACE_POSITION_RAID_CONTROLS")] RaidControls = 2,
  }

  public enum CardCreationAnimation {
    [pbr::OriginalName("CARD_CREATION_ANIMATION_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("CARD_CREATION_ANIMATION_USER_DECK_TO_STAGING")] UserDeckToStaging = 1,
  }

  #endregion

  #region Messages
  public sealed partial class FlexColor : pb::IMessage<FlexColor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FlexColor> _parser = new pb::MessageParser<FlexColor>(() => new FlexColor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlexColor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexColor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexColor(FlexColor other) : this() {
      red_ = other.red_;
      green_ = other.green_;
      blue_ = other.blue_;
      alpha_ = other.alpha_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexColor Clone() {
      return new FlexColor(this);
    }

    /// <summary>Field number for the "red" field.</summary>
    public const int RedFieldNumber = 1;
    private float red_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Red {
      get { return red_; }
      set {
        red_ = value;
      }
    }

    /// <summary>Field number for the "green" field.</summary>
    public const int GreenFieldNumber = 2;
    private float green_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Green {
      get { return green_; }
      set {
        green_ = value;
      }
    }

    /// <summary>Field number for the "blue" field.</summary>
    public const int BlueFieldNumber = 3;
    private float blue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Blue {
      get { return blue_; }
      set {
        blue_ = value;
      }
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 4;
    private float alpha_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlexColor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlexColor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Red, other.Red)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Green, other.Green)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Blue, other.Blue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Alpha, other.Alpha)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Red != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Red);
      if (Green != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Green);
      if (Blue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Blue);
      if (Alpha != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Alpha);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Red != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Red);
      }
      if (Green != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Green);
      }
      if (Blue != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Blue);
      }
      if (Alpha != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Alpha);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Red != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Red);
      }
      if (Green != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Green);
      }
      if (Blue != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Blue);
      }
      if (Alpha != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Alpha);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Red != 0F) {
        size += 1 + 4;
      }
      if (Green != 0F) {
        size += 1 + 4;
      }
      if (Blue != 0F) {
        size += 1 + 4;
      }
      if (Alpha != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlexColor other) {
      if (other == null) {
        return;
      }
      if (other.Red != 0F) {
        Red = other.Red;
      }
      if (other.Green != 0F) {
        Green = other.Green;
      }
      if (other.Blue != 0F) {
        Blue = other.Blue;
      }
      if (other.Alpha != 0F) {
        Alpha = other.Alpha;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Red = input.ReadFloat();
            break;
          }
          case 21: {
            Green = input.ReadFloat();
            break;
          }
          case 29: {
            Blue = input.ReadFloat();
            break;
          }
          case 37: {
            Alpha = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Red = input.ReadFloat();
            break;
          }
          case 21: {
            Green = input.ReadFloat();
            break;
          }
          case 29: {
            Blue = input.ReadFloat();
            break;
          }
          case 37: {
            Alpha = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SpriteAddress : pb::IMessage<SpriteAddress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpriteAddress> _parser = new pb::MessageParser<SpriteAddress>(() => new SpriteAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpriteAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpriteAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpriteAddress(SpriteAddress other) : this() {
      address_ = other.address_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpriteAddress Clone() {
      return new SpriteAddress(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpriteAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpriteAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpriteAddress other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FontAddress : pb::IMessage<FontAddress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FontAddress> _parser = new pb::MessageParser<FontAddress>(() => new FontAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FontAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontAddress(FontAddress other) : this() {
      address_ = other.address_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontAddress Clone() {
      return new FontAddress(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FontAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FontAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FontAddress other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ProjectileAddress : pb::IMessage<ProjectileAddress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProjectileAddress> _parser = new pb::MessageParser<ProjectileAddress>(() => new ProjectileAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProjectileAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectileAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectileAddress(ProjectileAddress other) : this() {
      address_ = other.address_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectileAddress Clone() {
      return new ProjectileAddress(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProjectileAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProjectileAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProjectileAddress other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EffectAddress : pb::IMessage<EffectAddress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EffectAddress> _parser = new pb::MessageParser<EffectAddress>(() => new EffectAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EffectAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectAddress(EffectAddress other) : this() {
      address_ = other.address_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectAddress Clone() {
      return new EffectAddress(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EffectAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EffectAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EffectAddress other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FlexVector2 : pb::IMessage<FlexVector2>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FlexVector2> _parser = new pb::MessageParser<FlexVector2>(() => new FlexVector2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlexVector2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexVector2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexVector2(FlexVector2 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexVector2 Clone() {
      return new FlexVector2(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlexVector2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlexVector2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlexVector2 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FlexVector3 : pb::IMessage<FlexVector3>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FlexVector3> _parser = new pb::MessageParser<FlexVector3>(() => new FlexVector3());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlexVector3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexVector3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexVector3(FlexVector3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexVector3 Clone() {
      return new FlexVector3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlexVector3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlexVector3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlexVector3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Dimension : pb::IMessage<Dimension>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Dimension> _parser = new pb::MessageParser<Dimension>(() => new Dimension());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Dimension> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dimension() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dimension(Dimension other) : this() {
      unit_ = other.unit_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dimension Clone() {
      return new Dimension(this);
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 1;
    private global::Spelldawn.Protos.DimensionUnit unit_ = global::Spelldawn.Protos.DimensionUnit.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.DimensionUnit Unit {
      get { return unit_; }
      set {
        unit_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private float value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Dimension);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Dimension other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Unit != other.Unit) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Unit != global::Spelldawn.Protos.DimensionUnit.Unspecified) hash ^= Unit.GetHashCode();
      if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Unit != global::Spelldawn.Protos.DimensionUnit.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Unit);
      }
      if (Value != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Unit != global::Spelldawn.Protos.DimensionUnit.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Unit);
      }
      if (Value != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Unit != global::Spelldawn.Protos.DimensionUnit.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Unit);
      }
      if (Value != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Dimension other) {
      if (other == null) {
        return;
      }
      if (other.Unit != global::Spelldawn.Protos.DimensionUnit.Unspecified) {
        Unit = other.Unit;
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Unit = (global::Spelldawn.Protos.DimensionUnit) input.ReadEnum();
            break;
          }
          case 21: {
            Value = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Unit = (global::Spelldawn.Protos.DimensionUnit) input.ReadEnum();
            break;
          }
          case 21: {
            Value = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DimensionGroup : pb::IMessage<DimensionGroup>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DimensionGroup> _parser = new pb::MessageParser<DimensionGroup>(() => new DimensionGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DimensionGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DimensionGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DimensionGroup(DimensionGroup other) : this() {
      top_ = other.top_ != null ? other.top_.Clone() : null;
      right_ = other.right_ != null ? other.right_.Clone() : null;
      bottom_ = other.bottom_ != null ? other.bottom_.Clone() : null;
      left_ = other.left_ != null ? other.left_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DimensionGroup Clone() {
      return new DimensionGroup(this);
    }

    /// <summary>Field number for the "top" field.</summary>
    public const int TopFieldNumber = 1;
    private global::Spelldawn.Protos.Dimension top_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension Top {
      get { return top_; }
      set {
        top_ = value;
      }
    }

    /// <summary>Field number for the "right" field.</summary>
    public const int RightFieldNumber = 2;
    private global::Spelldawn.Protos.Dimension right_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension Right {
      get { return right_; }
      set {
        right_ = value;
      }
    }

    /// <summary>Field number for the "bottom" field.</summary>
    public const int BottomFieldNumber = 3;
    private global::Spelldawn.Protos.Dimension bottom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension Bottom {
      get { return bottom_; }
      set {
        bottom_ = value;
      }
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 4;
    private global::Spelldawn.Protos.Dimension left_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DimensionGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DimensionGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Top, other.Top)) return false;
      if (!object.Equals(Right, other.Right)) return false;
      if (!object.Equals(Bottom, other.Bottom)) return false;
      if (!object.Equals(Left, other.Left)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (top_ != null) hash ^= Top.GetHashCode();
      if (right_ != null) hash ^= Right.GetHashCode();
      if (bottom_ != null) hash ^= Bottom.GetHashCode();
      if (left_ != null) hash ^= Left.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (top_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Top);
      }
      if (right_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Right);
      }
      if (bottom_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Bottom);
      }
      if (left_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Left);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (top_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Top);
      }
      if (right_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Right);
      }
      if (bottom_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Bottom);
      }
      if (left_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Left);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (top_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Top);
      }
      if (right_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Right);
      }
      if (bottom_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bottom);
      }
      if (left_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Left);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DimensionGroup other) {
      if (other == null) {
        return;
      }
      if (other.top_ != null) {
        if (top_ == null) {
          Top = new global::Spelldawn.Protos.Dimension();
        }
        Top.MergeFrom(other.Top);
      }
      if (other.right_ != null) {
        if (right_ == null) {
          Right = new global::Spelldawn.Protos.Dimension();
        }
        Right.MergeFrom(other.Right);
      }
      if (other.bottom_ != null) {
        if (bottom_ == null) {
          Bottom = new global::Spelldawn.Protos.Dimension();
        }
        Bottom.MergeFrom(other.Bottom);
      }
      if (other.left_ != null) {
        if (left_ == null) {
          Left = new global::Spelldawn.Protos.Dimension();
        }
        Left.MergeFrom(other.Left);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (top_ == null) {
              Top = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Top);
            break;
          }
          case 18: {
            if (right_ == null) {
              Right = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Right);
            break;
          }
          case 26: {
            if (bottom_ == null) {
              Bottom = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Bottom);
            break;
          }
          case 34: {
            if (left_ == null) {
              Left = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Left);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (top_ == null) {
              Top = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Top);
            break;
          }
          case 18: {
            if (right_ == null) {
              Right = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Right);
            break;
          }
          case 26: {
            if (bottom_ == null) {
              Bottom = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Bottom);
            break;
          }
          case 34: {
            if (left_ == null) {
              Left = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Left);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BorderWidth : pb::IMessage<BorderWidth>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BorderWidth> _parser = new pb::MessageParser<BorderWidth>(() => new BorderWidth());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BorderWidth> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderWidth() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderWidth(BorderWidth other) : this() {
      top_ = other.top_;
      right_ = other.right_;
      bottom_ = other.bottom_;
      left_ = other.left_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderWidth Clone() {
      return new BorderWidth(this);
    }

    /// <summary>Field number for the "top" field.</summary>
    public const int TopFieldNumber = 1;
    private float top_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Top {
      get { return top_; }
      set {
        top_ = value;
      }
    }

    /// <summary>Field number for the "right" field.</summary>
    public const int RightFieldNumber = 2;
    private float right_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Right {
      get { return right_; }
      set {
        right_ = value;
      }
    }

    /// <summary>Field number for the "bottom" field.</summary>
    public const int BottomFieldNumber = 3;
    private float bottom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Bottom {
      get { return bottom_; }
      set {
        bottom_ = value;
      }
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 4;
    private float left_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BorderWidth);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BorderWidth other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Top, other.Top)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Right, other.Right)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Bottom, other.Bottom)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Left, other.Left)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Top != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Top);
      if (Right != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Right);
      if (Bottom != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Bottom);
      if (Left != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Left);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Top != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Top);
      }
      if (Right != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Right);
      }
      if (Bottom != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Bottom);
      }
      if (Left != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Left);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Top != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Top);
      }
      if (Right != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Right);
      }
      if (Bottom != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Bottom);
      }
      if (Left != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Left);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Top != 0F) {
        size += 1 + 4;
      }
      if (Right != 0F) {
        size += 1 + 4;
      }
      if (Bottom != 0F) {
        size += 1 + 4;
      }
      if (Left != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BorderWidth other) {
      if (other == null) {
        return;
      }
      if (other.Top != 0F) {
        Top = other.Top;
      }
      if (other.Right != 0F) {
        Right = other.Right;
      }
      if (other.Bottom != 0F) {
        Bottom = other.Bottom;
      }
      if (other.Left != 0F) {
        Left = other.Left;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Top = input.ReadFloat();
            break;
          }
          case 21: {
            Right = input.ReadFloat();
            break;
          }
          case 29: {
            Bottom = input.ReadFloat();
            break;
          }
          case 37: {
            Left = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Top = input.ReadFloat();
            break;
          }
          case 21: {
            Right = input.ReadFloat();
            break;
          }
          case 29: {
            Bottom = input.ReadFloat();
            break;
          }
          case 37: {
            Left = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BorderColor : pb::IMessage<BorderColor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BorderColor> _parser = new pb::MessageParser<BorderColor>(() => new BorderColor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BorderColor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderColor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderColor(BorderColor other) : this() {
      top_ = other.top_ != null ? other.top_.Clone() : null;
      right_ = other.right_ != null ? other.right_.Clone() : null;
      bottom_ = other.bottom_ != null ? other.bottom_.Clone() : null;
      left_ = other.left_ != null ? other.left_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderColor Clone() {
      return new BorderColor(this);
    }

    /// <summary>Field number for the "top" field.</summary>
    public const int TopFieldNumber = 1;
    private global::Spelldawn.Protos.FlexColor top_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexColor Top {
      get { return top_; }
      set {
        top_ = value;
      }
    }

    /// <summary>Field number for the "right" field.</summary>
    public const int RightFieldNumber = 2;
    private global::Spelldawn.Protos.FlexColor right_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexColor Right {
      get { return right_; }
      set {
        right_ = value;
      }
    }

    /// <summary>Field number for the "bottom" field.</summary>
    public const int BottomFieldNumber = 3;
    private global::Spelldawn.Protos.FlexColor bottom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexColor Bottom {
      get { return bottom_; }
      set {
        bottom_ = value;
      }
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 4;
    private global::Spelldawn.Protos.FlexColor left_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexColor Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BorderColor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BorderColor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Top, other.Top)) return false;
      if (!object.Equals(Right, other.Right)) return false;
      if (!object.Equals(Bottom, other.Bottom)) return false;
      if (!object.Equals(Left, other.Left)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (top_ != null) hash ^= Top.GetHashCode();
      if (right_ != null) hash ^= Right.GetHashCode();
      if (bottom_ != null) hash ^= Bottom.GetHashCode();
      if (left_ != null) hash ^= Left.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (top_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Top);
      }
      if (right_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Right);
      }
      if (bottom_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Bottom);
      }
      if (left_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Left);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (top_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Top);
      }
      if (right_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Right);
      }
      if (bottom_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Bottom);
      }
      if (left_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Left);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (top_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Top);
      }
      if (right_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Right);
      }
      if (bottom_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bottom);
      }
      if (left_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Left);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BorderColor other) {
      if (other == null) {
        return;
      }
      if (other.top_ != null) {
        if (top_ == null) {
          Top = new global::Spelldawn.Protos.FlexColor();
        }
        Top.MergeFrom(other.Top);
      }
      if (other.right_ != null) {
        if (right_ == null) {
          Right = new global::Spelldawn.Protos.FlexColor();
        }
        Right.MergeFrom(other.Right);
      }
      if (other.bottom_ != null) {
        if (bottom_ == null) {
          Bottom = new global::Spelldawn.Protos.FlexColor();
        }
        Bottom.MergeFrom(other.Bottom);
      }
      if (other.left_ != null) {
        if (left_ == null) {
          Left = new global::Spelldawn.Protos.FlexColor();
        }
        Left.MergeFrom(other.Left);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (top_ == null) {
              Top = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(Top);
            break;
          }
          case 18: {
            if (right_ == null) {
              Right = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(Right);
            break;
          }
          case 26: {
            if (bottom_ == null) {
              Bottom = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(Bottom);
            break;
          }
          case 34: {
            if (left_ == null) {
              Left = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(Left);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (top_ == null) {
              Top = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(Top);
            break;
          }
          case 18: {
            if (right_ == null) {
              Right = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(Right);
            break;
          }
          case 26: {
            if (bottom_ == null) {
              Bottom = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(Bottom);
            break;
          }
          case 34: {
            if (left_ == null) {
              Left = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(Left);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BorderRadius : pb::IMessage<BorderRadius>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BorderRadius> _parser = new pb::MessageParser<BorderRadius>(() => new BorderRadius());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BorderRadius> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderRadius() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderRadius(BorderRadius other) : this() {
      topLeft_ = other.topLeft_ != null ? other.topLeft_.Clone() : null;
      topRight_ = other.topRight_ != null ? other.topRight_.Clone() : null;
      bottomRight_ = other.bottomRight_ != null ? other.bottomRight_.Clone() : null;
      bottomLeft_ = other.bottomLeft_ != null ? other.bottomLeft_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderRadius Clone() {
      return new BorderRadius(this);
    }

    /// <summary>Field number for the "top_left" field.</summary>
    public const int TopLeftFieldNumber = 1;
    private global::Spelldawn.Protos.Dimension topLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension TopLeft {
      get { return topLeft_; }
      set {
        topLeft_ = value;
      }
    }

    /// <summary>Field number for the "top_right" field.</summary>
    public const int TopRightFieldNumber = 2;
    private global::Spelldawn.Protos.Dimension topRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension TopRight {
      get { return topRight_; }
      set {
        topRight_ = value;
      }
    }

    /// <summary>Field number for the "bottom_right" field.</summary>
    public const int BottomRightFieldNumber = 3;
    private global::Spelldawn.Protos.Dimension bottomRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension BottomRight {
      get { return bottomRight_; }
      set {
        bottomRight_ = value;
      }
    }

    /// <summary>Field number for the "bottom_left" field.</summary>
    public const int BottomLeftFieldNumber = 4;
    private global::Spelldawn.Protos.Dimension bottomLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension BottomLeft {
      get { return bottomLeft_; }
      set {
        bottomLeft_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BorderRadius);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BorderRadius other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TopLeft, other.TopLeft)) return false;
      if (!object.Equals(TopRight, other.TopRight)) return false;
      if (!object.Equals(BottomRight, other.BottomRight)) return false;
      if (!object.Equals(BottomLeft, other.BottomLeft)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (topLeft_ != null) hash ^= TopLeft.GetHashCode();
      if (topRight_ != null) hash ^= TopRight.GetHashCode();
      if (bottomRight_ != null) hash ^= BottomRight.GetHashCode();
      if (bottomLeft_ != null) hash ^= BottomLeft.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (topLeft_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TopLeft);
      }
      if (topRight_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TopRight);
      }
      if (bottomRight_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BottomRight);
      }
      if (bottomLeft_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BottomLeft);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (topLeft_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TopLeft);
      }
      if (topRight_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TopRight);
      }
      if (bottomRight_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BottomRight);
      }
      if (bottomLeft_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BottomLeft);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (topLeft_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TopLeft);
      }
      if (topRight_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TopRight);
      }
      if (bottomRight_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BottomRight);
      }
      if (bottomLeft_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BottomLeft);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BorderRadius other) {
      if (other == null) {
        return;
      }
      if (other.topLeft_ != null) {
        if (topLeft_ == null) {
          TopLeft = new global::Spelldawn.Protos.Dimension();
        }
        TopLeft.MergeFrom(other.TopLeft);
      }
      if (other.topRight_ != null) {
        if (topRight_ == null) {
          TopRight = new global::Spelldawn.Protos.Dimension();
        }
        TopRight.MergeFrom(other.TopRight);
      }
      if (other.bottomRight_ != null) {
        if (bottomRight_ == null) {
          BottomRight = new global::Spelldawn.Protos.Dimension();
        }
        BottomRight.MergeFrom(other.BottomRight);
      }
      if (other.bottomLeft_ != null) {
        if (bottomLeft_ == null) {
          BottomLeft = new global::Spelldawn.Protos.Dimension();
        }
        BottomLeft.MergeFrom(other.BottomLeft);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (topLeft_ == null) {
              TopLeft = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(TopLeft);
            break;
          }
          case 18: {
            if (topRight_ == null) {
              TopRight = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(TopRight);
            break;
          }
          case 26: {
            if (bottomRight_ == null) {
              BottomRight = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(BottomRight);
            break;
          }
          case 34: {
            if (bottomLeft_ == null) {
              BottomLeft = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(BottomLeft);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (topLeft_ == null) {
              TopLeft = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(TopLeft);
            break;
          }
          case 18: {
            if (topRight_ == null) {
              TopRight = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(TopRight);
            break;
          }
          case 26: {
            if (bottomRight_ == null) {
              BottomRight = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(BottomRight);
            break;
          }
          case 34: {
            if (bottomLeft_ == null) {
              BottomLeft = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(BottomLeft);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FlexRotate : pb::IMessage<FlexRotate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FlexRotate> _parser = new pb::MessageParser<FlexRotate>(() => new FlexRotate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlexRotate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexRotate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexRotate(FlexRotate other) : this() {
      degrees_ = other.degrees_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexRotate Clone() {
      return new FlexRotate(this);
    }

    /// <summary>Field number for the "degrees" field.</summary>
    public const int DegreesFieldNumber = 1;
    private float degrees_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Degrees {
      get { return degrees_; }
      set {
        degrees_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlexRotate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlexRotate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Degrees, other.Degrees)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Degrees != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Degrees);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Degrees != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Degrees);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Degrees != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Degrees);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Degrees != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlexRotate other) {
      if (other == null) {
        return;
      }
      if (other.Degrees != 0F) {
        Degrees = other.Degrees;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Degrees = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Degrees = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FlexTranslate : pb::IMessage<FlexTranslate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FlexTranslate> _parser = new pb::MessageParser<FlexTranslate>(() => new FlexTranslate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlexTranslate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexTranslate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexTranslate(FlexTranslate other) : this() {
      x_ = other.x_ != null ? other.x_.Clone() : null;
      y_ = other.y_ != null ? other.y_.Clone() : null;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexTranslate Clone() {
      return new FlexTranslate(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private global::Spelldawn.Protos.Dimension x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private global::Spelldawn.Protos.Dimension y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlexTranslate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlexTranslate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(X, other.X)) return false;
      if (!object.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (x_ != null) hash ^= X.GetHashCode();
      if (y_ != null) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (x_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(X);
      }
      if (y_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (x_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(X);
      }
      if (y_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (x_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(X);
      }
      if (y_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Y);
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlexTranslate other) {
      if (other == null) {
        return;
      }
      if (other.x_ != null) {
        if (x_ == null) {
          X = new global::Spelldawn.Protos.Dimension();
        }
        X.MergeFrom(other.X);
      }
      if (other.y_ != null) {
        if (y_ == null) {
          Y = new global::Spelldawn.Protos.Dimension();
        }
        Y.MergeFrom(other.Y);
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (x_ == null) {
              X = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(X);
            break;
          }
          case 18: {
            if (y_ == null) {
              Y = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Y);
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (x_ == null) {
              X = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(X);
            break;
          }
          case 18: {
            if (y_ == null) {
              Y = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Y);
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FlexScale : pb::IMessage<FlexScale>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FlexScale> _parser = new pb::MessageParser<FlexScale>(() => new FlexScale());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlexScale> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexScale() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexScale(FlexScale other) : this() {
      amount_ = other.amount_ != null ? other.amount_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexScale Clone() {
      return new FlexScale(this);
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 1;
    private global::Spelldawn.Protos.FlexVector3 amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexVector3 Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlexScale);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlexScale other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Amount, other.Amount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (amount_ != null) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (amount_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (amount_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (amount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlexScale other) {
      if (other == null) {
        return;
      }
      if (other.amount_ != null) {
        if (amount_ == null) {
          Amount = new global::Spelldawn.Protos.FlexVector3();
        }
        Amount.MergeFrom(other.Amount);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (amount_ == null) {
              Amount = new global::Spelldawn.Protos.FlexVector3();
            }
            input.ReadMessage(Amount);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (amount_ == null) {
              Amount = new global::Spelldawn.Protos.FlexVector3();
            }
            input.ReadMessage(Amount);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TextShadow : pb::IMessage<TextShadow>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TextShadow> _parser = new pb::MessageParser<TextShadow>(() => new TextShadow());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextShadow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextShadow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextShadow(TextShadow other) : this() {
      offset_ = other.offset_ != null ? other.offset_.Clone() : null;
      blurRadius_ = other.blurRadius_;
      color_ = other.color_ != null ? other.color_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextShadow Clone() {
      return new TextShadow(this);
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 1;
    private global::Spelldawn.Protos.FlexVector2 offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexVector2 Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "blur_radius" field.</summary>
    public const int BlurRadiusFieldNumber = 2;
    private float blurRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BlurRadius {
      get { return blurRadius_; }
      set {
        blurRadius_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 3;
    private global::Spelldawn.Protos.FlexColor color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexColor Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextShadow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextShadow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Offset, other.Offset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BlurRadius, other.BlurRadius)) return false;
      if (!object.Equals(Color, other.Color)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (offset_ != null) hash ^= Offset.GetHashCode();
      if (BlurRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BlurRadius);
      if (color_ != null) hash ^= Color.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (offset_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Offset);
      }
      if (BlurRadius != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(BlurRadius);
      }
      if (color_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Color);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (offset_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Offset);
      }
      if (BlurRadius != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(BlurRadius);
      }
      if (color_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Color);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (offset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offset);
      }
      if (BlurRadius != 0F) {
        size += 1 + 4;
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextShadow other) {
      if (other == null) {
        return;
      }
      if (other.offset_ != null) {
        if (offset_ == null) {
          Offset = new global::Spelldawn.Protos.FlexVector2();
        }
        Offset.MergeFrom(other.Offset);
      }
      if (other.BlurRadius != 0F) {
        BlurRadius = other.BlurRadius;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          Color = new global::Spelldawn.Protos.FlexColor();
        }
        Color.MergeFrom(other.Color);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (offset_ == null) {
              Offset = new global::Spelldawn.Protos.FlexVector2();
            }
            input.ReadMessage(Offset);
            break;
          }
          case 21: {
            BlurRadius = input.ReadFloat();
            break;
          }
          case 26: {
            if (color_ == null) {
              Color = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(Color);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (offset_ == null) {
              Offset = new global::Spelldawn.Protos.FlexVector2();
            }
            input.ReadMessage(Offset);
            break;
          }
          case 21: {
            BlurRadius = input.ReadFloat();
            break;
          }
          case 26: {
            if (color_ == null) {
              Color = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(Color);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TimeValue : pb::IMessage<TimeValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimeValue> _parser = new pb::MessageParser<TimeValue>(() => new TimeValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeValue(TimeValue other) : this() {
      milliseconds_ = other.milliseconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeValue Clone() {
      return new TimeValue(this);
    }

    /// <summary>Field number for the "milliseconds" field.</summary>
    public const int MillisecondsFieldNumber = 1;
    private int milliseconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Milliseconds {
      get { return milliseconds_; }
      set {
        milliseconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Milliseconds != other.Milliseconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Milliseconds != 0) hash ^= Milliseconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Milliseconds != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Milliseconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Milliseconds != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Milliseconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Milliseconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Milliseconds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeValue other) {
      if (other == null) {
        return;
      }
      if (other.Milliseconds != 0) {
        Milliseconds = other.Milliseconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Milliseconds = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Milliseconds = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ImageSlice : pb::IMessage<ImageSlice>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ImageSlice> _parser = new pb::MessageParser<ImageSlice>(() => new ImageSlice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageSlice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageSlice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageSlice(ImageSlice other) : this() {
      top_ = other.top_;
      right_ = other.right_;
      bottom_ = other.bottom_;
      left_ = other.left_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageSlice Clone() {
      return new ImageSlice(this);
    }

    /// <summary>Field number for the "top" field.</summary>
    public const int TopFieldNumber = 1;
    private int top_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Top {
      get { return top_; }
      set {
        top_ = value;
      }
    }

    /// <summary>Field number for the "right" field.</summary>
    public const int RightFieldNumber = 2;
    private int right_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Right {
      get { return right_; }
      set {
        right_ = value;
      }
    }

    /// <summary>Field number for the "bottom" field.</summary>
    public const int BottomFieldNumber = 3;
    private int bottom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bottom {
      get { return bottom_; }
      set {
        bottom_ = value;
      }
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 4;
    private int left_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageSlice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageSlice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Top != other.Top) return false;
      if (Right != other.Right) return false;
      if (Bottom != other.Bottom) return false;
      if (Left != other.Left) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Top != 0) hash ^= Top.GetHashCode();
      if (Right != 0) hash ^= Right.GetHashCode();
      if (Bottom != 0) hash ^= Bottom.GetHashCode();
      if (Left != 0) hash ^= Left.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Top != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Top);
      }
      if (Right != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Right);
      }
      if (Bottom != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Bottom);
      }
      if (Left != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Left);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Top != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Top);
      }
      if (Right != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Right);
      }
      if (Bottom != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Bottom);
      }
      if (Left != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Left);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Top != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Top);
      }
      if (Right != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Right);
      }
      if (Bottom != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bottom);
      }
      if (Left != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Left);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageSlice other) {
      if (other == null) {
        return;
      }
      if (other.Top != 0) {
        Top = other.Top;
      }
      if (other.Right != 0) {
        Right = other.Right;
      }
      if (other.Bottom != 0) {
        Bottom = other.Bottom;
      }
      if (other.Left != 0) {
        Left = other.Left;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Top = input.ReadInt32();
            break;
          }
          case 16: {
            Right = input.ReadInt32();
            break;
          }
          case 24: {
            Bottom = input.ReadInt32();
            break;
          }
          case 32: {
            Left = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Top = input.ReadInt32();
            break;
          }
          case 16: {
            Right = input.ReadInt32();
            break;
          }
          case 24: {
            Bottom = input.ReadInt32();
            break;
          }
          case 32: {
            Left = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FlexStyle : pb::IMessage<FlexStyle>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FlexStyle> _parser = new pb::MessageParser<FlexStyle>(() => new FlexStyle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlexStyle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexStyle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexStyle(FlexStyle other) : this() {
      alignContent_ = other.alignContent_;
      alignItems_ = other.alignItems_;
      alignSelf_ = other.alignSelf_;
      backgroundColor_ = other.backgroundColor_ != null ? other.backgroundColor_.Clone() : null;
      backgroundImage_ = other.backgroundImage_ != null ? other.backgroundImage_.Clone() : null;
      borderColor_ = other.borderColor_ != null ? other.borderColor_.Clone() : null;
      borderRadius_ = other.borderRadius_ != null ? other.borderRadius_.Clone() : null;
      borderWidth_ = other.borderWidth_ != null ? other.borderWidth_.Clone() : null;
      inset_ = other.inset_ != null ? other.inset_.Clone() : null;
      color_ = other.color_ != null ? other.color_.Clone() : null;
      display_ = other.display_;
      flexBasis_ = other.flexBasis_ != null ? other.flexBasis_.Clone() : null;
      flexDirection_ = other.flexDirection_;
      FlexGrow = other.FlexGrow;
      FlexShrink = other.FlexShrink;
      wrap_ = other.wrap_;
      fontSize_ = other.fontSize_ != null ? other.fontSize_.Clone() : null;
      height_ = other.height_ != null ? other.height_.Clone() : null;
      justifyContent_ = other.justifyContent_;
      letterSpacing_ = other.letterSpacing_ != null ? other.letterSpacing_.Clone() : null;
      margin_ = other.margin_ != null ? other.margin_.Clone() : null;
      maxHeight_ = other.maxHeight_ != null ? other.maxHeight_.Clone() : null;
      maxWidth_ = other.maxWidth_ != null ? other.maxWidth_.Clone() : null;
      minHeight_ = other.minHeight_ != null ? other.minHeight_.Clone() : null;
      minWidth_ = other.minWidth_ != null ? other.minWidth_.Clone() : null;
      Opacity = other.Opacity;
      overflow_ = other.overflow_;
      padding_ = other.padding_ != null ? other.padding_.Clone() : null;
      position_ = other.position_;
      rotate_ = other.rotate_ != null ? other.rotate_.Clone() : null;
      scale_ = other.scale_ != null ? other.scale_.Clone() : null;
      textOverflow_ = other.textOverflow_;
      textShadow_ = other.textShadow_ != null ? other.textShadow_.Clone() : null;
      transformOrigin_ = other.transformOrigin_ != null ? other.transformOrigin_.Clone() : null;
      transitionDelays_ = other.transitionDelays_.Clone();
      transitionDurations_ = other.transitionDurations_.Clone();
      transitionProperties_ = other.transitionProperties_.Clone();
      transitionEasingModes_ = other.transitionEasingModes_.Clone();
      translate_ = other.translate_ != null ? other.translate_.Clone() : null;
      backgroundImageTintColor_ = other.backgroundImageTintColor_ != null ? other.backgroundImageTintColor_.Clone() : null;
      backgroundImageScaleMode_ = other.backgroundImageScaleMode_;
      font_ = other.font_ != null ? other.font_.Clone() : null;
      fontStyle_ = other.fontStyle_;
      overflowClipBox_ = other.overflowClipBox_;
      paragraphSpacing_ = other.paragraphSpacing_ != null ? other.paragraphSpacing_.Clone() : null;
      imageSlice_ = other.imageSlice_ != null ? other.imageSlice_.Clone() : null;
      textAlign_ = other.textAlign_;
      textOutlineColor_ = other.textOutlineColor_ != null ? other.textOutlineColor_.Clone() : null;
      TextOutlineWidth = other.TextOutlineWidth;
      textOverflowPosition_ = other.textOverflowPosition_;
      visibility_ = other.visibility_;
      whiteSpace_ = other.whiteSpace_;
      width_ = other.width_ != null ? other.width_.Clone() : null;
      wordSpacing_ = other.wordSpacing_ != null ? other.wordSpacing_.Clone() : null;
      BackgroundImageScaleMultiplier = other.BackgroundImageScaleMultiplier;
      fixedBackgroundImageAspectRatio_ = other.fixedBackgroundImageAspectRatio_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlexStyle Clone() {
      return new FlexStyle(this);
    }

    /// <summary>Field number for the "align_content" field.</summary>
    public const int AlignContentFieldNumber = 1;
    private global::Spelldawn.Protos.FlexAlign alignContent_ = global::Spelldawn.Protos.FlexAlign.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexAlign AlignContent {
      get { return alignContent_; }
      set {
        alignContent_ = value;
      }
    }

    /// <summary>Field number for the "align_items" field.</summary>
    public const int AlignItemsFieldNumber = 2;
    private global::Spelldawn.Protos.FlexAlign alignItems_ = global::Spelldawn.Protos.FlexAlign.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexAlign AlignItems {
      get { return alignItems_; }
      set {
        alignItems_ = value;
      }
    }

    /// <summary>Field number for the "align_self" field.</summary>
    public const int AlignSelfFieldNumber = 3;
    private global::Spelldawn.Protos.FlexAlign alignSelf_ = global::Spelldawn.Protos.FlexAlign.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexAlign AlignSelf {
      get { return alignSelf_; }
      set {
        alignSelf_ = value;
      }
    }

    /// <summary>Field number for the "background_color" field.</summary>
    public const int BackgroundColorFieldNumber = 4;
    private global::Spelldawn.Protos.FlexColor backgroundColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexColor BackgroundColor {
      get { return backgroundColor_; }
      set {
        backgroundColor_ = value;
      }
    }

    /// <summary>Field number for the "background_image" field.</summary>
    public const int BackgroundImageFieldNumber = 5;
    private global::Spelldawn.Protos.SpriteAddress backgroundImage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.SpriteAddress BackgroundImage {
      get { return backgroundImage_; }
      set {
        backgroundImage_ = value;
      }
    }

    /// <summary>Field number for the "border_color" field.</summary>
    public const int BorderColorFieldNumber = 6;
    private global::Spelldawn.Protos.BorderColor borderColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.BorderColor BorderColor {
      get { return borderColor_; }
      set {
        borderColor_ = value;
      }
    }

    /// <summary>Field number for the "border_radius" field.</summary>
    public const int BorderRadiusFieldNumber = 7;
    private global::Spelldawn.Protos.BorderRadius borderRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.BorderRadius BorderRadius {
      get { return borderRadius_; }
      set {
        borderRadius_ = value;
      }
    }

    /// <summary>Field number for the "border_width" field.</summary>
    public const int BorderWidthFieldNumber = 8;
    private global::Spelldawn.Protos.BorderWidth borderWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.BorderWidth BorderWidth {
      get { return borderWidth_; }
      set {
        borderWidth_ = value;
      }
    }

    /// <summary>Field number for the "inset" field.</summary>
    public const int InsetFieldNumber = 9;
    private global::Spelldawn.Protos.DimensionGroup inset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.DimensionGroup Inset {
      get { return inset_; }
      set {
        inset_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 10;
    private global::Spelldawn.Protos.FlexColor color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexColor Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 11;
    private global::Spelldawn.Protos.FlexDisplayStyle display_ = global::Spelldawn.Protos.FlexDisplayStyle.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexDisplayStyle Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "flex_basis" field.</summary>
    public const int FlexBasisFieldNumber = 12;
    private global::Spelldawn.Protos.Dimension flexBasis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension FlexBasis {
      get { return flexBasis_; }
      set {
        flexBasis_ = value;
      }
    }

    /// <summary>Field number for the "flex_direction" field.</summary>
    public const int FlexDirectionFieldNumber = 13;
    private global::Spelldawn.Protos.FlexDirection flexDirection_ = global::Spelldawn.Protos.FlexDirection.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexDirection FlexDirection {
      get { return flexDirection_; }
      set {
        flexDirection_ = value;
      }
    }

    /// <summary>Field number for the "flex_grow" field.</summary>
    public const int FlexGrowFieldNumber = 14;
    private static readonly pb::FieldCodec<float?> _single_flexGrow_codec = pb::FieldCodec.ForStructWrapper<float>(114);
    private float? flexGrow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? FlexGrow {
      get { return flexGrow_; }
      set {
        flexGrow_ = value;
      }
    }


    /// <summary>Field number for the "flex_shrink" field.</summary>
    public const int FlexShrinkFieldNumber = 15;
    private static readonly pb::FieldCodec<float?> _single_flexShrink_codec = pb::FieldCodec.ForStructWrapper<float>(122);
    private float? flexShrink_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? FlexShrink {
      get { return flexShrink_; }
      set {
        flexShrink_ = value;
      }
    }


    /// <summary>Field number for the "wrap" field.</summary>
    public const int WrapFieldNumber = 16;
    private global::Spelldawn.Protos.FlexWrap wrap_ = global::Spelldawn.Protos.FlexWrap.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexWrap Wrap {
      get { return wrap_; }
      set {
        wrap_ = value;
      }
    }

    /// <summary>Field number for the "font_size" field.</summary>
    public const int FontSizeFieldNumber = 17;
    private global::Spelldawn.Protos.Dimension fontSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension FontSize {
      get { return fontSize_; }
      set {
        fontSize_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 18;
    private global::Spelldawn.Protos.Dimension height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "justify_content" field.</summary>
    public const int JustifyContentFieldNumber = 19;
    private global::Spelldawn.Protos.FlexJustify justifyContent_ = global::Spelldawn.Protos.FlexJustify.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexJustify JustifyContent {
      get { return justifyContent_; }
      set {
        justifyContent_ = value;
      }
    }

    /// <summary>Field number for the "letter_spacing" field.</summary>
    public const int LetterSpacingFieldNumber = 20;
    private global::Spelldawn.Protos.Dimension letterSpacing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension LetterSpacing {
      get { return letterSpacing_; }
      set {
        letterSpacing_ = value;
      }
    }

    /// <summary>Field number for the "margin" field.</summary>
    public const int MarginFieldNumber = 21;
    private global::Spelldawn.Protos.DimensionGroup margin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.DimensionGroup Margin {
      get { return margin_; }
      set {
        margin_ = value;
      }
    }

    /// <summary>Field number for the "max_height" field.</summary>
    public const int MaxHeightFieldNumber = 22;
    private global::Spelldawn.Protos.Dimension maxHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension MaxHeight {
      get { return maxHeight_; }
      set {
        maxHeight_ = value;
      }
    }

    /// <summary>Field number for the "max_width" field.</summary>
    public const int MaxWidthFieldNumber = 23;
    private global::Spelldawn.Protos.Dimension maxWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension MaxWidth {
      get { return maxWidth_; }
      set {
        maxWidth_ = value;
      }
    }

    /// <summary>Field number for the "min_height" field.</summary>
    public const int MinHeightFieldNumber = 24;
    private global::Spelldawn.Protos.Dimension minHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension MinHeight {
      get { return minHeight_; }
      set {
        minHeight_ = value;
      }
    }

    /// <summary>Field number for the "min_width" field.</summary>
    public const int MinWidthFieldNumber = 25;
    private global::Spelldawn.Protos.Dimension minWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension MinWidth {
      get { return minWidth_; }
      set {
        minWidth_ = value;
      }
    }

    /// <summary>Field number for the "opacity" field.</summary>
    public const int OpacityFieldNumber = 26;
    private static readonly pb::FieldCodec<float?> _single_opacity_codec = pb::FieldCodec.ForStructWrapper<float>(210);
    private float? opacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? Opacity {
      get { return opacity_; }
      set {
        opacity_ = value;
      }
    }


    /// <summary>Field number for the "overflow" field.</summary>
    public const int OverflowFieldNumber = 27;
    private global::Spelldawn.Protos.FlexOverflow overflow_ = global::Spelldawn.Protos.FlexOverflow.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexOverflow Overflow {
      get { return overflow_; }
      set {
        overflow_ = value;
      }
    }

    /// <summary>Field number for the "padding" field.</summary>
    public const int PaddingFieldNumber = 28;
    private global::Spelldawn.Protos.DimensionGroup padding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.DimensionGroup Padding {
      get { return padding_; }
      set {
        padding_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 29;
    private global::Spelldawn.Protos.FlexPosition position_ = global::Spelldawn.Protos.FlexPosition.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexPosition Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "rotate" field.</summary>
    public const int RotateFieldNumber = 30;
    private global::Spelldawn.Protos.FlexRotate rotate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexRotate Rotate {
      get { return rotate_; }
      set {
        rotate_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 31;
    private global::Spelldawn.Protos.FlexScale scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexScale Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "text_overflow" field.</summary>
    public const int TextOverflowFieldNumber = 32;
    private global::Spelldawn.Protos.TextOverflow textOverflow_ = global::Spelldawn.Protos.TextOverflow.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.TextOverflow TextOverflow {
      get { return textOverflow_; }
      set {
        textOverflow_ = value;
      }
    }

    /// <summary>Field number for the "text_shadow" field.</summary>
    public const int TextShadowFieldNumber = 33;
    private global::Spelldawn.Protos.TextShadow textShadow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.TextShadow TextShadow {
      get { return textShadow_; }
      set {
        textShadow_ = value;
      }
    }

    /// <summary>Field number for the "transform_origin" field.</summary>
    public const int TransformOriginFieldNumber = 34;
    private global::Spelldawn.Protos.FlexTranslate transformOrigin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexTranslate TransformOrigin {
      get { return transformOrigin_; }
      set {
        transformOrigin_ = value;
      }
    }

    /// <summary>Field number for the "transition_delays" field.</summary>
    public const int TransitionDelaysFieldNumber = 35;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.TimeValue> _repeated_transitionDelays_codec
        = pb::FieldCodec.ForMessage(282, global::Spelldawn.Protos.TimeValue.Parser);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.TimeValue> transitionDelays_ = new pbc::RepeatedField<global::Spelldawn.Protos.TimeValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.TimeValue> TransitionDelays {
      get { return transitionDelays_; }
    }

    /// <summary>Field number for the "transition_durations" field.</summary>
    public const int TransitionDurationsFieldNumber = 36;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.TimeValue> _repeated_transitionDurations_codec
        = pb::FieldCodec.ForMessage(290, global::Spelldawn.Protos.TimeValue.Parser);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.TimeValue> transitionDurations_ = new pbc::RepeatedField<global::Spelldawn.Protos.TimeValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.TimeValue> TransitionDurations {
      get { return transitionDurations_; }
    }

    /// <summary>Field number for the "transition_properties" field.</summary>
    public const int TransitionPropertiesFieldNumber = 37;
    private static readonly pb::FieldCodec<string> _repeated_transitionProperties_codec
        = pb::FieldCodec.ForString(298);
    private readonly pbc::RepeatedField<string> transitionProperties_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TransitionProperties {
      get { return transitionProperties_; }
    }

    /// <summary>Field number for the "transition_easing_modes" field.</summary>
    public const int TransitionEasingModesFieldNumber = 38;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.EasingMode> _repeated_transitionEasingModes_codec
        = pb::FieldCodec.ForEnum(306, x => (int) x, x => (global::Spelldawn.Protos.EasingMode) x);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.EasingMode> transitionEasingModes_ = new pbc::RepeatedField<global::Spelldawn.Protos.EasingMode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.EasingMode> TransitionEasingModes {
      get { return transitionEasingModes_; }
    }

    /// <summary>Field number for the "translate" field.</summary>
    public const int TranslateFieldNumber = 39;
    private global::Spelldawn.Protos.FlexTranslate translate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexTranslate Translate {
      get { return translate_; }
      set {
        translate_ = value;
      }
    }

    /// <summary>Field number for the "background_image_tint_color" field.</summary>
    public const int BackgroundImageTintColorFieldNumber = 40;
    private global::Spelldawn.Protos.FlexColor backgroundImageTintColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexColor BackgroundImageTintColor {
      get { return backgroundImageTintColor_; }
      set {
        backgroundImageTintColor_ = value;
      }
    }

    /// <summary>Field number for the "background_image_scale_mode" field.</summary>
    public const int BackgroundImageScaleModeFieldNumber = 41;
    private global::Spelldawn.Protos.ImageScaleMode backgroundImageScaleMode_ = global::Spelldawn.Protos.ImageScaleMode.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ImageScaleMode BackgroundImageScaleMode {
      get { return backgroundImageScaleMode_; }
      set {
        backgroundImageScaleMode_ = value;
      }
    }

    /// <summary>Field number for the "font" field.</summary>
    public const int FontFieldNumber = 42;
    private global::Spelldawn.Protos.FontAddress font_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FontAddress Font {
      get { return font_; }
      set {
        font_ = value;
      }
    }

    /// <summary>Field number for the "font_style" field.</summary>
    public const int FontStyleFieldNumber = 43;
    private global::Spelldawn.Protos.FontStyle fontStyle_ = global::Spelldawn.Protos.FontStyle.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FontStyle FontStyle {
      get { return fontStyle_; }
      set {
        fontStyle_ = value;
      }
    }

    /// <summary>Field number for the "overflow_clip_box" field.</summary>
    public const int OverflowClipBoxFieldNumber = 44;
    private global::Spelldawn.Protos.OverflowClipBox overflowClipBox_ = global::Spelldawn.Protos.OverflowClipBox.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.OverflowClipBox OverflowClipBox {
      get { return overflowClipBox_; }
      set {
        overflowClipBox_ = value;
      }
    }

    /// <summary>Field number for the "paragraph_spacing" field.</summary>
    public const int ParagraphSpacingFieldNumber = 45;
    private global::Spelldawn.Protos.Dimension paragraphSpacing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension ParagraphSpacing {
      get { return paragraphSpacing_; }
      set {
        paragraphSpacing_ = value;
      }
    }

    /// <summary>Field number for the "image_slice" field.</summary>
    public const int ImageSliceFieldNumber = 46;
    private global::Spelldawn.Protos.ImageSlice imageSlice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ImageSlice ImageSlice {
      get { return imageSlice_; }
      set {
        imageSlice_ = value;
      }
    }

    /// <summary>Field number for the "text_align" field.</summary>
    public const int TextAlignFieldNumber = 47;
    private global::Spelldawn.Protos.TextAlign textAlign_ = global::Spelldawn.Protos.TextAlign.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.TextAlign TextAlign {
      get { return textAlign_; }
      set {
        textAlign_ = value;
      }
    }

    /// <summary>Field number for the "text_outline_color" field.</summary>
    public const int TextOutlineColorFieldNumber = 48;
    private global::Spelldawn.Protos.FlexColor textOutlineColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexColor TextOutlineColor {
      get { return textOutlineColor_; }
      set {
        textOutlineColor_ = value;
      }
    }

    /// <summary>Field number for the "text_outline_width" field.</summary>
    public const int TextOutlineWidthFieldNumber = 49;
    private static readonly pb::FieldCodec<float?> _single_textOutlineWidth_codec = pb::FieldCodec.ForStructWrapper<float>(394);
    private float? textOutlineWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? TextOutlineWidth {
      get { return textOutlineWidth_; }
      set {
        textOutlineWidth_ = value;
      }
    }


    /// <summary>Field number for the "text_overflow_position" field.</summary>
    public const int TextOverflowPositionFieldNumber = 50;
    private global::Spelldawn.Protos.TextOverflowPosition textOverflowPosition_ = global::Spelldawn.Protos.TextOverflowPosition.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.TextOverflowPosition TextOverflowPosition {
      get { return textOverflowPosition_; }
      set {
        textOverflowPosition_ = value;
      }
    }

    /// <summary>Field number for the "visibility" field.</summary>
    public const int VisibilityFieldNumber = 51;
    private global::Spelldawn.Protos.FlexVisibility visibility_ = global::Spelldawn.Protos.FlexVisibility.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexVisibility Visibility {
      get { return visibility_; }
      set {
        visibility_ = value;
      }
    }

    /// <summary>Field number for the "white_space" field.</summary>
    public const int WhiteSpaceFieldNumber = 52;
    private global::Spelldawn.Protos.WhiteSpace whiteSpace_ = global::Spelldawn.Protos.WhiteSpace.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.WhiteSpace WhiteSpace {
      get { return whiteSpace_; }
      set {
        whiteSpace_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 53;
    private global::Spelldawn.Protos.Dimension width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "word_spacing" field.</summary>
    public const int WordSpacingFieldNumber = 54;
    private global::Spelldawn.Protos.Dimension wordSpacing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Dimension WordSpacing {
      get { return wordSpacing_; }
      set {
        wordSpacing_ = value;
      }
    }

    /// <summary>Field number for the "background_image_scale_multiplier" field.</summary>
    public const int BackgroundImageScaleMultiplierFieldNumber = 55;
    private static readonly pb::FieldCodec<float?> _single_backgroundImageScaleMultiplier_codec = pb::FieldCodec.ForStructWrapper<float>(442);
    private float? backgroundImageScaleMultiplier_;
    /// <summary>
    ///*
    /// Overwrites both 'width' and 'height' by multiplying the dimensions of
    /// the provided 'background_image' (in units of raw pixels) by this
    /// constant.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? BackgroundImageScaleMultiplier {
      get { return backgroundImageScaleMultiplier_; }
      set {
        backgroundImageScaleMultiplier_ = value;
      }
    }


    /// <summary>Field number for the "fixed_background_image_aspect_ratio" field.</summary>
    public const int FixedBackgroundImageAspectRatioFieldNumber = 56;
    private bool fixedBackgroundImageAspectRatio_;
    /// <summary>
    ///*
    /// Calculates the aspect ratio of the provided 'background_image' and uses
    /// it to set dimensions. If 'width' is set, the 'height' will be set based
    /// on the aspect ratio and vice versa. Does not support percentage values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FixedBackgroundImageAspectRatio {
      get { return fixedBackgroundImageAspectRatio_; }
      set {
        fixedBackgroundImageAspectRatio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlexStyle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlexStyle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AlignContent != other.AlignContent) return false;
      if (AlignItems != other.AlignItems) return false;
      if (AlignSelf != other.AlignSelf) return false;
      if (!object.Equals(BackgroundColor, other.BackgroundColor)) return false;
      if (!object.Equals(BackgroundImage, other.BackgroundImage)) return false;
      if (!object.Equals(BorderColor, other.BorderColor)) return false;
      if (!object.Equals(BorderRadius, other.BorderRadius)) return false;
      if (!object.Equals(BorderWidth, other.BorderWidth)) return false;
      if (!object.Equals(Inset, other.Inset)) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (Display != other.Display) return false;
      if (!object.Equals(FlexBasis, other.FlexBasis)) return false;
      if (FlexDirection != other.FlexDirection) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(FlexGrow, other.FlexGrow)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(FlexShrink, other.FlexShrink)) return false;
      if (Wrap != other.Wrap) return false;
      if (!object.Equals(FontSize, other.FontSize)) return false;
      if (!object.Equals(Height, other.Height)) return false;
      if (JustifyContent != other.JustifyContent) return false;
      if (!object.Equals(LetterSpacing, other.LetterSpacing)) return false;
      if (!object.Equals(Margin, other.Margin)) return false;
      if (!object.Equals(MaxHeight, other.MaxHeight)) return false;
      if (!object.Equals(MaxWidth, other.MaxWidth)) return false;
      if (!object.Equals(MinHeight, other.MinHeight)) return false;
      if (!object.Equals(MinWidth, other.MinWidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Opacity, other.Opacity)) return false;
      if (Overflow != other.Overflow) return false;
      if (!object.Equals(Padding, other.Padding)) return false;
      if (Position != other.Position) return false;
      if (!object.Equals(Rotate, other.Rotate)) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      if (TextOverflow != other.TextOverflow) return false;
      if (!object.Equals(TextShadow, other.TextShadow)) return false;
      if (!object.Equals(TransformOrigin, other.TransformOrigin)) return false;
      if(!transitionDelays_.Equals(other.transitionDelays_)) return false;
      if(!transitionDurations_.Equals(other.transitionDurations_)) return false;
      if(!transitionProperties_.Equals(other.transitionProperties_)) return false;
      if(!transitionEasingModes_.Equals(other.transitionEasingModes_)) return false;
      if (!object.Equals(Translate, other.Translate)) return false;
      if (!object.Equals(BackgroundImageTintColor, other.BackgroundImageTintColor)) return false;
      if (BackgroundImageScaleMode != other.BackgroundImageScaleMode) return false;
      if (!object.Equals(Font, other.Font)) return false;
      if (FontStyle != other.FontStyle) return false;
      if (OverflowClipBox != other.OverflowClipBox) return false;
      if (!object.Equals(ParagraphSpacing, other.ParagraphSpacing)) return false;
      if (!object.Equals(ImageSlice, other.ImageSlice)) return false;
      if (TextAlign != other.TextAlign) return false;
      if (!object.Equals(TextOutlineColor, other.TextOutlineColor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(TextOutlineWidth, other.TextOutlineWidth)) return false;
      if (TextOverflowPosition != other.TextOverflowPosition) return false;
      if (Visibility != other.Visibility) return false;
      if (WhiteSpace != other.WhiteSpace) return false;
      if (!object.Equals(Width, other.Width)) return false;
      if (!object.Equals(WordSpacing, other.WordSpacing)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(BackgroundImageScaleMultiplier, other.BackgroundImageScaleMultiplier)) return false;
      if (FixedBackgroundImageAspectRatio != other.FixedBackgroundImageAspectRatio) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AlignContent != global::Spelldawn.Protos.FlexAlign.Unspecified) hash ^= AlignContent.GetHashCode();
      if (AlignItems != global::Spelldawn.Protos.FlexAlign.Unspecified) hash ^= AlignItems.GetHashCode();
      if (AlignSelf != global::Spelldawn.Protos.FlexAlign.Unspecified) hash ^= AlignSelf.GetHashCode();
      if (backgroundColor_ != null) hash ^= BackgroundColor.GetHashCode();
      if (backgroundImage_ != null) hash ^= BackgroundImage.GetHashCode();
      if (borderColor_ != null) hash ^= BorderColor.GetHashCode();
      if (borderRadius_ != null) hash ^= BorderRadius.GetHashCode();
      if (borderWidth_ != null) hash ^= BorderWidth.GetHashCode();
      if (inset_ != null) hash ^= Inset.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (Display != global::Spelldawn.Protos.FlexDisplayStyle.Unspecified) hash ^= Display.GetHashCode();
      if (flexBasis_ != null) hash ^= FlexBasis.GetHashCode();
      if (FlexDirection != global::Spelldawn.Protos.FlexDirection.Unspecified) hash ^= FlexDirection.GetHashCode();
      if (flexGrow_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(FlexGrow);
      if (flexShrink_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(FlexShrink);
      if (Wrap != global::Spelldawn.Protos.FlexWrap.Unspecified) hash ^= Wrap.GetHashCode();
      if (fontSize_ != null) hash ^= FontSize.GetHashCode();
      if (height_ != null) hash ^= Height.GetHashCode();
      if (JustifyContent != global::Spelldawn.Protos.FlexJustify.Unspecified) hash ^= JustifyContent.GetHashCode();
      if (letterSpacing_ != null) hash ^= LetterSpacing.GetHashCode();
      if (margin_ != null) hash ^= Margin.GetHashCode();
      if (maxHeight_ != null) hash ^= MaxHeight.GetHashCode();
      if (maxWidth_ != null) hash ^= MaxWidth.GetHashCode();
      if (minHeight_ != null) hash ^= MinHeight.GetHashCode();
      if (minWidth_ != null) hash ^= MinWidth.GetHashCode();
      if (opacity_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Opacity);
      if (Overflow != global::Spelldawn.Protos.FlexOverflow.Unspecified) hash ^= Overflow.GetHashCode();
      if (padding_ != null) hash ^= Padding.GetHashCode();
      if (Position != global::Spelldawn.Protos.FlexPosition.Unspecified) hash ^= Position.GetHashCode();
      if (rotate_ != null) hash ^= Rotate.GetHashCode();
      if (scale_ != null) hash ^= Scale.GetHashCode();
      if (TextOverflow != global::Spelldawn.Protos.TextOverflow.Unspecified) hash ^= TextOverflow.GetHashCode();
      if (textShadow_ != null) hash ^= TextShadow.GetHashCode();
      if (transformOrigin_ != null) hash ^= TransformOrigin.GetHashCode();
      hash ^= transitionDelays_.GetHashCode();
      hash ^= transitionDurations_.GetHashCode();
      hash ^= transitionProperties_.GetHashCode();
      hash ^= transitionEasingModes_.GetHashCode();
      if (translate_ != null) hash ^= Translate.GetHashCode();
      if (backgroundImageTintColor_ != null) hash ^= BackgroundImageTintColor.GetHashCode();
      if (BackgroundImageScaleMode != global::Spelldawn.Protos.ImageScaleMode.Unspecified) hash ^= BackgroundImageScaleMode.GetHashCode();
      if (font_ != null) hash ^= Font.GetHashCode();
      if (FontStyle != global::Spelldawn.Protos.FontStyle.Unspecified) hash ^= FontStyle.GetHashCode();
      if (OverflowClipBox != global::Spelldawn.Protos.OverflowClipBox.Unspecified) hash ^= OverflowClipBox.GetHashCode();
      if (paragraphSpacing_ != null) hash ^= ParagraphSpacing.GetHashCode();
      if (imageSlice_ != null) hash ^= ImageSlice.GetHashCode();
      if (TextAlign != global::Spelldawn.Protos.TextAlign.Unspecified) hash ^= TextAlign.GetHashCode();
      if (textOutlineColor_ != null) hash ^= TextOutlineColor.GetHashCode();
      if (textOutlineWidth_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(TextOutlineWidth);
      if (TextOverflowPosition != global::Spelldawn.Protos.TextOverflowPosition.Unspecified) hash ^= TextOverflowPosition.GetHashCode();
      if (Visibility != global::Spelldawn.Protos.FlexVisibility.Unspecified) hash ^= Visibility.GetHashCode();
      if (WhiteSpace != global::Spelldawn.Protos.WhiteSpace.Unspecified) hash ^= WhiteSpace.GetHashCode();
      if (width_ != null) hash ^= Width.GetHashCode();
      if (wordSpacing_ != null) hash ^= WordSpacing.GetHashCode();
      if (backgroundImageScaleMultiplier_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(BackgroundImageScaleMultiplier);
      if (FixedBackgroundImageAspectRatio != false) hash ^= FixedBackgroundImageAspectRatio.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AlignContent != global::Spelldawn.Protos.FlexAlign.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AlignContent);
      }
      if (AlignItems != global::Spelldawn.Protos.FlexAlign.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AlignItems);
      }
      if (AlignSelf != global::Spelldawn.Protos.FlexAlign.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) AlignSelf);
      }
      if (backgroundColor_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BackgroundColor);
      }
      if (backgroundImage_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BackgroundImage);
      }
      if (borderColor_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(BorderColor);
      }
      if (borderRadius_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BorderRadius);
      }
      if (borderWidth_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(BorderWidth);
      }
      if (inset_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Inset);
      }
      if (color_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Color);
      }
      if (Display != global::Spelldawn.Protos.FlexDisplayStyle.Unspecified) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Display);
      }
      if (flexBasis_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(FlexBasis);
      }
      if (FlexDirection != global::Spelldawn.Protos.FlexDirection.Unspecified) {
        output.WriteRawTag(104);
        output.WriteEnum((int) FlexDirection);
      }
      if (flexGrow_ != null) {
        _single_flexGrow_codec.WriteTagAndValue(output, FlexGrow);
      }
      if (flexShrink_ != null) {
        _single_flexShrink_codec.WriteTagAndValue(output, FlexShrink);
      }
      if (Wrap != global::Spelldawn.Protos.FlexWrap.Unspecified) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) Wrap);
      }
      if (fontSize_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(FontSize);
      }
      if (height_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Height);
      }
      if (JustifyContent != global::Spelldawn.Protos.FlexJustify.Unspecified) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) JustifyContent);
      }
      if (letterSpacing_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(LetterSpacing);
      }
      if (margin_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Margin);
      }
      if (maxHeight_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(MaxHeight);
      }
      if (maxWidth_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(MaxWidth);
      }
      if (minHeight_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(MinHeight);
      }
      if (minWidth_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(MinWidth);
      }
      if (opacity_ != null) {
        _single_opacity_codec.WriteTagAndValue(output, Opacity);
      }
      if (Overflow != global::Spelldawn.Protos.FlexOverflow.Unspecified) {
        output.WriteRawTag(216, 1);
        output.WriteEnum((int) Overflow);
      }
      if (padding_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(Padding);
      }
      if (Position != global::Spelldawn.Protos.FlexPosition.Unspecified) {
        output.WriteRawTag(232, 1);
        output.WriteEnum((int) Position);
      }
      if (rotate_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Rotate);
      }
      if (scale_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(Scale);
      }
      if (TextOverflow != global::Spelldawn.Protos.TextOverflow.Unspecified) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) TextOverflow);
      }
      if (textShadow_ != null) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(TextShadow);
      }
      if (transformOrigin_ != null) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(TransformOrigin);
      }
      transitionDelays_.WriteTo(output, _repeated_transitionDelays_codec);
      transitionDurations_.WriteTo(output, _repeated_transitionDurations_codec);
      transitionProperties_.WriteTo(output, _repeated_transitionProperties_codec);
      transitionEasingModes_.WriteTo(output, _repeated_transitionEasingModes_codec);
      if (translate_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Translate);
      }
      if (backgroundImageTintColor_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(BackgroundImageTintColor);
      }
      if (BackgroundImageScaleMode != global::Spelldawn.Protos.ImageScaleMode.Unspecified) {
        output.WriteRawTag(200, 2);
        output.WriteEnum((int) BackgroundImageScaleMode);
      }
      if (font_ != null) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(Font);
      }
      if (FontStyle != global::Spelldawn.Protos.FontStyle.Unspecified) {
        output.WriteRawTag(216, 2);
        output.WriteEnum((int) FontStyle);
      }
      if (OverflowClipBox != global::Spelldawn.Protos.OverflowClipBox.Unspecified) {
        output.WriteRawTag(224, 2);
        output.WriteEnum((int) OverflowClipBox);
      }
      if (paragraphSpacing_ != null) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(ParagraphSpacing);
      }
      if (imageSlice_ != null) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(ImageSlice);
      }
      if (TextAlign != global::Spelldawn.Protos.TextAlign.Unspecified) {
        output.WriteRawTag(248, 2);
        output.WriteEnum((int) TextAlign);
      }
      if (textOutlineColor_ != null) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(TextOutlineColor);
      }
      if (textOutlineWidth_ != null) {
        _single_textOutlineWidth_codec.WriteTagAndValue(output, TextOutlineWidth);
      }
      if (TextOverflowPosition != global::Spelldawn.Protos.TextOverflowPosition.Unspecified) {
        output.WriteRawTag(144, 3);
        output.WriteEnum((int) TextOverflowPosition);
      }
      if (Visibility != global::Spelldawn.Protos.FlexVisibility.Unspecified) {
        output.WriteRawTag(152, 3);
        output.WriteEnum((int) Visibility);
      }
      if (WhiteSpace != global::Spelldawn.Protos.WhiteSpace.Unspecified) {
        output.WriteRawTag(160, 3);
        output.WriteEnum((int) WhiteSpace);
      }
      if (width_ != null) {
        output.WriteRawTag(170, 3);
        output.WriteMessage(Width);
      }
      if (wordSpacing_ != null) {
        output.WriteRawTag(178, 3);
        output.WriteMessage(WordSpacing);
      }
      if (backgroundImageScaleMultiplier_ != null) {
        _single_backgroundImageScaleMultiplier_codec.WriteTagAndValue(output, BackgroundImageScaleMultiplier);
      }
      if (FixedBackgroundImageAspectRatio != false) {
        output.WriteRawTag(192, 3);
        output.WriteBool(FixedBackgroundImageAspectRatio);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AlignContent != global::Spelldawn.Protos.FlexAlign.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AlignContent);
      }
      if (AlignItems != global::Spelldawn.Protos.FlexAlign.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AlignItems);
      }
      if (AlignSelf != global::Spelldawn.Protos.FlexAlign.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) AlignSelf);
      }
      if (backgroundColor_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BackgroundColor);
      }
      if (backgroundImage_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BackgroundImage);
      }
      if (borderColor_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(BorderColor);
      }
      if (borderRadius_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BorderRadius);
      }
      if (borderWidth_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(BorderWidth);
      }
      if (inset_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Inset);
      }
      if (color_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Color);
      }
      if (Display != global::Spelldawn.Protos.FlexDisplayStyle.Unspecified) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Display);
      }
      if (flexBasis_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(FlexBasis);
      }
      if (FlexDirection != global::Spelldawn.Protos.FlexDirection.Unspecified) {
        output.WriteRawTag(104);
        output.WriteEnum((int) FlexDirection);
      }
      if (flexGrow_ != null) {
        _single_flexGrow_codec.WriteTagAndValue(ref output, FlexGrow);
      }
      if (flexShrink_ != null) {
        _single_flexShrink_codec.WriteTagAndValue(ref output, FlexShrink);
      }
      if (Wrap != global::Spelldawn.Protos.FlexWrap.Unspecified) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) Wrap);
      }
      if (fontSize_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(FontSize);
      }
      if (height_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Height);
      }
      if (JustifyContent != global::Spelldawn.Protos.FlexJustify.Unspecified) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) JustifyContent);
      }
      if (letterSpacing_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(LetterSpacing);
      }
      if (margin_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Margin);
      }
      if (maxHeight_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(MaxHeight);
      }
      if (maxWidth_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(MaxWidth);
      }
      if (minHeight_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(MinHeight);
      }
      if (minWidth_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(MinWidth);
      }
      if (opacity_ != null) {
        _single_opacity_codec.WriteTagAndValue(ref output, Opacity);
      }
      if (Overflow != global::Spelldawn.Protos.FlexOverflow.Unspecified) {
        output.WriteRawTag(216, 1);
        output.WriteEnum((int) Overflow);
      }
      if (padding_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(Padding);
      }
      if (Position != global::Spelldawn.Protos.FlexPosition.Unspecified) {
        output.WriteRawTag(232, 1);
        output.WriteEnum((int) Position);
      }
      if (rotate_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Rotate);
      }
      if (scale_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(Scale);
      }
      if (TextOverflow != global::Spelldawn.Protos.TextOverflow.Unspecified) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) TextOverflow);
      }
      if (textShadow_ != null) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(TextShadow);
      }
      if (transformOrigin_ != null) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(TransformOrigin);
      }
      transitionDelays_.WriteTo(ref output, _repeated_transitionDelays_codec);
      transitionDurations_.WriteTo(ref output, _repeated_transitionDurations_codec);
      transitionProperties_.WriteTo(ref output, _repeated_transitionProperties_codec);
      transitionEasingModes_.WriteTo(ref output, _repeated_transitionEasingModes_codec);
      if (translate_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Translate);
      }
      if (backgroundImageTintColor_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(BackgroundImageTintColor);
      }
      if (BackgroundImageScaleMode != global::Spelldawn.Protos.ImageScaleMode.Unspecified) {
        output.WriteRawTag(200, 2);
        output.WriteEnum((int) BackgroundImageScaleMode);
      }
      if (font_ != null) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(Font);
      }
      if (FontStyle != global::Spelldawn.Protos.FontStyle.Unspecified) {
        output.WriteRawTag(216, 2);
        output.WriteEnum((int) FontStyle);
      }
      if (OverflowClipBox != global::Spelldawn.Protos.OverflowClipBox.Unspecified) {
        output.WriteRawTag(224, 2);
        output.WriteEnum((int) OverflowClipBox);
      }
      if (paragraphSpacing_ != null) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(ParagraphSpacing);
      }
      if (imageSlice_ != null) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(ImageSlice);
      }
      if (TextAlign != global::Spelldawn.Protos.TextAlign.Unspecified) {
        output.WriteRawTag(248, 2);
        output.WriteEnum((int) TextAlign);
      }
      if (textOutlineColor_ != null) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(TextOutlineColor);
      }
      if (textOutlineWidth_ != null) {
        _single_textOutlineWidth_codec.WriteTagAndValue(ref output, TextOutlineWidth);
      }
      if (TextOverflowPosition != global::Spelldawn.Protos.TextOverflowPosition.Unspecified) {
        output.WriteRawTag(144, 3);
        output.WriteEnum((int) TextOverflowPosition);
      }
      if (Visibility != global::Spelldawn.Protos.FlexVisibility.Unspecified) {
        output.WriteRawTag(152, 3);
        output.WriteEnum((int) Visibility);
      }
      if (WhiteSpace != global::Spelldawn.Protos.WhiteSpace.Unspecified) {
        output.WriteRawTag(160, 3);
        output.WriteEnum((int) WhiteSpace);
      }
      if (width_ != null) {
        output.WriteRawTag(170, 3);
        output.WriteMessage(Width);
      }
      if (wordSpacing_ != null) {
        output.WriteRawTag(178, 3);
        output.WriteMessage(WordSpacing);
      }
      if (backgroundImageScaleMultiplier_ != null) {
        _single_backgroundImageScaleMultiplier_codec.WriteTagAndValue(ref output, BackgroundImageScaleMultiplier);
      }
      if (FixedBackgroundImageAspectRatio != false) {
        output.WriteRawTag(192, 3);
        output.WriteBool(FixedBackgroundImageAspectRatio);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AlignContent != global::Spelldawn.Protos.FlexAlign.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AlignContent);
      }
      if (AlignItems != global::Spelldawn.Protos.FlexAlign.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AlignItems);
      }
      if (AlignSelf != global::Spelldawn.Protos.FlexAlign.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AlignSelf);
      }
      if (backgroundColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BackgroundColor);
      }
      if (backgroundImage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BackgroundImage);
      }
      if (borderColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BorderColor);
      }
      if (borderRadius_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BorderRadius);
      }
      if (borderWidth_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BorderWidth);
      }
      if (inset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Inset);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (Display != global::Spelldawn.Protos.FlexDisplayStyle.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Display);
      }
      if (flexBasis_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FlexBasis);
      }
      if (FlexDirection != global::Spelldawn.Protos.FlexDirection.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FlexDirection);
      }
      if (flexGrow_ != null) {
        size += _single_flexGrow_codec.CalculateSizeWithTag(FlexGrow);
      }
      if (flexShrink_ != null) {
        size += _single_flexShrink_codec.CalculateSizeWithTag(FlexShrink);
      }
      if (Wrap != global::Spelldawn.Protos.FlexWrap.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Wrap);
      }
      if (fontSize_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FontSize);
      }
      if (height_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Height);
      }
      if (JustifyContent != global::Spelldawn.Protos.FlexJustify.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) JustifyContent);
      }
      if (letterSpacing_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LetterSpacing);
      }
      if (margin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Margin);
      }
      if (maxHeight_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaxHeight);
      }
      if (maxWidth_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaxWidth);
      }
      if (minHeight_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinHeight);
      }
      if (minWidth_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinWidth);
      }
      if (opacity_ != null) {
        size += _single_opacity_codec.CalculateSizeWithTag(Opacity);
      }
      if (Overflow != global::Spelldawn.Protos.FlexOverflow.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Overflow);
      }
      if (padding_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Padding);
      }
      if (Position != global::Spelldawn.Protos.FlexPosition.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Position);
      }
      if (rotate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Rotate);
      }
      if (scale_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      if (TextOverflow != global::Spelldawn.Protos.TextOverflow.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TextOverflow);
      }
      if (textShadow_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TextShadow);
      }
      if (transformOrigin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransformOrigin);
      }
      size += transitionDelays_.CalculateSize(_repeated_transitionDelays_codec);
      size += transitionDurations_.CalculateSize(_repeated_transitionDurations_codec);
      size += transitionProperties_.CalculateSize(_repeated_transitionProperties_codec);
      size += transitionEasingModes_.CalculateSize(_repeated_transitionEasingModes_codec);
      if (translate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Translate);
      }
      if (backgroundImageTintColor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BackgroundImageTintColor);
      }
      if (BackgroundImageScaleMode != global::Spelldawn.Protos.ImageScaleMode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BackgroundImageScaleMode);
      }
      if (font_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Font);
      }
      if (FontStyle != global::Spelldawn.Protos.FontStyle.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FontStyle);
      }
      if (OverflowClipBox != global::Spelldawn.Protos.OverflowClipBox.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OverflowClipBox);
      }
      if (paragraphSpacing_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ParagraphSpacing);
      }
      if (imageSlice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ImageSlice);
      }
      if (TextAlign != global::Spelldawn.Protos.TextAlign.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TextAlign);
      }
      if (textOutlineColor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TextOutlineColor);
      }
      if (textOutlineWidth_ != null) {
        size += _single_textOutlineWidth_codec.CalculateSizeWithTag(TextOutlineWidth);
      }
      if (TextOverflowPosition != global::Spelldawn.Protos.TextOverflowPosition.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TextOverflowPosition);
      }
      if (Visibility != global::Spelldawn.Protos.FlexVisibility.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Visibility);
      }
      if (WhiteSpace != global::Spelldawn.Protos.WhiteSpace.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) WhiteSpace);
      }
      if (width_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Width);
      }
      if (wordSpacing_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WordSpacing);
      }
      if (backgroundImageScaleMultiplier_ != null) {
        size += _single_backgroundImageScaleMultiplier_codec.CalculateSizeWithTag(BackgroundImageScaleMultiplier);
      }
      if (FixedBackgroundImageAspectRatio != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlexStyle other) {
      if (other == null) {
        return;
      }
      if (other.AlignContent != global::Spelldawn.Protos.FlexAlign.Unspecified) {
        AlignContent = other.AlignContent;
      }
      if (other.AlignItems != global::Spelldawn.Protos.FlexAlign.Unspecified) {
        AlignItems = other.AlignItems;
      }
      if (other.AlignSelf != global::Spelldawn.Protos.FlexAlign.Unspecified) {
        AlignSelf = other.AlignSelf;
      }
      if (other.backgroundColor_ != null) {
        if (backgroundColor_ == null) {
          BackgroundColor = new global::Spelldawn.Protos.FlexColor();
        }
        BackgroundColor.MergeFrom(other.BackgroundColor);
      }
      if (other.backgroundImage_ != null) {
        if (backgroundImage_ == null) {
          BackgroundImage = new global::Spelldawn.Protos.SpriteAddress();
        }
        BackgroundImage.MergeFrom(other.BackgroundImage);
      }
      if (other.borderColor_ != null) {
        if (borderColor_ == null) {
          BorderColor = new global::Spelldawn.Protos.BorderColor();
        }
        BorderColor.MergeFrom(other.BorderColor);
      }
      if (other.borderRadius_ != null) {
        if (borderRadius_ == null) {
          BorderRadius = new global::Spelldawn.Protos.BorderRadius();
        }
        BorderRadius.MergeFrom(other.BorderRadius);
      }
      if (other.borderWidth_ != null) {
        if (borderWidth_ == null) {
          BorderWidth = new global::Spelldawn.Protos.BorderWidth();
        }
        BorderWidth.MergeFrom(other.BorderWidth);
      }
      if (other.inset_ != null) {
        if (inset_ == null) {
          Inset = new global::Spelldawn.Protos.DimensionGroup();
        }
        Inset.MergeFrom(other.Inset);
      }
      if (other.color_ != null) {
        if (color_ == null) {
          Color = new global::Spelldawn.Protos.FlexColor();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.Display != global::Spelldawn.Protos.FlexDisplayStyle.Unspecified) {
        Display = other.Display;
      }
      if (other.flexBasis_ != null) {
        if (flexBasis_ == null) {
          FlexBasis = new global::Spelldawn.Protos.Dimension();
        }
        FlexBasis.MergeFrom(other.FlexBasis);
      }
      if (other.FlexDirection != global::Spelldawn.Protos.FlexDirection.Unspecified) {
        FlexDirection = other.FlexDirection;
      }
      if (other.flexGrow_ != null) {
        if (flexGrow_ == null || other.FlexGrow != 0F) {
          FlexGrow = other.FlexGrow;
        }
      }
      if (other.flexShrink_ != null) {
        if (flexShrink_ == null || other.FlexShrink != 0F) {
          FlexShrink = other.FlexShrink;
        }
      }
      if (other.Wrap != global::Spelldawn.Protos.FlexWrap.Unspecified) {
        Wrap = other.Wrap;
      }
      if (other.fontSize_ != null) {
        if (fontSize_ == null) {
          FontSize = new global::Spelldawn.Protos.Dimension();
        }
        FontSize.MergeFrom(other.FontSize);
      }
      if (other.height_ != null) {
        if (height_ == null) {
          Height = new global::Spelldawn.Protos.Dimension();
        }
        Height.MergeFrom(other.Height);
      }
      if (other.JustifyContent != global::Spelldawn.Protos.FlexJustify.Unspecified) {
        JustifyContent = other.JustifyContent;
      }
      if (other.letterSpacing_ != null) {
        if (letterSpacing_ == null) {
          LetterSpacing = new global::Spelldawn.Protos.Dimension();
        }
        LetterSpacing.MergeFrom(other.LetterSpacing);
      }
      if (other.margin_ != null) {
        if (margin_ == null) {
          Margin = new global::Spelldawn.Protos.DimensionGroup();
        }
        Margin.MergeFrom(other.Margin);
      }
      if (other.maxHeight_ != null) {
        if (maxHeight_ == null) {
          MaxHeight = new global::Spelldawn.Protos.Dimension();
        }
        MaxHeight.MergeFrom(other.MaxHeight);
      }
      if (other.maxWidth_ != null) {
        if (maxWidth_ == null) {
          MaxWidth = new global::Spelldawn.Protos.Dimension();
        }
        MaxWidth.MergeFrom(other.MaxWidth);
      }
      if (other.minHeight_ != null) {
        if (minHeight_ == null) {
          MinHeight = new global::Spelldawn.Protos.Dimension();
        }
        MinHeight.MergeFrom(other.MinHeight);
      }
      if (other.minWidth_ != null) {
        if (minWidth_ == null) {
          MinWidth = new global::Spelldawn.Protos.Dimension();
        }
        MinWidth.MergeFrom(other.MinWidth);
      }
      if (other.opacity_ != null) {
        if (opacity_ == null || other.Opacity != 0F) {
          Opacity = other.Opacity;
        }
      }
      if (other.Overflow != global::Spelldawn.Protos.FlexOverflow.Unspecified) {
        Overflow = other.Overflow;
      }
      if (other.padding_ != null) {
        if (padding_ == null) {
          Padding = new global::Spelldawn.Protos.DimensionGroup();
        }
        Padding.MergeFrom(other.Padding);
      }
      if (other.Position != global::Spelldawn.Protos.FlexPosition.Unspecified) {
        Position = other.Position;
      }
      if (other.rotate_ != null) {
        if (rotate_ == null) {
          Rotate = new global::Spelldawn.Protos.FlexRotate();
        }
        Rotate.MergeFrom(other.Rotate);
      }
      if (other.scale_ != null) {
        if (scale_ == null) {
          Scale = new global::Spelldawn.Protos.FlexScale();
        }
        Scale.MergeFrom(other.Scale);
      }
      if (other.TextOverflow != global::Spelldawn.Protos.TextOverflow.Unspecified) {
        TextOverflow = other.TextOverflow;
      }
      if (other.textShadow_ != null) {
        if (textShadow_ == null) {
          TextShadow = new global::Spelldawn.Protos.TextShadow();
        }
        TextShadow.MergeFrom(other.TextShadow);
      }
      if (other.transformOrigin_ != null) {
        if (transformOrigin_ == null) {
          TransformOrigin = new global::Spelldawn.Protos.FlexTranslate();
        }
        TransformOrigin.MergeFrom(other.TransformOrigin);
      }
      transitionDelays_.Add(other.transitionDelays_);
      transitionDurations_.Add(other.transitionDurations_);
      transitionProperties_.Add(other.transitionProperties_);
      transitionEasingModes_.Add(other.transitionEasingModes_);
      if (other.translate_ != null) {
        if (translate_ == null) {
          Translate = new global::Spelldawn.Protos.FlexTranslate();
        }
        Translate.MergeFrom(other.Translate);
      }
      if (other.backgroundImageTintColor_ != null) {
        if (backgroundImageTintColor_ == null) {
          BackgroundImageTintColor = new global::Spelldawn.Protos.FlexColor();
        }
        BackgroundImageTintColor.MergeFrom(other.BackgroundImageTintColor);
      }
      if (other.BackgroundImageScaleMode != global::Spelldawn.Protos.ImageScaleMode.Unspecified) {
        BackgroundImageScaleMode = other.BackgroundImageScaleMode;
      }
      if (other.font_ != null) {
        if (font_ == null) {
          Font = new global::Spelldawn.Protos.FontAddress();
        }
        Font.MergeFrom(other.Font);
      }
      if (other.FontStyle != global::Spelldawn.Protos.FontStyle.Unspecified) {
        FontStyle = other.FontStyle;
      }
      if (other.OverflowClipBox != global::Spelldawn.Protos.OverflowClipBox.Unspecified) {
        OverflowClipBox = other.OverflowClipBox;
      }
      if (other.paragraphSpacing_ != null) {
        if (paragraphSpacing_ == null) {
          ParagraphSpacing = new global::Spelldawn.Protos.Dimension();
        }
        ParagraphSpacing.MergeFrom(other.ParagraphSpacing);
      }
      if (other.imageSlice_ != null) {
        if (imageSlice_ == null) {
          ImageSlice = new global::Spelldawn.Protos.ImageSlice();
        }
        ImageSlice.MergeFrom(other.ImageSlice);
      }
      if (other.TextAlign != global::Spelldawn.Protos.TextAlign.Unspecified) {
        TextAlign = other.TextAlign;
      }
      if (other.textOutlineColor_ != null) {
        if (textOutlineColor_ == null) {
          TextOutlineColor = new global::Spelldawn.Protos.FlexColor();
        }
        TextOutlineColor.MergeFrom(other.TextOutlineColor);
      }
      if (other.textOutlineWidth_ != null) {
        if (textOutlineWidth_ == null || other.TextOutlineWidth != 0F) {
          TextOutlineWidth = other.TextOutlineWidth;
        }
      }
      if (other.TextOverflowPosition != global::Spelldawn.Protos.TextOverflowPosition.Unspecified) {
        TextOverflowPosition = other.TextOverflowPosition;
      }
      if (other.Visibility != global::Spelldawn.Protos.FlexVisibility.Unspecified) {
        Visibility = other.Visibility;
      }
      if (other.WhiteSpace != global::Spelldawn.Protos.WhiteSpace.Unspecified) {
        WhiteSpace = other.WhiteSpace;
      }
      if (other.width_ != null) {
        if (width_ == null) {
          Width = new global::Spelldawn.Protos.Dimension();
        }
        Width.MergeFrom(other.Width);
      }
      if (other.wordSpacing_ != null) {
        if (wordSpacing_ == null) {
          WordSpacing = new global::Spelldawn.Protos.Dimension();
        }
        WordSpacing.MergeFrom(other.WordSpacing);
      }
      if (other.backgroundImageScaleMultiplier_ != null) {
        if (backgroundImageScaleMultiplier_ == null || other.BackgroundImageScaleMultiplier != 0F) {
          BackgroundImageScaleMultiplier = other.BackgroundImageScaleMultiplier;
        }
      }
      if (other.FixedBackgroundImageAspectRatio != false) {
        FixedBackgroundImageAspectRatio = other.FixedBackgroundImageAspectRatio;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AlignContent = (global::Spelldawn.Protos.FlexAlign) input.ReadEnum();
            break;
          }
          case 16: {
            AlignItems = (global::Spelldawn.Protos.FlexAlign) input.ReadEnum();
            break;
          }
          case 24: {
            AlignSelf = (global::Spelldawn.Protos.FlexAlign) input.ReadEnum();
            break;
          }
          case 34: {
            if (backgroundColor_ == null) {
              BackgroundColor = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(BackgroundColor);
            break;
          }
          case 42: {
            if (backgroundImage_ == null) {
              BackgroundImage = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(BackgroundImage);
            break;
          }
          case 50: {
            if (borderColor_ == null) {
              BorderColor = new global::Spelldawn.Protos.BorderColor();
            }
            input.ReadMessage(BorderColor);
            break;
          }
          case 58: {
            if (borderRadius_ == null) {
              BorderRadius = new global::Spelldawn.Protos.BorderRadius();
            }
            input.ReadMessage(BorderRadius);
            break;
          }
          case 66: {
            if (borderWidth_ == null) {
              BorderWidth = new global::Spelldawn.Protos.BorderWidth();
            }
            input.ReadMessage(BorderWidth);
            break;
          }
          case 74: {
            if (inset_ == null) {
              Inset = new global::Spelldawn.Protos.DimensionGroup();
            }
            input.ReadMessage(Inset);
            break;
          }
          case 82: {
            if (color_ == null) {
              Color = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(Color);
            break;
          }
          case 88: {
            Display = (global::Spelldawn.Protos.FlexDisplayStyle) input.ReadEnum();
            break;
          }
          case 98: {
            if (flexBasis_ == null) {
              FlexBasis = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(FlexBasis);
            break;
          }
          case 104: {
            FlexDirection = (global::Spelldawn.Protos.FlexDirection) input.ReadEnum();
            break;
          }
          case 114: {
            float? value = _single_flexGrow_codec.Read(input);
            if (flexGrow_ == null || value != 0F) {
              FlexGrow = value;
            }
            break;
          }
          case 122: {
            float? value = _single_flexShrink_codec.Read(input);
            if (flexShrink_ == null || value != 0F) {
              FlexShrink = value;
            }
            break;
          }
          case 128: {
            Wrap = (global::Spelldawn.Protos.FlexWrap) input.ReadEnum();
            break;
          }
          case 138: {
            if (fontSize_ == null) {
              FontSize = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(FontSize);
            break;
          }
          case 146: {
            if (height_ == null) {
              Height = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Height);
            break;
          }
          case 152: {
            JustifyContent = (global::Spelldawn.Protos.FlexJustify) input.ReadEnum();
            break;
          }
          case 162: {
            if (letterSpacing_ == null) {
              LetterSpacing = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(LetterSpacing);
            break;
          }
          case 170: {
            if (margin_ == null) {
              Margin = new global::Spelldawn.Protos.DimensionGroup();
            }
            input.ReadMessage(Margin);
            break;
          }
          case 178: {
            if (maxHeight_ == null) {
              MaxHeight = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(MaxHeight);
            break;
          }
          case 186: {
            if (maxWidth_ == null) {
              MaxWidth = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(MaxWidth);
            break;
          }
          case 194: {
            if (minHeight_ == null) {
              MinHeight = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(MinHeight);
            break;
          }
          case 202: {
            if (minWidth_ == null) {
              MinWidth = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(MinWidth);
            break;
          }
          case 210: {
            float? value = _single_opacity_codec.Read(input);
            if (opacity_ == null || value != 0F) {
              Opacity = value;
            }
            break;
          }
          case 216: {
            Overflow = (global::Spelldawn.Protos.FlexOverflow) input.ReadEnum();
            break;
          }
          case 226: {
            if (padding_ == null) {
              Padding = new global::Spelldawn.Protos.DimensionGroup();
            }
            input.ReadMessage(Padding);
            break;
          }
          case 232: {
            Position = (global::Spelldawn.Protos.FlexPosition) input.ReadEnum();
            break;
          }
          case 242: {
            if (rotate_ == null) {
              Rotate = new global::Spelldawn.Protos.FlexRotate();
            }
            input.ReadMessage(Rotate);
            break;
          }
          case 250: {
            if (scale_ == null) {
              Scale = new global::Spelldawn.Protos.FlexScale();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 256: {
            TextOverflow = (global::Spelldawn.Protos.TextOverflow) input.ReadEnum();
            break;
          }
          case 266: {
            if (textShadow_ == null) {
              TextShadow = new global::Spelldawn.Protos.TextShadow();
            }
            input.ReadMessage(TextShadow);
            break;
          }
          case 274: {
            if (transformOrigin_ == null) {
              TransformOrigin = new global::Spelldawn.Protos.FlexTranslate();
            }
            input.ReadMessage(TransformOrigin);
            break;
          }
          case 282: {
            transitionDelays_.AddEntriesFrom(input, _repeated_transitionDelays_codec);
            break;
          }
          case 290: {
            transitionDurations_.AddEntriesFrom(input, _repeated_transitionDurations_codec);
            break;
          }
          case 298: {
            transitionProperties_.AddEntriesFrom(input, _repeated_transitionProperties_codec);
            break;
          }
          case 306:
          case 304: {
            transitionEasingModes_.AddEntriesFrom(input, _repeated_transitionEasingModes_codec);
            break;
          }
          case 314: {
            if (translate_ == null) {
              Translate = new global::Spelldawn.Protos.FlexTranslate();
            }
            input.ReadMessage(Translate);
            break;
          }
          case 322: {
            if (backgroundImageTintColor_ == null) {
              BackgroundImageTintColor = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(BackgroundImageTintColor);
            break;
          }
          case 328: {
            BackgroundImageScaleMode = (global::Spelldawn.Protos.ImageScaleMode) input.ReadEnum();
            break;
          }
          case 338: {
            if (font_ == null) {
              Font = new global::Spelldawn.Protos.FontAddress();
            }
            input.ReadMessage(Font);
            break;
          }
          case 344: {
            FontStyle = (global::Spelldawn.Protos.FontStyle) input.ReadEnum();
            break;
          }
          case 352: {
            OverflowClipBox = (global::Spelldawn.Protos.OverflowClipBox) input.ReadEnum();
            break;
          }
          case 362: {
            if (paragraphSpacing_ == null) {
              ParagraphSpacing = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(ParagraphSpacing);
            break;
          }
          case 370: {
            if (imageSlice_ == null) {
              ImageSlice = new global::Spelldawn.Protos.ImageSlice();
            }
            input.ReadMessage(ImageSlice);
            break;
          }
          case 376: {
            TextAlign = (global::Spelldawn.Protos.TextAlign) input.ReadEnum();
            break;
          }
          case 386: {
            if (textOutlineColor_ == null) {
              TextOutlineColor = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(TextOutlineColor);
            break;
          }
          case 394: {
            float? value = _single_textOutlineWidth_codec.Read(input);
            if (textOutlineWidth_ == null || value != 0F) {
              TextOutlineWidth = value;
            }
            break;
          }
          case 400: {
            TextOverflowPosition = (global::Spelldawn.Protos.TextOverflowPosition) input.ReadEnum();
            break;
          }
          case 408: {
            Visibility = (global::Spelldawn.Protos.FlexVisibility) input.ReadEnum();
            break;
          }
          case 416: {
            WhiteSpace = (global::Spelldawn.Protos.WhiteSpace) input.ReadEnum();
            break;
          }
          case 426: {
            if (width_ == null) {
              Width = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Width);
            break;
          }
          case 434: {
            if (wordSpacing_ == null) {
              WordSpacing = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(WordSpacing);
            break;
          }
          case 442: {
            float? value = _single_backgroundImageScaleMultiplier_codec.Read(input);
            if (backgroundImageScaleMultiplier_ == null || value != 0F) {
              BackgroundImageScaleMultiplier = value;
            }
            break;
          }
          case 448: {
            FixedBackgroundImageAspectRatio = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AlignContent = (global::Spelldawn.Protos.FlexAlign) input.ReadEnum();
            break;
          }
          case 16: {
            AlignItems = (global::Spelldawn.Protos.FlexAlign) input.ReadEnum();
            break;
          }
          case 24: {
            AlignSelf = (global::Spelldawn.Protos.FlexAlign) input.ReadEnum();
            break;
          }
          case 34: {
            if (backgroundColor_ == null) {
              BackgroundColor = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(BackgroundColor);
            break;
          }
          case 42: {
            if (backgroundImage_ == null) {
              BackgroundImage = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(BackgroundImage);
            break;
          }
          case 50: {
            if (borderColor_ == null) {
              BorderColor = new global::Spelldawn.Protos.BorderColor();
            }
            input.ReadMessage(BorderColor);
            break;
          }
          case 58: {
            if (borderRadius_ == null) {
              BorderRadius = new global::Spelldawn.Protos.BorderRadius();
            }
            input.ReadMessage(BorderRadius);
            break;
          }
          case 66: {
            if (borderWidth_ == null) {
              BorderWidth = new global::Spelldawn.Protos.BorderWidth();
            }
            input.ReadMessage(BorderWidth);
            break;
          }
          case 74: {
            if (inset_ == null) {
              Inset = new global::Spelldawn.Protos.DimensionGroup();
            }
            input.ReadMessage(Inset);
            break;
          }
          case 82: {
            if (color_ == null) {
              Color = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(Color);
            break;
          }
          case 88: {
            Display = (global::Spelldawn.Protos.FlexDisplayStyle) input.ReadEnum();
            break;
          }
          case 98: {
            if (flexBasis_ == null) {
              FlexBasis = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(FlexBasis);
            break;
          }
          case 104: {
            FlexDirection = (global::Spelldawn.Protos.FlexDirection) input.ReadEnum();
            break;
          }
          case 114: {
            float? value = _single_flexGrow_codec.Read(ref input);
            if (flexGrow_ == null || value != 0F) {
              FlexGrow = value;
            }
            break;
          }
          case 122: {
            float? value = _single_flexShrink_codec.Read(ref input);
            if (flexShrink_ == null || value != 0F) {
              FlexShrink = value;
            }
            break;
          }
          case 128: {
            Wrap = (global::Spelldawn.Protos.FlexWrap) input.ReadEnum();
            break;
          }
          case 138: {
            if (fontSize_ == null) {
              FontSize = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(FontSize);
            break;
          }
          case 146: {
            if (height_ == null) {
              Height = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Height);
            break;
          }
          case 152: {
            JustifyContent = (global::Spelldawn.Protos.FlexJustify) input.ReadEnum();
            break;
          }
          case 162: {
            if (letterSpacing_ == null) {
              LetterSpacing = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(LetterSpacing);
            break;
          }
          case 170: {
            if (margin_ == null) {
              Margin = new global::Spelldawn.Protos.DimensionGroup();
            }
            input.ReadMessage(Margin);
            break;
          }
          case 178: {
            if (maxHeight_ == null) {
              MaxHeight = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(MaxHeight);
            break;
          }
          case 186: {
            if (maxWidth_ == null) {
              MaxWidth = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(MaxWidth);
            break;
          }
          case 194: {
            if (minHeight_ == null) {
              MinHeight = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(MinHeight);
            break;
          }
          case 202: {
            if (minWidth_ == null) {
              MinWidth = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(MinWidth);
            break;
          }
          case 210: {
            float? value = _single_opacity_codec.Read(ref input);
            if (opacity_ == null || value != 0F) {
              Opacity = value;
            }
            break;
          }
          case 216: {
            Overflow = (global::Spelldawn.Protos.FlexOverflow) input.ReadEnum();
            break;
          }
          case 226: {
            if (padding_ == null) {
              Padding = new global::Spelldawn.Protos.DimensionGroup();
            }
            input.ReadMessage(Padding);
            break;
          }
          case 232: {
            Position = (global::Spelldawn.Protos.FlexPosition) input.ReadEnum();
            break;
          }
          case 242: {
            if (rotate_ == null) {
              Rotate = new global::Spelldawn.Protos.FlexRotate();
            }
            input.ReadMessage(Rotate);
            break;
          }
          case 250: {
            if (scale_ == null) {
              Scale = new global::Spelldawn.Protos.FlexScale();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 256: {
            TextOverflow = (global::Spelldawn.Protos.TextOverflow) input.ReadEnum();
            break;
          }
          case 266: {
            if (textShadow_ == null) {
              TextShadow = new global::Spelldawn.Protos.TextShadow();
            }
            input.ReadMessage(TextShadow);
            break;
          }
          case 274: {
            if (transformOrigin_ == null) {
              TransformOrigin = new global::Spelldawn.Protos.FlexTranslate();
            }
            input.ReadMessage(TransformOrigin);
            break;
          }
          case 282: {
            transitionDelays_.AddEntriesFrom(ref input, _repeated_transitionDelays_codec);
            break;
          }
          case 290: {
            transitionDurations_.AddEntriesFrom(ref input, _repeated_transitionDurations_codec);
            break;
          }
          case 298: {
            transitionProperties_.AddEntriesFrom(ref input, _repeated_transitionProperties_codec);
            break;
          }
          case 306:
          case 304: {
            transitionEasingModes_.AddEntriesFrom(ref input, _repeated_transitionEasingModes_codec);
            break;
          }
          case 314: {
            if (translate_ == null) {
              Translate = new global::Spelldawn.Protos.FlexTranslate();
            }
            input.ReadMessage(Translate);
            break;
          }
          case 322: {
            if (backgroundImageTintColor_ == null) {
              BackgroundImageTintColor = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(BackgroundImageTintColor);
            break;
          }
          case 328: {
            BackgroundImageScaleMode = (global::Spelldawn.Protos.ImageScaleMode) input.ReadEnum();
            break;
          }
          case 338: {
            if (font_ == null) {
              Font = new global::Spelldawn.Protos.FontAddress();
            }
            input.ReadMessage(Font);
            break;
          }
          case 344: {
            FontStyle = (global::Spelldawn.Protos.FontStyle) input.ReadEnum();
            break;
          }
          case 352: {
            OverflowClipBox = (global::Spelldawn.Protos.OverflowClipBox) input.ReadEnum();
            break;
          }
          case 362: {
            if (paragraphSpacing_ == null) {
              ParagraphSpacing = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(ParagraphSpacing);
            break;
          }
          case 370: {
            if (imageSlice_ == null) {
              ImageSlice = new global::Spelldawn.Protos.ImageSlice();
            }
            input.ReadMessage(ImageSlice);
            break;
          }
          case 376: {
            TextAlign = (global::Spelldawn.Protos.TextAlign) input.ReadEnum();
            break;
          }
          case 386: {
            if (textOutlineColor_ == null) {
              TextOutlineColor = new global::Spelldawn.Protos.FlexColor();
            }
            input.ReadMessage(TextOutlineColor);
            break;
          }
          case 394: {
            float? value = _single_textOutlineWidth_codec.Read(ref input);
            if (textOutlineWidth_ == null || value != 0F) {
              TextOutlineWidth = value;
            }
            break;
          }
          case 400: {
            TextOverflowPosition = (global::Spelldawn.Protos.TextOverflowPosition) input.ReadEnum();
            break;
          }
          case 408: {
            Visibility = (global::Spelldawn.Protos.FlexVisibility) input.ReadEnum();
            break;
          }
          case 416: {
            WhiteSpace = (global::Spelldawn.Protos.WhiteSpace) input.ReadEnum();
            break;
          }
          case 426: {
            if (width_ == null) {
              Width = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(Width);
            break;
          }
          case 434: {
            if (wordSpacing_ == null) {
              WordSpacing = new global::Spelldawn.Protos.Dimension();
            }
            input.ReadMessage(WordSpacing);
            break;
          }
          case 442: {
            float? value = _single_backgroundImageScaleMultiplier_codec.Read(ref input);
            if (backgroundImageScaleMultiplier_ == null || value != 0F) {
              BackgroundImageScaleMultiplier = value;
            }
            break;
          }
          case 448: {
            FixedBackgroundImageAspectRatio = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Flexbox : pb::IMessage<Flexbox>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Flexbox> _parser = new pb::MessageParser<Flexbox>(() => new Flexbox());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Flexbox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Flexbox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Flexbox(Flexbox other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Flexbox Clone() {
      return new Flexbox(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Flexbox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Flexbox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Flexbox other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class Text : pb::IMessage<Text>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Text> _parser = new pb::MessageParser<Text>(() => new Text());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Text> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Text() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Text(Text other) : this() {
      label_ = other.label_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Text Clone() {
      return new Text(this);
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 1;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Text);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Text other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Label != other.Label) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Label.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Label);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Label.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Label);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Text other) {
      if (other == null) {
        return;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Label = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Label = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventHandlers : pb::IMessage<EventHandlers>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventHandlers> _parser = new pb::MessageParser<EventHandlers>(() => new EventHandlers());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventHandlers> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventHandlers() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventHandlers(EventHandlers other) : this() {
      onClick_ = other.onClick_ != null ? other.onClick_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventHandlers Clone() {
      return new EventHandlers(this);
    }

    /// <summary>Field number for the "on_click" field.</summary>
    public const int OnClickFieldNumber = 1;
    private global::Spelldawn.Protos.GameAction onClick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.GameAction OnClick {
      get { return onClick_; }
      set {
        onClick_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventHandlers);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventHandlers other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OnClick, other.OnClick)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (onClick_ != null) hash ^= OnClick.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (onClick_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OnClick);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (onClick_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OnClick);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (onClick_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OnClick);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventHandlers other) {
      if (other == null) {
        return;
      }
      if (other.onClick_ != null) {
        if (onClick_ == null) {
          OnClick = new global::Spelldawn.Protos.GameAction();
        }
        OnClick.MergeFrom(other.OnClick);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (onClick_ == null) {
              OnClick = new global::Spelldawn.Protos.GameAction();
            }
            input.ReadMessage(OnClick);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (onClick_ == null) {
              OnClick = new global::Spelldawn.Protos.GameAction();
            }
            input.ReadMessage(OnClick);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NodeType : pb::IMessage<NodeType>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NodeType> _parser = new pb::MessageParser<NodeType>(() => new NodeType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeType(NodeType other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.Text:
          Text = other.Text.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeType Clone() {
      return new NodeType(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Text Text {
      get { return typeCase_ == TypeOneofCase.Text ? (global::Spelldawn.Protos.Text) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Text;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Text = 1,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Text, other.Text)) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.Text) hash ^= Text.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (typeCase_ == TypeOneofCase.Text) {
        output.WriteRawTag(10);
        output.WriteMessage(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (typeCase_ == TypeOneofCase.Text) {
        output.WriteRawTag(10);
        output.WriteMessage(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.Text) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeType other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.Text:
          if (Text == null) {
            Text = new global::Spelldawn.Protos.Text();
          }
          Text.MergeFrom(other.Text);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Spelldawn.Protos.Text subBuilder = new global::Spelldawn.Protos.Text();
            if (typeCase_ == TypeOneofCase.Text) {
              subBuilder.MergeFrom(Text);
            }
            input.ReadMessage(subBuilder);
            Text = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Spelldawn.Protos.Text subBuilder = new global::Spelldawn.Protos.Text();
            if (typeCase_ == TypeOneofCase.Text) {
              subBuilder.MergeFrom(Text);
            }
            input.ReadMessage(subBuilder);
            Text = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Node : pb::IMessage<Node>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Node> _parser = new pb::MessageParser<Node>(() => new Node());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Node> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node(Node other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      nodeType_ = other.nodeType_ != null ? other.nodeType_.Clone() : null;
      children_ = other.children_.Clone();
      eventHandlers_ = other.eventHandlers_ != null ? other.eventHandlers_.Clone() : null;
      style_ = other.style_ != null ? other.style_.Clone() : null;
      hoverStyle_ = other.hoverStyle_ != null ? other.hoverStyle_.Clone() : null;
      pressedStyle_ = other.pressedStyle_ != null ? other.pressedStyle_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node Clone() {
      return new Node(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///*
    /// Used to identify this node in the hierarchy, should be unique among
    /// sibilings. If not provided, index will be used instead.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///*
    /// Used to identify this node in debugging tools
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node_type" field.</summary>
    public const int NodeTypeFieldNumber = 3;
    private global::Spelldawn.Protos.NodeType nodeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.NodeType NodeType {
      get { return nodeType_; }
      set {
        nodeType_ = value;
      }
    }

    /// <summary>Field number for the "children" field.</summary>
    public const int ChildrenFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.Node> _repeated_children_codec
        = pb::FieldCodec.ForMessage(34, global::Spelldawn.Protos.Node.Parser);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.Node> children_ = new pbc::RepeatedField<global::Spelldawn.Protos.Node>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.Node> Children {
      get { return children_; }
    }

    /// <summary>Field number for the "event_handlers" field.</summary>
    public const int EventHandlersFieldNumber = 5;
    private global::Spelldawn.Protos.EventHandlers eventHandlers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.EventHandlers EventHandlers {
      get { return eventHandlers_; }
      set {
        eventHandlers_ = value;
      }
    }

    /// <summary>Field number for the "style" field.</summary>
    public const int StyleFieldNumber = 6;
    private global::Spelldawn.Protos.FlexStyle style_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexStyle Style {
      get { return style_; }
      set {
        style_ = value;
      }
    }

    /// <summary>Field number for the "hover_style" field.</summary>
    public const int HoverStyleFieldNumber = 7;
    private global::Spelldawn.Protos.FlexStyle hoverStyle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexStyle HoverStyle {
      get { return hoverStyle_; }
      set {
        hoverStyle_ = value;
      }
    }

    /// <summary>Field number for the "pressed_style" field.</summary>
    public const int PressedStyleFieldNumber = 8;
    private global::Spelldawn.Protos.FlexStyle pressedStyle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FlexStyle PressedStyle {
      get { return pressedStyle_; }
      set {
        pressedStyle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Node);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Node other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(NodeType, other.NodeType)) return false;
      if(!children_.Equals(other.children_)) return false;
      if (!object.Equals(EventHandlers, other.EventHandlers)) return false;
      if (!object.Equals(Style, other.Style)) return false;
      if (!object.Equals(HoverStyle, other.HoverStyle)) return false;
      if (!object.Equals(PressedStyle, other.PressedStyle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (nodeType_ != null) hash ^= NodeType.GetHashCode();
      hash ^= children_.GetHashCode();
      if (eventHandlers_ != null) hash ^= EventHandlers.GetHashCode();
      if (style_ != null) hash ^= Style.GetHashCode();
      if (hoverStyle_ != null) hash ^= HoverStyle.GetHashCode();
      if (pressedStyle_ != null) hash ^= PressedStyle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (nodeType_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NodeType);
      }
      children_.WriteTo(output, _repeated_children_codec);
      if (eventHandlers_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(EventHandlers);
      }
      if (style_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Style);
      }
      if (hoverStyle_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(HoverStyle);
      }
      if (pressedStyle_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(PressedStyle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (nodeType_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NodeType);
      }
      children_.WriteTo(ref output, _repeated_children_codec);
      if (eventHandlers_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(EventHandlers);
      }
      if (style_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Style);
      }
      if (hoverStyle_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(HoverStyle);
      }
      if (pressedStyle_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(PressedStyle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (nodeType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeType);
      }
      size += children_.CalculateSize(_repeated_children_codec);
      if (eventHandlers_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventHandlers);
      }
      if (style_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Style);
      }
      if (hoverStyle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HoverStyle);
      }
      if (pressedStyle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PressedStyle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Node other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.nodeType_ != null) {
        if (nodeType_ == null) {
          NodeType = new global::Spelldawn.Protos.NodeType();
        }
        NodeType.MergeFrom(other.NodeType);
      }
      children_.Add(other.children_);
      if (other.eventHandlers_ != null) {
        if (eventHandlers_ == null) {
          EventHandlers = new global::Spelldawn.Protos.EventHandlers();
        }
        EventHandlers.MergeFrom(other.EventHandlers);
      }
      if (other.style_ != null) {
        if (style_ == null) {
          Style = new global::Spelldawn.Protos.FlexStyle();
        }
        Style.MergeFrom(other.Style);
      }
      if (other.hoverStyle_ != null) {
        if (hoverStyle_ == null) {
          HoverStyle = new global::Spelldawn.Protos.FlexStyle();
        }
        HoverStyle.MergeFrom(other.HoverStyle);
      }
      if (other.pressedStyle_ != null) {
        if (pressedStyle_ == null) {
          PressedStyle = new global::Spelldawn.Protos.FlexStyle();
        }
        PressedStyle.MergeFrom(other.PressedStyle);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (nodeType_ == null) {
              NodeType = new global::Spelldawn.Protos.NodeType();
            }
            input.ReadMessage(NodeType);
            break;
          }
          case 34: {
            children_.AddEntriesFrom(input, _repeated_children_codec);
            break;
          }
          case 42: {
            if (eventHandlers_ == null) {
              EventHandlers = new global::Spelldawn.Protos.EventHandlers();
            }
            input.ReadMessage(EventHandlers);
            break;
          }
          case 50: {
            if (style_ == null) {
              Style = new global::Spelldawn.Protos.FlexStyle();
            }
            input.ReadMessage(Style);
            break;
          }
          case 58: {
            if (hoverStyle_ == null) {
              HoverStyle = new global::Spelldawn.Protos.FlexStyle();
            }
            input.ReadMessage(HoverStyle);
            break;
          }
          case 66: {
            if (pressedStyle_ == null) {
              PressedStyle = new global::Spelldawn.Protos.FlexStyle();
            }
            input.ReadMessage(PressedStyle);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (nodeType_ == null) {
              NodeType = new global::Spelldawn.Protos.NodeType();
            }
            input.ReadMessage(NodeType);
            break;
          }
          case 34: {
            children_.AddEntriesFrom(ref input, _repeated_children_codec);
            break;
          }
          case 42: {
            if (eventHandlers_ == null) {
              EventHandlers = new global::Spelldawn.Protos.EventHandlers();
            }
            input.ReadMessage(EventHandlers);
            break;
          }
          case 50: {
            if (style_ == null) {
              Style = new global::Spelldawn.Protos.FlexStyle();
            }
            input.ReadMessage(Style);
            break;
          }
          case 58: {
            if (hoverStyle_ == null) {
              HoverStyle = new global::Spelldawn.Protos.FlexStyle();
            }
            input.ReadMessage(HoverStyle);
            break;
          }
          case 66: {
            if (pressedStyle_ == null) {
              PressedStyle = new global::Spelldawn.Protos.FlexStyle();
            }
            input.ReadMessage(PressedStyle);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CardId : pb::IMessage<CardId>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CardId> _parser = new pb::MessageParser<CardId>(() => new CardId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardId(CardId other) : this() {
      switch (other.CardIdCase) {
        case CardIdOneofCase.IdentityCard:
          IdentityCard = other.IdentityCard;
          break;
        case CardIdOneofCase.Value:
          Value = other.Value;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardId Clone() {
      return new CardId(this);
    }

    /// <summary>Field number for the "identity_card" field.</summary>
    public const int IdentityCardFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName IdentityCard {
      get { return cardIdCase_ == CardIdOneofCase.IdentityCard ? (global::Spelldawn.Protos.PlayerName) cardId_ : global::Spelldawn.Protos.PlayerName.Unspecified; }
      set {
        cardId_ = value;
        cardIdCase_ = CardIdOneofCase.IdentityCard;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return cardIdCase_ == CardIdOneofCase.Value ? (int) cardId_ : 0; }
      set {
        cardId_ = value;
        cardIdCase_ = CardIdOneofCase.Value;
      }
    }

    private object cardId_;
    /// <summary>Enum of possible cases for the "card_id" oneof.</summary>
    public enum CardIdOneofCase {
      None = 0,
      IdentityCard = 1,
      Value = 2,
    }
    private CardIdOneofCase cardIdCase_ = CardIdOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardIdOneofCase CardIdCase {
      get { return cardIdCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCardId() {
      cardIdCase_ = CardIdOneofCase.None;
      cardId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdentityCard != other.IdentityCard) return false;
      if (Value != other.Value) return false;
      if (CardIdCase != other.CardIdCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cardIdCase_ == CardIdOneofCase.IdentityCard) hash ^= IdentityCard.GetHashCode();
      if (cardIdCase_ == CardIdOneofCase.Value) hash ^= Value.GetHashCode();
      hash ^= (int) cardIdCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (cardIdCase_ == CardIdOneofCase.IdentityCard) {
        output.WriteRawTag(8);
        output.WriteEnum((int) IdentityCard);
      }
      if (cardIdCase_ == CardIdOneofCase.Value) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (cardIdCase_ == CardIdOneofCase.IdentityCard) {
        output.WriteRawTag(8);
        output.WriteEnum((int) IdentityCard);
      }
      if (cardIdCase_ == CardIdOneofCase.Value) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cardIdCase_ == CardIdOneofCase.IdentityCard) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IdentityCard);
      }
      if (cardIdCase_ == CardIdOneofCase.Value) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardId other) {
      if (other == null) {
        return;
      }
      switch (other.CardIdCase) {
        case CardIdOneofCase.IdentityCard:
          IdentityCard = other.IdentityCard;
          break;
        case CardIdOneofCase.Value:
          Value = other.Value;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            cardId_ = input.ReadEnum();
            cardIdCase_ = CardIdOneofCase.IdentityCard;
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            cardId_ = input.ReadEnum();
            cardIdCase_ = CardIdOneofCase.IdentityCard;
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameObjectId : pb::IMessage<GameObjectId>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameObjectId> _parser = new pb::MessageParser<GameObjectId>(() => new GameObjectId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameObjectId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameObjectId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameObjectId(GameObjectId other) : this() {
      switch (other.IdCase) {
        case IdOneofCase.CardId:
          CardId = other.CardId.Clone();
          break;
        case IdOneofCase.Deck:
          Deck = other.Deck;
          break;
        case IdOneofCase.Hand:
          Hand = other.Hand;
          break;
        case IdOneofCase.DiscardPile:
          DiscardPile = other.DiscardPile;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameObjectId Clone() {
      return new GameObjectId(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardId CardId {
      get { return idCase_ == IdOneofCase.CardId ? (global::Spelldawn.Protos.CardId) id_ : null; }
      set {
        id_ = value;
        idCase_ = value == null ? IdOneofCase.None : IdOneofCase.CardId;
      }
    }

    /// <summary>Field number for the "deck" field.</summary>
    public const int DeckFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName Deck {
      get { return idCase_ == IdOneofCase.Deck ? (global::Spelldawn.Protos.PlayerName) id_ : global::Spelldawn.Protos.PlayerName.Unspecified; }
      set {
        id_ = value;
        idCase_ = IdOneofCase.Deck;
      }
    }

    /// <summary>Field number for the "hand" field.</summary>
    public const int HandFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName Hand {
      get { return idCase_ == IdOneofCase.Hand ? (global::Spelldawn.Protos.PlayerName) id_ : global::Spelldawn.Protos.PlayerName.Unspecified; }
      set {
        id_ = value;
        idCase_ = IdOneofCase.Hand;
      }
    }

    /// <summary>Field number for the "discard_pile" field.</summary>
    public const int DiscardPileFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName DiscardPile {
      get { return idCase_ == IdOneofCase.DiscardPile ? (global::Spelldawn.Protos.PlayerName) id_ : global::Spelldawn.Protos.PlayerName.Unspecified; }
      set {
        id_ = value;
        idCase_ = IdOneofCase.DiscardPile;
      }
    }

    private object id_;
    /// <summary>Enum of possible cases for the "id" oneof.</summary>
    public enum IdOneofCase {
      None = 0,
      CardId = 1,
      Deck = 2,
      Hand = 3,
      DiscardPile = 4,
    }
    private IdOneofCase idCase_ = IdOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdOneofCase IdCase {
      get { return idCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      idCase_ = IdOneofCase.None;
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameObjectId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameObjectId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CardId, other.CardId)) return false;
      if (Deck != other.Deck) return false;
      if (Hand != other.Hand) return false;
      if (DiscardPile != other.DiscardPile) return false;
      if (IdCase != other.IdCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (idCase_ == IdOneofCase.CardId) hash ^= CardId.GetHashCode();
      if (idCase_ == IdOneofCase.Deck) hash ^= Deck.GetHashCode();
      if (idCase_ == IdOneofCase.Hand) hash ^= Hand.GetHashCode();
      if (idCase_ == IdOneofCase.DiscardPile) hash ^= DiscardPile.GetHashCode();
      hash ^= (int) idCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (idCase_ == IdOneofCase.CardId) {
        output.WriteRawTag(10);
        output.WriteMessage(CardId);
      }
      if (idCase_ == IdOneofCase.Deck) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Deck);
      }
      if (idCase_ == IdOneofCase.Hand) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Hand);
      }
      if (idCase_ == IdOneofCase.DiscardPile) {
        output.WriteRawTag(32);
        output.WriteEnum((int) DiscardPile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (idCase_ == IdOneofCase.CardId) {
        output.WriteRawTag(10);
        output.WriteMessage(CardId);
      }
      if (idCase_ == IdOneofCase.Deck) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Deck);
      }
      if (idCase_ == IdOneofCase.Hand) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Hand);
      }
      if (idCase_ == IdOneofCase.DiscardPile) {
        output.WriteRawTag(32);
        output.WriteEnum((int) DiscardPile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (idCase_ == IdOneofCase.CardId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardId);
      }
      if (idCase_ == IdOneofCase.Deck) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Deck);
      }
      if (idCase_ == IdOneofCase.Hand) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Hand);
      }
      if (idCase_ == IdOneofCase.DiscardPile) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DiscardPile);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameObjectId other) {
      if (other == null) {
        return;
      }
      switch (other.IdCase) {
        case IdOneofCase.CardId:
          if (CardId == null) {
            CardId = new global::Spelldawn.Protos.CardId();
          }
          CardId.MergeFrom(other.CardId);
          break;
        case IdOneofCase.Deck:
          Deck = other.Deck;
          break;
        case IdOneofCase.Hand:
          Hand = other.Hand;
          break;
        case IdOneofCase.DiscardPile:
          DiscardPile = other.DiscardPile;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Spelldawn.Protos.CardId subBuilder = new global::Spelldawn.Protos.CardId();
            if (idCase_ == IdOneofCase.CardId) {
              subBuilder.MergeFrom(CardId);
            }
            input.ReadMessage(subBuilder);
            CardId = subBuilder;
            break;
          }
          case 16: {
            id_ = input.ReadEnum();
            idCase_ = IdOneofCase.Deck;
            break;
          }
          case 24: {
            id_ = input.ReadEnum();
            idCase_ = IdOneofCase.Hand;
            break;
          }
          case 32: {
            id_ = input.ReadEnum();
            idCase_ = IdOneofCase.DiscardPile;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Spelldawn.Protos.CardId subBuilder = new global::Spelldawn.Protos.CardId();
            if (idCase_ == IdOneofCase.CardId) {
              subBuilder.MergeFrom(CardId);
            }
            input.ReadMessage(subBuilder);
            CardId = subBuilder;
            break;
          }
          case 16: {
            id_ = input.ReadEnum();
            idCase_ = IdOneofCase.Deck;
            break;
          }
          case 24: {
            id_ = input.ReadEnum();
            idCase_ = IdOneofCase.Hand;
            break;
          }
          case 32: {
            id_ = input.ReadEnum();
            idCase_ = IdOneofCase.DiscardPile;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CardIcon : pb::IMessage<CardIcon>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CardIcon> _parser = new pb::MessageParser<CardIcon>(() => new CardIcon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardIcon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardIcon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardIcon(CardIcon other) : this() {
      background_ = other.background_ != null ? other.background_.Clone() : null;
      text_ = other.text_;
      showInArena_ = other.showInArena_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardIcon Clone() {
      return new CardIcon(this);
    }

    /// <summary>Field number for the "background" field.</summary>
    public const int BackgroundFieldNumber = 1;
    private global::Spelldawn.Protos.SpriteAddress background_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.SpriteAddress Background {
      get { return background_; }
      set {
        background_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 2;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "show_in_arena" field.</summary>
    public const int ShowInArenaFieldNumber = 3;
    private bool showInArena_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowInArena {
      get { return showInArena_; }
      set {
        showInArena_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardIcon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardIcon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Background, other.Background)) return false;
      if (Text != other.Text) return false;
      if (ShowInArena != other.ShowInArena) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (background_ != null) hash ^= Background.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (ShowInArena != false) hash ^= ShowInArena.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (background_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Background);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Text);
      }
      if (ShowInArena != false) {
        output.WriteRawTag(24);
        output.WriteBool(ShowInArena);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (background_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Background);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Text);
      }
      if (ShowInArena != false) {
        output.WriteRawTag(24);
        output.WriteBool(ShowInArena);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (background_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Background);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (ShowInArena != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardIcon other) {
      if (other == null) {
        return;
      }
      if (other.background_ != null) {
        if (background_ == null) {
          Background = new global::Spelldawn.Protos.SpriteAddress();
        }
        Background.MergeFrom(other.Background);
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.ShowInArena != false) {
        ShowInArena = other.ShowInArena;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (background_ == null) {
              Background = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(Background);
            break;
          }
          case 18: {
            Text = input.ReadString();
            break;
          }
          case 24: {
            ShowInArena = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (background_ == null) {
              Background = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(Background);
            break;
          }
          case 18: {
            Text = input.ReadString();
            break;
          }
          case 24: {
            ShowInArena = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CardIcons : pb::IMessage<CardIcons>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CardIcons> _parser = new pb::MessageParser<CardIcons>(() => new CardIcons());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardIcons> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardIcons() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardIcons(CardIcons other) : this() {
      topLeftIcon_ = other.topLeftIcon_ != null ? other.topLeftIcon_.Clone() : null;
      topRightIcon_ = other.topRightIcon_ != null ? other.topRightIcon_.Clone() : null;
      bottomRightIcon_ = other.bottomRightIcon_ != null ? other.bottomRightIcon_.Clone() : null;
      bottomLeftIcon_ = other.bottomLeftIcon_ != null ? other.bottomLeftIcon_.Clone() : null;
      centerIcon_ = other.centerIcon_ != null ? other.centerIcon_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardIcons Clone() {
      return new CardIcons(this);
    }

    /// <summary>Field number for the "top_left_icon" field.</summary>
    public const int TopLeftIconFieldNumber = 1;
    private global::Spelldawn.Protos.CardIcon topLeftIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardIcon TopLeftIcon {
      get { return topLeftIcon_; }
      set {
        topLeftIcon_ = value;
      }
    }

    /// <summary>Field number for the "top_right_icon" field.</summary>
    public const int TopRightIconFieldNumber = 2;
    private global::Spelldawn.Protos.CardIcon topRightIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardIcon TopRightIcon {
      get { return topRightIcon_; }
      set {
        topRightIcon_ = value;
      }
    }

    /// <summary>Field number for the "bottom_right_icon" field.</summary>
    public const int BottomRightIconFieldNumber = 3;
    private global::Spelldawn.Protos.CardIcon bottomRightIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardIcon BottomRightIcon {
      get { return bottomRightIcon_; }
      set {
        bottomRightIcon_ = value;
      }
    }

    /// <summary>Field number for the "bottom_left_icon" field.</summary>
    public const int BottomLeftIconFieldNumber = 4;
    private global::Spelldawn.Protos.CardIcon bottomLeftIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardIcon BottomLeftIcon {
      get { return bottomLeftIcon_; }
      set {
        bottomLeftIcon_ = value;
      }
    }

    /// <summary>Field number for the "center_icon" field.</summary>
    public const int CenterIconFieldNumber = 5;
    private global::Spelldawn.Protos.CardIcon centerIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardIcon CenterIcon {
      get { return centerIcon_; }
      set {
        centerIcon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardIcons);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardIcons other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TopLeftIcon, other.TopLeftIcon)) return false;
      if (!object.Equals(TopRightIcon, other.TopRightIcon)) return false;
      if (!object.Equals(BottomRightIcon, other.BottomRightIcon)) return false;
      if (!object.Equals(BottomLeftIcon, other.BottomLeftIcon)) return false;
      if (!object.Equals(CenterIcon, other.CenterIcon)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (topLeftIcon_ != null) hash ^= TopLeftIcon.GetHashCode();
      if (topRightIcon_ != null) hash ^= TopRightIcon.GetHashCode();
      if (bottomRightIcon_ != null) hash ^= BottomRightIcon.GetHashCode();
      if (bottomLeftIcon_ != null) hash ^= BottomLeftIcon.GetHashCode();
      if (centerIcon_ != null) hash ^= CenterIcon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (topLeftIcon_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TopLeftIcon);
      }
      if (topRightIcon_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TopRightIcon);
      }
      if (bottomRightIcon_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BottomRightIcon);
      }
      if (bottomLeftIcon_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BottomLeftIcon);
      }
      if (centerIcon_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CenterIcon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (topLeftIcon_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TopLeftIcon);
      }
      if (topRightIcon_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TopRightIcon);
      }
      if (bottomRightIcon_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BottomRightIcon);
      }
      if (bottomLeftIcon_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BottomLeftIcon);
      }
      if (centerIcon_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CenterIcon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (topLeftIcon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TopLeftIcon);
      }
      if (topRightIcon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TopRightIcon);
      }
      if (bottomRightIcon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BottomRightIcon);
      }
      if (bottomLeftIcon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BottomLeftIcon);
      }
      if (centerIcon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CenterIcon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardIcons other) {
      if (other == null) {
        return;
      }
      if (other.topLeftIcon_ != null) {
        if (topLeftIcon_ == null) {
          TopLeftIcon = new global::Spelldawn.Protos.CardIcon();
        }
        TopLeftIcon.MergeFrom(other.TopLeftIcon);
      }
      if (other.topRightIcon_ != null) {
        if (topRightIcon_ == null) {
          TopRightIcon = new global::Spelldawn.Protos.CardIcon();
        }
        TopRightIcon.MergeFrom(other.TopRightIcon);
      }
      if (other.bottomRightIcon_ != null) {
        if (bottomRightIcon_ == null) {
          BottomRightIcon = new global::Spelldawn.Protos.CardIcon();
        }
        BottomRightIcon.MergeFrom(other.BottomRightIcon);
      }
      if (other.bottomLeftIcon_ != null) {
        if (bottomLeftIcon_ == null) {
          BottomLeftIcon = new global::Spelldawn.Protos.CardIcon();
        }
        BottomLeftIcon.MergeFrom(other.BottomLeftIcon);
      }
      if (other.centerIcon_ != null) {
        if (centerIcon_ == null) {
          CenterIcon = new global::Spelldawn.Protos.CardIcon();
        }
        CenterIcon.MergeFrom(other.CenterIcon);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (topLeftIcon_ == null) {
              TopLeftIcon = new global::Spelldawn.Protos.CardIcon();
            }
            input.ReadMessage(TopLeftIcon);
            break;
          }
          case 18: {
            if (topRightIcon_ == null) {
              TopRightIcon = new global::Spelldawn.Protos.CardIcon();
            }
            input.ReadMessage(TopRightIcon);
            break;
          }
          case 26: {
            if (bottomRightIcon_ == null) {
              BottomRightIcon = new global::Spelldawn.Protos.CardIcon();
            }
            input.ReadMessage(BottomRightIcon);
            break;
          }
          case 34: {
            if (bottomLeftIcon_ == null) {
              BottomLeftIcon = new global::Spelldawn.Protos.CardIcon();
            }
            input.ReadMessage(BottomLeftIcon);
            break;
          }
          case 42: {
            if (centerIcon_ == null) {
              CenterIcon = new global::Spelldawn.Protos.CardIcon();
            }
            input.ReadMessage(CenterIcon);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (topLeftIcon_ == null) {
              TopLeftIcon = new global::Spelldawn.Protos.CardIcon();
            }
            input.ReadMessage(TopLeftIcon);
            break;
          }
          case 18: {
            if (topRightIcon_ == null) {
              TopRightIcon = new global::Spelldawn.Protos.CardIcon();
            }
            input.ReadMessage(TopRightIcon);
            break;
          }
          case 26: {
            if (bottomRightIcon_ == null) {
              BottomRightIcon = new global::Spelldawn.Protos.CardIcon();
            }
            input.ReadMessage(BottomRightIcon);
            break;
          }
          case 34: {
            if (bottomLeftIcon_ == null) {
              BottomLeftIcon = new global::Spelldawn.Protos.CardIcon();
            }
            input.ReadMessage(BottomLeftIcon);
            break;
          }
          case 42: {
            if (centerIcon_ == null) {
              CenterIcon = new global::Spelldawn.Protos.CardIcon();
            }
            input.ReadMessage(CenterIcon);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CardTitle : pb::IMessage<CardTitle>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CardTitle> _parser = new pb::MessageParser<CardTitle>(() => new CardTitle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardTitle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardTitle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardTitle(CardTitle other) : this() {
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardTitle Clone() {
      return new CardTitle(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardTitle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardTitle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardTitle other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RulesText : pb::IMessage<RulesText>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RulesText> _parser = new pb::MessageParser<RulesText>(() => new RulesText());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RulesText> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RulesText() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RulesText(RulesText other) : this() {
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RulesText Clone() {
      return new RulesText(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RulesText);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RulesText other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RulesText other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PickRoom : pb::IMessage<PickRoom>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PickRoom> _parser = new pb::MessageParser<PickRoom>(() => new PickRoom());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PickRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickRoom(PickRoom other) : this() {
      validRooms_ = other.validRooms_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickRoom Clone() {
      return new PickRoom(this);
    }

    /// <summary>Field number for the "valid_rooms" field.</summary>
    public const int ValidRoomsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.RoomId> _repeated_validRooms_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::Spelldawn.Protos.RoomId) x);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.RoomId> validRooms_ = new pbc::RepeatedField<global::Spelldawn.Protos.RoomId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.RoomId> ValidRooms {
      get { return validRooms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PickRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PickRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!validRooms_.Equals(other.validRooms_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= validRooms_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      validRooms_.WriteTo(output, _repeated_validRooms_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      validRooms_.WriteTo(ref output, _repeated_validRooms_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += validRooms_.CalculateSize(_repeated_validRooms_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PickRoom other) {
      if (other == null) {
        return;
      }
      validRooms_.Add(other.validRooms_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18:
          case 16: {
            validRooms_.AddEntriesFrom(input, _repeated_validRooms_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18:
          case 16: {
            validRooms_.AddEntriesFrom(ref input, _repeated_validRooms_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CardTargeting : pb::IMessage<CardTargeting>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CardTargeting> _parser = new pb::MessageParser<CardTargeting>(() => new CardTargeting());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardTargeting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardTargeting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardTargeting(CardTargeting other) : this() {
      switch (other.TargetingCase) {
        case TargetingOneofCase.PickRoom:
          PickRoom = other.PickRoom.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardTargeting Clone() {
      return new CardTargeting(this);
    }

    /// <summary>Field number for the "pick_room" field.</summary>
    public const int PickRoomFieldNumber = 1;
    /// <summary>
    ///* Pick one of these valid rooms. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PickRoom PickRoom {
      get { return targetingCase_ == TargetingOneofCase.PickRoom ? (global::Spelldawn.Protos.PickRoom) targeting_ : null; }
      set {
        targeting_ = value;
        targetingCase_ = value == null ? TargetingOneofCase.None : TargetingOneofCase.PickRoom;
      }
    }

    private object targeting_;
    /// <summary>Enum of possible cases for the "targeting" oneof.</summary>
    public enum TargetingOneofCase {
      None = 0,
      PickRoom = 1,
    }
    private TargetingOneofCase targetingCase_ = TargetingOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetingOneofCase TargetingCase {
      get { return targetingCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargeting() {
      targetingCase_ = TargetingOneofCase.None;
      targeting_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardTargeting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardTargeting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PickRoom, other.PickRoom)) return false;
      if (TargetingCase != other.TargetingCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (targetingCase_ == TargetingOneofCase.PickRoom) hash ^= PickRoom.GetHashCode();
      hash ^= (int) targetingCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (targetingCase_ == TargetingOneofCase.PickRoom) {
        output.WriteRawTag(10);
        output.WriteMessage(PickRoom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (targetingCase_ == TargetingOneofCase.PickRoom) {
        output.WriteRawTag(10);
        output.WriteMessage(PickRoom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (targetingCase_ == TargetingOneofCase.PickRoom) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PickRoom);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardTargeting other) {
      if (other == null) {
        return;
      }
      switch (other.TargetingCase) {
        case TargetingOneofCase.PickRoom:
          if (PickRoom == null) {
            PickRoom = new global::Spelldawn.Protos.PickRoom();
          }
          PickRoom.MergeFrom(other.PickRoom);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Spelldawn.Protos.PickRoom subBuilder = new global::Spelldawn.Protos.PickRoom();
            if (targetingCase_ == TargetingOneofCase.PickRoom) {
              subBuilder.MergeFrom(PickRoom);
            }
            input.ReadMessage(subBuilder);
            PickRoom = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Spelldawn.Protos.PickRoom subBuilder = new global::Spelldawn.Protos.PickRoom();
            if (targetingCase_ == TargetingOneofCase.PickRoom) {
              subBuilder.MergeFrom(PickRoom);
            }
            input.ReadMessage(subBuilder);
            PickRoom = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CardCost : pb::IMessage<CardCost>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CardCost> _parser = new pb::MessageParser<CardCost>(() => new CardCost());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardCost> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardCost() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardCost(CardCost other) : this() {
      manaCost_ = other.manaCost_;
      actionCost_ = other.actionCost_;
      canPlay_ = other.canPlay_;
      canPlayAlgorithm_ = other.canPlayAlgorithm_;
      spendCostAlgorithm_ = other.spendCostAlgorithm_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardCost Clone() {
      return new CardCost(this);
    }

    /// <summary>Field number for the "mana_cost" field.</summary>
    public const int ManaCostFieldNumber = 1;
    private int manaCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ManaCost {
      get { return manaCost_; }
      set {
        manaCost_ = value;
      }
    }

    /// <summary>Field number for the "action_cost" field.</summary>
    public const int ActionCostFieldNumber = 2;
    private int actionCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionCost {
      get { return actionCost_; }
      set {
        actionCost_ = value;
      }
    }

    /// <summary>Field number for the "can_play" field.</summary>
    public const int CanPlayFieldNumber = 3;
    private bool canPlay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanPlay {
      get { return canPlay_; }
      set {
        canPlay_ = value;
      }
    }

    /// <summary>Field number for the "can_play_algorithm" field.</summary>
    public const int CanPlayAlgorithmFieldNumber = 4;
    private global::Spelldawn.Protos.CanPlayAlgorithm canPlayAlgorithm_ = global::Spelldawn.Protos.CanPlayAlgorithm.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CanPlayAlgorithm CanPlayAlgorithm {
      get { return canPlayAlgorithm_; }
      set {
        canPlayAlgorithm_ = value;
      }
    }

    /// <summary>Field number for the "spend_cost_algorithm" field.</summary>
    public const int SpendCostAlgorithmFieldNumber = 5;
    private global::Spelldawn.Protos.SpendCostAlgorithm spendCostAlgorithm_ = global::Spelldawn.Protos.SpendCostAlgorithm.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.SpendCostAlgorithm SpendCostAlgorithm {
      get { return spendCostAlgorithm_; }
      set {
        spendCostAlgorithm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardCost);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardCost other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ManaCost != other.ManaCost) return false;
      if (ActionCost != other.ActionCost) return false;
      if (CanPlay != other.CanPlay) return false;
      if (CanPlayAlgorithm != other.CanPlayAlgorithm) return false;
      if (SpendCostAlgorithm != other.SpendCostAlgorithm) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ManaCost != 0) hash ^= ManaCost.GetHashCode();
      if (ActionCost != 0) hash ^= ActionCost.GetHashCode();
      if (CanPlay != false) hash ^= CanPlay.GetHashCode();
      if (CanPlayAlgorithm != global::Spelldawn.Protos.CanPlayAlgorithm.Unspecified) hash ^= CanPlayAlgorithm.GetHashCode();
      if (SpendCostAlgorithm != global::Spelldawn.Protos.SpendCostAlgorithm.Unspecified) hash ^= SpendCostAlgorithm.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ManaCost != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ManaCost);
      }
      if (ActionCost != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActionCost);
      }
      if (CanPlay != false) {
        output.WriteRawTag(24);
        output.WriteBool(CanPlay);
      }
      if (CanPlayAlgorithm != global::Spelldawn.Protos.CanPlayAlgorithm.Unspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) CanPlayAlgorithm);
      }
      if (SpendCostAlgorithm != global::Spelldawn.Protos.SpendCostAlgorithm.Unspecified) {
        output.WriteRawTag(40);
        output.WriteEnum((int) SpendCostAlgorithm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ManaCost != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ManaCost);
      }
      if (ActionCost != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActionCost);
      }
      if (CanPlay != false) {
        output.WriteRawTag(24);
        output.WriteBool(CanPlay);
      }
      if (CanPlayAlgorithm != global::Spelldawn.Protos.CanPlayAlgorithm.Unspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) CanPlayAlgorithm);
      }
      if (SpendCostAlgorithm != global::Spelldawn.Protos.SpendCostAlgorithm.Unspecified) {
        output.WriteRawTag(40);
        output.WriteEnum((int) SpendCostAlgorithm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ManaCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ManaCost);
      }
      if (ActionCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionCost);
      }
      if (CanPlay != false) {
        size += 1 + 1;
      }
      if (CanPlayAlgorithm != global::Spelldawn.Protos.CanPlayAlgorithm.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanPlayAlgorithm);
      }
      if (SpendCostAlgorithm != global::Spelldawn.Protos.SpendCostAlgorithm.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SpendCostAlgorithm);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardCost other) {
      if (other == null) {
        return;
      }
      if (other.ManaCost != 0) {
        ManaCost = other.ManaCost;
      }
      if (other.ActionCost != 0) {
        ActionCost = other.ActionCost;
      }
      if (other.CanPlay != false) {
        CanPlay = other.CanPlay;
      }
      if (other.CanPlayAlgorithm != global::Spelldawn.Protos.CanPlayAlgorithm.Unspecified) {
        CanPlayAlgorithm = other.CanPlayAlgorithm;
      }
      if (other.SpendCostAlgorithm != global::Spelldawn.Protos.SpendCostAlgorithm.Unspecified) {
        SpendCostAlgorithm = other.SpendCostAlgorithm;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ManaCost = input.ReadInt32();
            break;
          }
          case 16: {
            ActionCost = input.ReadInt32();
            break;
          }
          case 24: {
            CanPlay = input.ReadBool();
            break;
          }
          case 32: {
            CanPlayAlgorithm = (global::Spelldawn.Protos.CanPlayAlgorithm) input.ReadEnum();
            break;
          }
          case 40: {
            SpendCostAlgorithm = (global::Spelldawn.Protos.SpendCostAlgorithm) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ManaCost = input.ReadInt32();
            break;
          }
          case 16: {
            ActionCost = input.ReadInt32();
            break;
          }
          case 24: {
            CanPlay = input.ReadBool();
            break;
          }
          case 32: {
            CanPlayAlgorithm = (global::Spelldawn.Protos.CanPlayAlgorithm) input.ReadEnum();
            break;
          }
          case 40: {
            SpendCostAlgorithm = (global::Spelldawn.Protos.SpendCostAlgorithm) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionOffscreen : pb::IMessage<ObjectPositionOffscreen>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionOffscreen> _parser = new pb::MessageParser<ObjectPositionOffscreen>(() => new ObjectPositionOffscreen());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionOffscreen> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionOffscreen() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionOffscreen(ObjectPositionOffscreen other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionOffscreen Clone() {
      return new ObjectPositionOffscreen(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionOffscreen);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionOffscreen other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionOffscreen other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionRoom : pb::IMessage<ObjectPositionRoom>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionRoom> _parser = new pb::MessageParser<ObjectPositionRoom>(() => new ObjectPositionRoom());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionRoom(ObjectPositionRoom other) : this() {
      roomId_ = other.roomId_;
      roomLocation_ = other.roomLocation_;
      Index = other.Index;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionRoom Clone() {
      return new ObjectPositionRoom(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private global::Spelldawn.Protos.RoomId roomId_ = global::Spelldawn.Protos.RoomId.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RoomId RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "room_location" field.</summary>
    public const int RoomLocationFieldNumber = 2;
    private global::Spelldawn.Protos.RoomLocation roomLocation_ = global::Spelldawn.Protos.RoomLocation.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RoomLocation RoomLocation {
      get { return roomLocation_; }
      set {
        roomLocation_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private static readonly pb::FieldCodec<int?> _single_index_codec = pb::FieldCodec.ForStructWrapper<int>(26);
    private int? index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (RoomLocation != other.RoomLocation) return false;
      if (Index != other.Index) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != global::Spelldawn.Protos.RoomId.Unspecified) hash ^= RoomId.GetHashCode();
      if (RoomLocation != global::Spelldawn.Protos.RoomLocation.Unspecified) hash ^= RoomLocation.GetHashCode();
      if (index_ != null) hash ^= Index.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RoomId != global::Spelldawn.Protos.RoomId.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RoomId);
      }
      if (RoomLocation != global::Spelldawn.Protos.RoomLocation.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RoomLocation);
      }
      if (index_ != null) {
        _single_index_codec.WriteTagAndValue(output, Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RoomId != global::Spelldawn.Protos.RoomId.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RoomId);
      }
      if (RoomLocation != global::Spelldawn.Protos.RoomLocation.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RoomLocation);
      }
      if (index_ != null) {
        _single_index_codec.WriteTagAndValue(ref output, Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != global::Spelldawn.Protos.RoomId.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomId);
      }
      if (RoomLocation != global::Spelldawn.Protos.RoomLocation.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomLocation);
      }
      if (index_ != null) {
        size += _single_index_codec.CalculateSizeWithTag(Index);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionRoom other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != global::Spelldawn.Protos.RoomId.Unspecified) {
        RoomId = other.RoomId;
      }
      if (other.RoomLocation != global::Spelldawn.Protos.RoomLocation.Unspecified) {
        RoomLocation = other.RoomLocation;
      }
      if (other.index_ != null) {
        if (index_ == null || other.Index != 0) {
          Index = other.Index;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = (global::Spelldawn.Protos.RoomId) input.ReadEnum();
            break;
          }
          case 16: {
            RoomLocation = (global::Spelldawn.Protos.RoomLocation) input.ReadEnum();
            break;
          }
          case 26: {
            int? value = _single_index_codec.Read(input);
            if (index_ == null || value != 0) {
              Index = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RoomId = (global::Spelldawn.Protos.RoomId) input.ReadEnum();
            break;
          }
          case 16: {
            RoomLocation = (global::Spelldawn.Protos.RoomLocation) input.ReadEnum();
            break;
          }
          case 26: {
            int? value = _single_index_codec.Read(ref input);
            if (index_ == null || value != 0) {
              Index = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionItem : pb::IMessage<ObjectPositionItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionItem> _parser = new pb::MessageParser<ObjectPositionItem>(() => new ObjectPositionItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionItem(ObjectPositionItem other) : this() {
      itemLocation_ = other.itemLocation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionItem Clone() {
      return new ObjectPositionItem(this);
    }

    /// <summary>Field number for the "item_location" field.</summary>
    public const int ItemLocationFieldNumber = 1;
    private global::Spelldawn.Protos.ItemLocation itemLocation_ = global::Spelldawn.Protos.ItemLocation.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ItemLocation ItemLocation {
      get { return itemLocation_; }
      set {
        itemLocation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemLocation != other.ItemLocation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemLocation != global::Spelldawn.Protos.ItemLocation.Unspecified) hash ^= ItemLocation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ItemLocation != global::Spelldawn.Protos.ItemLocation.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ItemLocation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ItemLocation != global::Spelldawn.Protos.ItemLocation.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ItemLocation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemLocation != global::Spelldawn.Protos.ItemLocation.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ItemLocation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionItem other) {
      if (other == null) {
        return;
      }
      if (other.ItemLocation != global::Spelldawn.Protos.ItemLocation.Unspecified) {
        ItemLocation = other.ItemLocation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemLocation = (global::Spelldawn.Protos.ItemLocation) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ItemLocation = (global::Spelldawn.Protos.ItemLocation) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionStaging : pb::IMessage<ObjectPositionStaging>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionStaging> _parser = new pb::MessageParser<ObjectPositionStaging>(() => new ObjectPositionStaging());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionStaging> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionStaging() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionStaging(ObjectPositionStaging other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionStaging Clone() {
      return new ObjectPositionStaging(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionStaging);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionStaging other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionStaging other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionHand : pb::IMessage<ObjectPositionHand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionHand> _parser = new pb::MessageParser<ObjectPositionHand>(() => new ObjectPositionHand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionHand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionHand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionHand(ObjectPositionHand other) : this() {
      owner_ = other.owner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionHand Clone() {
      return new ObjectPositionHand(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::Spelldawn.Protos.PlayerName owner_ = global::Spelldawn.Protos.PlayerName.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionHand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionHand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Owner != other.Owner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionHand other) {
      if (other == null) {
        return;
      }
      if (other.Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        Owner = other.Owner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionHandContainer : pb::IMessage<ObjectPositionHandContainer>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionHandContainer> _parser = new pb::MessageParser<ObjectPositionHandContainer>(() => new ObjectPositionHandContainer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionHandContainer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionHandContainer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionHandContainer(ObjectPositionHandContainer other) : this() {
      owner_ = other.owner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionHandContainer Clone() {
      return new ObjectPositionHandContainer(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::Spelldawn.Protos.PlayerName owner_ = global::Spelldawn.Protos.PlayerName.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionHandContainer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionHandContainer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Owner != other.Owner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionHandContainer other) {
      if (other == null) {
        return;
      }
      if (other.Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        Owner = other.Owner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionDeck : pb::IMessage<ObjectPositionDeck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionDeck> _parser = new pb::MessageParser<ObjectPositionDeck>(() => new ObjectPositionDeck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionDeck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionDeck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionDeck(ObjectPositionDeck other) : this() {
      owner_ = other.owner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionDeck Clone() {
      return new ObjectPositionDeck(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::Spelldawn.Protos.PlayerName owner_ = global::Spelldawn.Protos.PlayerName.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionDeck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionDeck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Owner != other.Owner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionDeck other) {
      if (other == null) {
        return;
      }
      if (other.Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        Owner = other.Owner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionDeckContainer : pb::IMessage<ObjectPositionDeckContainer>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionDeckContainer> _parser = new pb::MessageParser<ObjectPositionDeckContainer>(() => new ObjectPositionDeckContainer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionDeckContainer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionDeckContainer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionDeckContainer(ObjectPositionDeckContainer other) : this() {
      owner_ = other.owner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionDeckContainer Clone() {
      return new ObjectPositionDeckContainer(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::Spelldawn.Protos.PlayerName owner_ = global::Spelldawn.Protos.PlayerName.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionDeckContainer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionDeckContainer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Owner != other.Owner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionDeckContainer other) {
      if (other == null) {
        return;
      }
      if (other.Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        Owner = other.Owner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionDiscard : pb::IMessage<ObjectPositionDiscard>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionDiscard> _parser = new pb::MessageParser<ObjectPositionDiscard>(() => new ObjectPositionDiscard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionDiscard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionDiscard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionDiscard(ObjectPositionDiscard other) : this() {
      owner_ = other.owner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionDiscard Clone() {
      return new ObjectPositionDiscard(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::Spelldawn.Protos.PlayerName owner_ = global::Spelldawn.Protos.PlayerName.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionDiscard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionDiscard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Owner != other.Owner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionDiscard other) {
      if (other == null) {
        return;
      }
      if (other.Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        Owner = other.Owner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionDiscardContainer : pb::IMessage<ObjectPositionDiscardContainer>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionDiscardContainer> _parser = new pb::MessageParser<ObjectPositionDiscardContainer>(() => new ObjectPositionDiscardContainer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionDiscardContainer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionDiscardContainer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionDiscardContainer(ObjectPositionDiscardContainer other) : this() {
      owner_ = other.owner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionDiscardContainer Clone() {
      return new ObjectPositionDiscardContainer(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::Spelldawn.Protos.PlayerName owner_ = global::Spelldawn.Protos.PlayerName.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionDiscardContainer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionDiscardContainer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Owner != other.Owner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionDiscardContainer other) {
      if (other == null) {
        return;
      }
      if (other.Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        Owner = other.Owner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionScored : pb::IMessage<ObjectPositionScored>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionScored> _parser = new pb::MessageParser<ObjectPositionScored>(() => new ObjectPositionScored());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionScored> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionScored() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionScored(ObjectPositionScored other) : this() {
      owner_ = other.owner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionScored Clone() {
      return new ObjectPositionScored(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::Spelldawn.Protos.PlayerName owner_ = global::Spelldawn.Protos.PlayerName.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionScored);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionScored other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Owner != other.Owner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionScored other) {
      if (other == null) {
        return;
      }
      if (other.Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        Owner = other.Owner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionRaid : pb::IMessage<ObjectPositionRaid>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionRaid> _parser = new pb::MessageParser<ObjectPositionRaid>(() => new ObjectPositionRaid());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionRaid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionRaid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionRaid(ObjectPositionRaid other) : this() {
      roomLocation_ = other.roomLocation_;
      Index = other.Index;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionRaid Clone() {
      return new ObjectPositionRaid(this);
    }

    /// <summary>Field number for the "room_location" field.</summary>
    public const int RoomLocationFieldNumber = 1;
    private global::Spelldawn.Protos.RoomLocation roomLocation_ = global::Spelldawn.Protos.RoomLocation.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RoomLocation RoomLocation {
      get { return roomLocation_; }
      set {
        roomLocation_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private static readonly pb::FieldCodec<int?> _single_index_codec = pb::FieldCodec.ForStructWrapper<int>(18);
    private int? index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionRaid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionRaid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomLocation != other.RoomLocation) return false;
      if (Index != other.Index) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomLocation != global::Spelldawn.Protos.RoomLocation.Unspecified) hash ^= RoomLocation.GetHashCode();
      if (index_ != null) hash ^= Index.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RoomLocation != global::Spelldawn.Protos.RoomLocation.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RoomLocation);
      }
      if (index_ != null) {
        _single_index_codec.WriteTagAndValue(output, Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RoomLocation != global::Spelldawn.Protos.RoomLocation.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RoomLocation);
      }
      if (index_ != null) {
        _single_index_codec.WriteTagAndValue(ref output, Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomLocation != global::Spelldawn.Protos.RoomLocation.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomLocation);
      }
      if (index_ != null) {
        size += _single_index_codec.CalculateSizeWithTag(Index);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionRaid other) {
      if (other == null) {
        return;
      }
      if (other.RoomLocation != global::Spelldawn.Protos.RoomLocation.Unspecified) {
        RoomLocation = other.RoomLocation;
      }
      if (other.index_ != null) {
        if (index_ == null || other.Index != 0) {
          Index = other.Index;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomLocation = (global::Spelldawn.Protos.RoomLocation) input.ReadEnum();
            break;
          }
          case 18: {
            int? value = _single_index_codec.Read(input);
            if (index_ == null || value != 0) {
              Index = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RoomLocation = (global::Spelldawn.Protos.RoomLocation) input.ReadEnum();
            break;
          }
          case 18: {
            int? value = _single_index_codec.Read(ref input);
            if (index_ == null || value != 0) {
              Index = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionBrowser : pb::IMessage<ObjectPositionBrowser>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionBrowser> _parser = new pb::MessageParser<ObjectPositionBrowser>(() => new ObjectPositionBrowser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionBrowser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionBrowser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionBrowser(ObjectPositionBrowser other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionBrowser Clone() {
      return new ObjectPositionBrowser(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionBrowser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionBrowser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionBrowser other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPositionIdentityContainer : pb::IMessage<ObjectPositionIdentityContainer>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPositionIdentityContainer> _parser = new pb::MessageParser<ObjectPositionIdentityContainer>(() => new ObjectPositionIdentityContainer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPositionIdentityContainer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionIdentityContainer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionIdentityContainer(ObjectPositionIdentityContainer other) : this() {
      owner_ = other.owner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPositionIdentityContainer Clone() {
      return new ObjectPositionIdentityContainer(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::Spelldawn.Protos.PlayerName owner_ = global::Spelldawn.Protos.PlayerName.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPositionIdentityContainer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPositionIdentityContainer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Owner != other.Owner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPositionIdentityContainer other) {
      if (other == null) {
        return;
      }
      if (other.Owner != global::Spelldawn.Protos.PlayerName.Unspecified) {
        Owner = other.Owner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Owner = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectPosition : pb::IMessage<ObjectPosition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectPosition> _parser = new pb::MessageParser<ObjectPosition>(() => new ObjectPosition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPosition(ObjectPosition other) : this() {
      switch (other.PositionCase) {
        case PositionOneofCase.Offscreen:
          Offscreen = other.Offscreen.Clone();
          break;
        case PositionOneofCase.Room:
          Room = other.Room.Clone();
          break;
        case PositionOneofCase.Item:
          Item = other.Item.Clone();
          break;
        case PositionOneofCase.Staging:
          Staging = other.Staging.Clone();
          break;
        case PositionOneofCase.Hand:
          Hand = other.Hand.Clone();
          break;
        case PositionOneofCase.HandContainer:
          HandContainer = other.HandContainer.Clone();
          break;
        case PositionOneofCase.Deck:
          Deck = other.Deck.Clone();
          break;
        case PositionOneofCase.DeckContainer:
          DeckContainer = other.DeckContainer.Clone();
          break;
        case PositionOneofCase.Discard:
          Discard = other.Discard.Clone();
          break;
        case PositionOneofCase.DiscardContainer:
          DiscardContainer = other.DiscardContainer.Clone();
          break;
        case PositionOneofCase.Scored:
          Scored = other.Scored.Clone();
          break;
        case PositionOneofCase.Raid:
          Raid = other.Raid.Clone();
          break;
        case PositionOneofCase.Browser:
          Browser = other.Browser.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPosition Clone() {
      return new ObjectPosition(this);
    }

    /// <summary>Field number for the "offscreen" field.</summary>
    public const int OffscreenFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPositionOffscreen Offscreen {
      get { return positionCase_ == PositionOneofCase.Offscreen ? (global::Spelldawn.Protos.ObjectPositionOffscreen) position_ : null; }
      set {
        position_ = value;
        positionCase_ = value == null ? PositionOneofCase.None : PositionOneofCase.Offscreen;
      }
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPositionRoom Room {
      get { return positionCase_ == PositionOneofCase.Room ? (global::Spelldawn.Protos.ObjectPositionRoom) position_ : null; }
      set {
        position_ = value;
        positionCase_ = value == null ? PositionOneofCase.None : PositionOneofCase.Room;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPositionItem Item {
      get { return positionCase_ == PositionOneofCase.Item ? (global::Spelldawn.Protos.ObjectPositionItem) position_ : null; }
      set {
        position_ = value;
        positionCase_ = value == null ? PositionOneofCase.None : PositionOneofCase.Item;
      }
    }

    /// <summary>Field number for the "staging" field.</summary>
    public const int StagingFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPositionStaging Staging {
      get { return positionCase_ == PositionOneofCase.Staging ? (global::Spelldawn.Protos.ObjectPositionStaging) position_ : null; }
      set {
        position_ = value;
        positionCase_ = value == null ? PositionOneofCase.None : PositionOneofCase.Staging;
      }
    }

    /// <summary>Field number for the "hand" field.</summary>
    public const int HandFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPositionHand Hand {
      get { return positionCase_ == PositionOneofCase.Hand ? (global::Spelldawn.Protos.ObjectPositionHand) position_ : null; }
      set {
        position_ = value;
        positionCase_ = value == null ? PositionOneofCase.None : PositionOneofCase.Hand;
      }
    }

    /// <summary>Field number for the "hand_container" field.</summary>
    public const int HandContainerFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPositionHandContainer HandContainer {
      get { return positionCase_ == PositionOneofCase.HandContainer ? (global::Spelldawn.Protos.ObjectPositionHandContainer) position_ : null; }
      set {
        position_ = value;
        positionCase_ = value == null ? PositionOneofCase.None : PositionOneofCase.HandContainer;
      }
    }

    /// <summary>Field number for the "deck" field.</summary>
    public const int DeckFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPositionDeck Deck {
      get { return positionCase_ == PositionOneofCase.Deck ? (global::Spelldawn.Protos.ObjectPositionDeck) position_ : null; }
      set {
        position_ = value;
        positionCase_ = value == null ? PositionOneofCase.None : PositionOneofCase.Deck;
      }
    }

    /// <summary>Field number for the "deck_container" field.</summary>
    public const int DeckContainerFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPositionDeckContainer DeckContainer {
      get { return positionCase_ == PositionOneofCase.DeckContainer ? (global::Spelldawn.Protos.ObjectPositionDeckContainer) position_ : null; }
      set {
        position_ = value;
        positionCase_ = value == null ? PositionOneofCase.None : PositionOneofCase.DeckContainer;
      }
    }

    /// <summary>Field number for the "discard" field.</summary>
    public const int DiscardFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPositionDiscard Discard {
      get { return positionCase_ == PositionOneofCase.Discard ? (global::Spelldawn.Protos.ObjectPositionDiscard) position_ : null; }
      set {
        position_ = value;
        positionCase_ = value == null ? PositionOneofCase.None : PositionOneofCase.Discard;
      }
    }

    /// <summary>Field number for the "discard_container" field.</summary>
    public const int DiscardContainerFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPositionDiscardContainer DiscardContainer {
      get { return positionCase_ == PositionOneofCase.DiscardContainer ? (global::Spelldawn.Protos.ObjectPositionDiscardContainer) position_ : null; }
      set {
        position_ = value;
        positionCase_ = value == null ? PositionOneofCase.None : PositionOneofCase.DiscardContainer;
      }
    }

    /// <summary>Field number for the "scored" field.</summary>
    public const int ScoredFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPositionScored Scored {
      get { return positionCase_ == PositionOneofCase.Scored ? (global::Spelldawn.Protos.ObjectPositionScored) position_ : null; }
      set {
        position_ = value;
        positionCase_ = value == null ? PositionOneofCase.None : PositionOneofCase.Scored;
      }
    }

    /// <summary>Field number for the "raid" field.</summary>
    public const int RaidFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPositionRaid Raid {
      get { return positionCase_ == PositionOneofCase.Raid ? (global::Spelldawn.Protos.ObjectPositionRaid) position_ : null; }
      set {
        position_ = value;
        positionCase_ = value == null ? PositionOneofCase.None : PositionOneofCase.Raid;
      }
    }

    /// <summary>Field number for the "browser" field.</summary>
    public const int BrowserFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPositionBrowser Browser {
      get { return positionCase_ == PositionOneofCase.Browser ? (global::Spelldawn.Protos.ObjectPositionBrowser) position_ : null; }
      set {
        position_ = value;
        positionCase_ = value == null ? PositionOneofCase.None : PositionOneofCase.Browser;
      }
    }

    private object position_;
    /// <summary>Enum of possible cases for the "position" oneof.</summary>
    public enum PositionOneofCase {
      None = 0,
      Offscreen = 1,
      Room = 2,
      Item = 3,
      Staging = 4,
      Hand = 5,
      HandContainer = 6,
      Deck = 7,
      DeckContainer = 8,
      Discard = 9,
      DiscardContainer = 10,
      Scored = 11,
      Raid = 12,
      Browser = 13,
    }
    private PositionOneofCase positionCase_ = PositionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionOneofCase PositionCase {
      get { return positionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPosition() {
      positionCase_ = PositionOneofCase.None;
      position_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Offscreen, other.Offscreen)) return false;
      if (!object.Equals(Room, other.Room)) return false;
      if (!object.Equals(Item, other.Item)) return false;
      if (!object.Equals(Staging, other.Staging)) return false;
      if (!object.Equals(Hand, other.Hand)) return false;
      if (!object.Equals(HandContainer, other.HandContainer)) return false;
      if (!object.Equals(Deck, other.Deck)) return false;
      if (!object.Equals(DeckContainer, other.DeckContainer)) return false;
      if (!object.Equals(Discard, other.Discard)) return false;
      if (!object.Equals(DiscardContainer, other.DiscardContainer)) return false;
      if (!object.Equals(Scored, other.Scored)) return false;
      if (!object.Equals(Raid, other.Raid)) return false;
      if (!object.Equals(Browser, other.Browser)) return false;
      if (PositionCase != other.PositionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (positionCase_ == PositionOneofCase.Offscreen) hash ^= Offscreen.GetHashCode();
      if (positionCase_ == PositionOneofCase.Room) hash ^= Room.GetHashCode();
      if (positionCase_ == PositionOneofCase.Item) hash ^= Item.GetHashCode();
      if (positionCase_ == PositionOneofCase.Staging) hash ^= Staging.GetHashCode();
      if (positionCase_ == PositionOneofCase.Hand) hash ^= Hand.GetHashCode();
      if (positionCase_ == PositionOneofCase.HandContainer) hash ^= HandContainer.GetHashCode();
      if (positionCase_ == PositionOneofCase.Deck) hash ^= Deck.GetHashCode();
      if (positionCase_ == PositionOneofCase.DeckContainer) hash ^= DeckContainer.GetHashCode();
      if (positionCase_ == PositionOneofCase.Discard) hash ^= Discard.GetHashCode();
      if (positionCase_ == PositionOneofCase.DiscardContainer) hash ^= DiscardContainer.GetHashCode();
      if (positionCase_ == PositionOneofCase.Scored) hash ^= Scored.GetHashCode();
      if (positionCase_ == PositionOneofCase.Raid) hash ^= Raid.GetHashCode();
      if (positionCase_ == PositionOneofCase.Browser) hash ^= Browser.GetHashCode();
      hash ^= (int) positionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (positionCase_ == PositionOneofCase.Offscreen) {
        output.WriteRawTag(10);
        output.WriteMessage(Offscreen);
      }
      if (positionCase_ == PositionOneofCase.Room) {
        output.WriteRawTag(18);
        output.WriteMessage(Room);
      }
      if (positionCase_ == PositionOneofCase.Item) {
        output.WriteRawTag(26);
        output.WriteMessage(Item);
      }
      if (positionCase_ == PositionOneofCase.Staging) {
        output.WriteRawTag(34);
        output.WriteMessage(Staging);
      }
      if (positionCase_ == PositionOneofCase.Hand) {
        output.WriteRawTag(42);
        output.WriteMessage(Hand);
      }
      if (positionCase_ == PositionOneofCase.HandContainer) {
        output.WriteRawTag(50);
        output.WriteMessage(HandContainer);
      }
      if (positionCase_ == PositionOneofCase.Deck) {
        output.WriteRawTag(58);
        output.WriteMessage(Deck);
      }
      if (positionCase_ == PositionOneofCase.DeckContainer) {
        output.WriteRawTag(66);
        output.WriteMessage(DeckContainer);
      }
      if (positionCase_ == PositionOneofCase.Discard) {
        output.WriteRawTag(74);
        output.WriteMessage(Discard);
      }
      if (positionCase_ == PositionOneofCase.DiscardContainer) {
        output.WriteRawTag(82);
        output.WriteMessage(DiscardContainer);
      }
      if (positionCase_ == PositionOneofCase.Scored) {
        output.WriteRawTag(90);
        output.WriteMessage(Scored);
      }
      if (positionCase_ == PositionOneofCase.Raid) {
        output.WriteRawTag(98);
        output.WriteMessage(Raid);
      }
      if (positionCase_ == PositionOneofCase.Browser) {
        output.WriteRawTag(106);
        output.WriteMessage(Browser);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (positionCase_ == PositionOneofCase.Offscreen) {
        output.WriteRawTag(10);
        output.WriteMessage(Offscreen);
      }
      if (positionCase_ == PositionOneofCase.Room) {
        output.WriteRawTag(18);
        output.WriteMessage(Room);
      }
      if (positionCase_ == PositionOneofCase.Item) {
        output.WriteRawTag(26);
        output.WriteMessage(Item);
      }
      if (positionCase_ == PositionOneofCase.Staging) {
        output.WriteRawTag(34);
        output.WriteMessage(Staging);
      }
      if (positionCase_ == PositionOneofCase.Hand) {
        output.WriteRawTag(42);
        output.WriteMessage(Hand);
      }
      if (positionCase_ == PositionOneofCase.HandContainer) {
        output.WriteRawTag(50);
        output.WriteMessage(HandContainer);
      }
      if (positionCase_ == PositionOneofCase.Deck) {
        output.WriteRawTag(58);
        output.WriteMessage(Deck);
      }
      if (positionCase_ == PositionOneofCase.DeckContainer) {
        output.WriteRawTag(66);
        output.WriteMessage(DeckContainer);
      }
      if (positionCase_ == PositionOneofCase.Discard) {
        output.WriteRawTag(74);
        output.WriteMessage(Discard);
      }
      if (positionCase_ == PositionOneofCase.DiscardContainer) {
        output.WriteRawTag(82);
        output.WriteMessage(DiscardContainer);
      }
      if (positionCase_ == PositionOneofCase.Scored) {
        output.WriteRawTag(90);
        output.WriteMessage(Scored);
      }
      if (positionCase_ == PositionOneofCase.Raid) {
        output.WriteRawTag(98);
        output.WriteMessage(Raid);
      }
      if (positionCase_ == PositionOneofCase.Browser) {
        output.WriteRawTag(106);
        output.WriteMessage(Browser);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (positionCase_ == PositionOneofCase.Offscreen) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offscreen);
      }
      if (positionCase_ == PositionOneofCase.Room) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
      }
      if (positionCase_ == PositionOneofCase.Item) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (positionCase_ == PositionOneofCase.Staging) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Staging);
      }
      if (positionCase_ == PositionOneofCase.Hand) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hand);
      }
      if (positionCase_ == PositionOneofCase.HandContainer) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HandContainer);
      }
      if (positionCase_ == PositionOneofCase.Deck) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deck);
      }
      if (positionCase_ == PositionOneofCase.DeckContainer) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeckContainer);
      }
      if (positionCase_ == PositionOneofCase.Discard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Discard);
      }
      if (positionCase_ == PositionOneofCase.DiscardContainer) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiscardContainer);
      }
      if (positionCase_ == PositionOneofCase.Scored) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scored);
      }
      if (positionCase_ == PositionOneofCase.Raid) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Raid);
      }
      if (positionCase_ == PositionOneofCase.Browser) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Browser);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectPosition other) {
      if (other == null) {
        return;
      }
      switch (other.PositionCase) {
        case PositionOneofCase.Offscreen:
          if (Offscreen == null) {
            Offscreen = new global::Spelldawn.Protos.ObjectPositionOffscreen();
          }
          Offscreen.MergeFrom(other.Offscreen);
          break;
        case PositionOneofCase.Room:
          if (Room == null) {
            Room = new global::Spelldawn.Protos.ObjectPositionRoom();
          }
          Room.MergeFrom(other.Room);
          break;
        case PositionOneofCase.Item:
          if (Item == null) {
            Item = new global::Spelldawn.Protos.ObjectPositionItem();
          }
          Item.MergeFrom(other.Item);
          break;
        case PositionOneofCase.Staging:
          if (Staging == null) {
            Staging = new global::Spelldawn.Protos.ObjectPositionStaging();
          }
          Staging.MergeFrom(other.Staging);
          break;
        case PositionOneofCase.Hand:
          if (Hand == null) {
            Hand = new global::Spelldawn.Protos.ObjectPositionHand();
          }
          Hand.MergeFrom(other.Hand);
          break;
        case PositionOneofCase.HandContainer:
          if (HandContainer == null) {
            HandContainer = new global::Spelldawn.Protos.ObjectPositionHandContainer();
          }
          HandContainer.MergeFrom(other.HandContainer);
          break;
        case PositionOneofCase.Deck:
          if (Deck == null) {
            Deck = new global::Spelldawn.Protos.ObjectPositionDeck();
          }
          Deck.MergeFrom(other.Deck);
          break;
        case PositionOneofCase.DeckContainer:
          if (DeckContainer == null) {
            DeckContainer = new global::Spelldawn.Protos.ObjectPositionDeckContainer();
          }
          DeckContainer.MergeFrom(other.DeckContainer);
          break;
        case PositionOneofCase.Discard:
          if (Discard == null) {
            Discard = new global::Spelldawn.Protos.ObjectPositionDiscard();
          }
          Discard.MergeFrom(other.Discard);
          break;
        case PositionOneofCase.DiscardContainer:
          if (DiscardContainer == null) {
            DiscardContainer = new global::Spelldawn.Protos.ObjectPositionDiscardContainer();
          }
          DiscardContainer.MergeFrom(other.DiscardContainer);
          break;
        case PositionOneofCase.Scored:
          if (Scored == null) {
            Scored = new global::Spelldawn.Protos.ObjectPositionScored();
          }
          Scored.MergeFrom(other.Scored);
          break;
        case PositionOneofCase.Raid:
          if (Raid == null) {
            Raid = new global::Spelldawn.Protos.ObjectPositionRaid();
          }
          Raid.MergeFrom(other.Raid);
          break;
        case PositionOneofCase.Browser:
          if (Browser == null) {
            Browser = new global::Spelldawn.Protos.ObjectPositionBrowser();
          }
          Browser.MergeFrom(other.Browser);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Spelldawn.Protos.ObjectPositionOffscreen subBuilder = new global::Spelldawn.Protos.ObjectPositionOffscreen();
            if (positionCase_ == PositionOneofCase.Offscreen) {
              subBuilder.MergeFrom(Offscreen);
            }
            input.ReadMessage(subBuilder);
            Offscreen = subBuilder;
            break;
          }
          case 18: {
            global::Spelldawn.Protos.ObjectPositionRoom subBuilder = new global::Spelldawn.Protos.ObjectPositionRoom();
            if (positionCase_ == PositionOneofCase.Room) {
              subBuilder.MergeFrom(Room);
            }
            input.ReadMessage(subBuilder);
            Room = subBuilder;
            break;
          }
          case 26: {
            global::Spelldawn.Protos.ObjectPositionItem subBuilder = new global::Spelldawn.Protos.ObjectPositionItem();
            if (positionCase_ == PositionOneofCase.Item) {
              subBuilder.MergeFrom(Item);
            }
            input.ReadMessage(subBuilder);
            Item = subBuilder;
            break;
          }
          case 34: {
            global::Spelldawn.Protos.ObjectPositionStaging subBuilder = new global::Spelldawn.Protos.ObjectPositionStaging();
            if (positionCase_ == PositionOneofCase.Staging) {
              subBuilder.MergeFrom(Staging);
            }
            input.ReadMessage(subBuilder);
            Staging = subBuilder;
            break;
          }
          case 42: {
            global::Spelldawn.Protos.ObjectPositionHand subBuilder = new global::Spelldawn.Protos.ObjectPositionHand();
            if (positionCase_ == PositionOneofCase.Hand) {
              subBuilder.MergeFrom(Hand);
            }
            input.ReadMessage(subBuilder);
            Hand = subBuilder;
            break;
          }
          case 50: {
            global::Spelldawn.Protos.ObjectPositionHandContainer subBuilder = new global::Spelldawn.Protos.ObjectPositionHandContainer();
            if (positionCase_ == PositionOneofCase.HandContainer) {
              subBuilder.MergeFrom(HandContainer);
            }
            input.ReadMessage(subBuilder);
            HandContainer = subBuilder;
            break;
          }
          case 58: {
            global::Spelldawn.Protos.ObjectPositionDeck subBuilder = new global::Spelldawn.Protos.ObjectPositionDeck();
            if (positionCase_ == PositionOneofCase.Deck) {
              subBuilder.MergeFrom(Deck);
            }
            input.ReadMessage(subBuilder);
            Deck = subBuilder;
            break;
          }
          case 66: {
            global::Spelldawn.Protos.ObjectPositionDeckContainer subBuilder = new global::Spelldawn.Protos.ObjectPositionDeckContainer();
            if (positionCase_ == PositionOneofCase.DeckContainer) {
              subBuilder.MergeFrom(DeckContainer);
            }
            input.ReadMessage(subBuilder);
            DeckContainer = subBuilder;
            break;
          }
          case 74: {
            global::Spelldawn.Protos.ObjectPositionDiscard subBuilder = new global::Spelldawn.Protos.ObjectPositionDiscard();
            if (positionCase_ == PositionOneofCase.Discard) {
              subBuilder.MergeFrom(Discard);
            }
            input.ReadMessage(subBuilder);
            Discard = subBuilder;
            break;
          }
          case 82: {
            global::Spelldawn.Protos.ObjectPositionDiscardContainer subBuilder = new global::Spelldawn.Protos.ObjectPositionDiscardContainer();
            if (positionCase_ == PositionOneofCase.DiscardContainer) {
              subBuilder.MergeFrom(DiscardContainer);
            }
            input.ReadMessage(subBuilder);
            DiscardContainer = subBuilder;
            break;
          }
          case 90: {
            global::Spelldawn.Protos.ObjectPositionScored subBuilder = new global::Spelldawn.Protos.ObjectPositionScored();
            if (positionCase_ == PositionOneofCase.Scored) {
              subBuilder.MergeFrom(Scored);
            }
            input.ReadMessage(subBuilder);
            Scored = subBuilder;
            break;
          }
          case 98: {
            global::Spelldawn.Protos.ObjectPositionRaid subBuilder = new global::Spelldawn.Protos.ObjectPositionRaid();
            if (positionCase_ == PositionOneofCase.Raid) {
              subBuilder.MergeFrom(Raid);
            }
            input.ReadMessage(subBuilder);
            Raid = subBuilder;
            break;
          }
          case 106: {
            global::Spelldawn.Protos.ObjectPositionBrowser subBuilder = new global::Spelldawn.Protos.ObjectPositionBrowser();
            if (positionCase_ == PositionOneofCase.Browser) {
              subBuilder.MergeFrom(Browser);
            }
            input.ReadMessage(subBuilder);
            Browser = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Spelldawn.Protos.ObjectPositionOffscreen subBuilder = new global::Spelldawn.Protos.ObjectPositionOffscreen();
            if (positionCase_ == PositionOneofCase.Offscreen) {
              subBuilder.MergeFrom(Offscreen);
            }
            input.ReadMessage(subBuilder);
            Offscreen = subBuilder;
            break;
          }
          case 18: {
            global::Spelldawn.Protos.ObjectPositionRoom subBuilder = new global::Spelldawn.Protos.ObjectPositionRoom();
            if (positionCase_ == PositionOneofCase.Room) {
              subBuilder.MergeFrom(Room);
            }
            input.ReadMessage(subBuilder);
            Room = subBuilder;
            break;
          }
          case 26: {
            global::Spelldawn.Protos.ObjectPositionItem subBuilder = new global::Spelldawn.Protos.ObjectPositionItem();
            if (positionCase_ == PositionOneofCase.Item) {
              subBuilder.MergeFrom(Item);
            }
            input.ReadMessage(subBuilder);
            Item = subBuilder;
            break;
          }
          case 34: {
            global::Spelldawn.Protos.ObjectPositionStaging subBuilder = new global::Spelldawn.Protos.ObjectPositionStaging();
            if (positionCase_ == PositionOneofCase.Staging) {
              subBuilder.MergeFrom(Staging);
            }
            input.ReadMessage(subBuilder);
            Staging = subBuilder;
            break;
          }
          case 42: {
            global::Spelldawn.Protos.ObjectPositionHand subBuilder = new global::Spelldawn.Protos.ObjectPositionHand();
            if (positionCase_ == PositionOneofCase.Hand) {
              subBuilder.MergeFrom(Hand);
            }
            input.ReadMessage(subBuilder);
            Hand = subBuilder;
            break;
          }
          case 50: {
            global::Spelldawn.Protos.ObjectPositionHandContainer subBuilder = new global::Spelldawn.Protos.ObjectPositionHandContainer();
            if (positionCase_ == PositionOneofCase.HandContainer) {
              subBuilder.MergeFrom(HandContainer);
            }
            input.ReadMessage(subBuilder);
            HandContainer = subBuilder;
            break;
          }
          case 58: {
            global::Spelldawn.Protos.ObjectPositionDeck subBuilder = new global::Spelldawn.Protos.ObjectPositionDeck();
            if (positionCase_ == PositionOneofCase.Deck) {
              subBuilder.MergeFrom(Deck);
            }
            input.ReadMessage(subBuilder);
            Deck = subBuilder;
            break;
          }
          case 66: {
            global::Spelldawn.Protos.ObjectPositionDeckContainer subBuilder = new global::Spelldawn.Protos.ObjectPositionDeckContainer();
            if (positionCase_ == PositionOneofCase.DeckContainer) {
              subBuilder.MergeFrom(DeckContainer);
            }
            input.ReadMessage(subBuilder);
            DeckContainer = subBuilder;
            break;
          }
          case 74: {
            global::Spelldawn.Protos.ObjectPositionDiscard subBuilder = new global::Spelldawn.Protos.ObjectPositionDiscard();
            if (positionCase_ == PositionOneofCase.Discard) {
              subBuilder.MergeFrom(Discard);
            }
            input.ReadMessage(subBuilder);
            Discard = subBuilder;
            break;
          }
          case 82: {
            global::Spelldawn.Protos.ObjectPositionDiscardContainer subBuilder = new global::Spelldawn.Protos.ObjectPositionDiscardContainer();
            if (positionCase_ == PositionOneofCase.DiscardContainer) {
              subBuilder.MergeFrom(DiscardContainer);
            }
            input.ReadMessage(subBuilder);
            DiscardContainer = subBuilder;
            break;
          }
          case 90: {
            global::Spelldawn.Protos.ObjectPositionScored subBuilder = new global::Spelldawn.Protos.ObjectPositionScored();
            if (positionCase_ == PositionOneofCase.Scored) {
              subBuilder.MergeFrom(Scored);
            }
            input.ReadMessage(subBuilder);
            Scored = subBuilder;
            break;
          }
          case 98: {
            global::Spelldawn.Protos.ObjectPositionRaid subBuilder = new global::Spelldawn.Protos.ObjectPositionRaid();
            if (positionCase_ == PositionOneofCase.Raid) {
              subBuilder.MergeFrom(Raid);
            }
            input.ReadMessage(subBuilder);
            Raid = subBuilder;
            break;
          }
          case 106: {
            global::Spelldawn.Protos.ObjectPositionBrowser subBuilder = new global::Spelldawn.Protos.ObjectPositionBrowser();
            if (positionCase_ == PositionOneofCase.Browser) {
              subBuilder.MergeFrom(Browser);
            }
            input.ReadMessage(subBuilder);
            Browser = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RevealedCardView : pb::IMessage<RevealedCardView>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RevealedCardView> _parser = new pb::MessageParser<RevealedCardView>(() => new RevealedCardView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RevealedCardView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevealedCardView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevealedCardView(RevealedCardView other) : this() {
      cardFrame_ = other.cardFrame_ != null ? other.cardFrame_.Clone() : null;
      titleBackground_ = other.titleBackground_ != null ? other.titleBackground_.Clone() : null;
      jewel_ = other.jewel_ != null ? other.jewel_.Clone() : null;
      imageBackground_ = other.imageBackground_ != null ? other.imageBackground_.Clone() : null;
      image_ = other.image_ != null ? other.image_.Clone() : null;
      title_ = other.title_ != null ? other.title_.Clone() : null;
      rulesText_ = other.rulesText_ != null ? other.rulesText_.Clone() : null;
      targeting_ = other.targeting_ != null ? other.targeting_.Clone() : null;
      onReleasePosition_ = other.onReleasePosition_ != null ? other.onReleasePosition_.Clone() : null;
      cost_ = other.cost_ != null ? other.cost_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevealedCardView Clone() {
      return new RevealedCardView(this);
    }

    /// <summary>Field number for the "card_frame" field.</summary>
    public const int CardFrameFieldNumber = 1;
    private global::Spelldawn.Protos.SpriteAddress cardFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.SpriteAddress CardFrame {
      get { return cardFrame_; }
      set {
        cardFrame_ = value;
      }
    }

    /// <summary>Field number for the "title_background" field.</summary>
    public const int TitleBackgroundFieldNumber = 2;
    private global::Spelldawn.Protos.SpriteAddress titleBackground_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.SpriteAddress TitleBackground {
      get { return titleBackground_; }
      set {
        titleBackground_ = value;
      }
    }

    /// <summary>Field number for the "jewel" field.</summary>
    public const int JewelFieldNumber = 3;
    private global::Spelldawn.Protos.SpriteAddress jewel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.SpriteAddress Jewel {
      get { return jewel_; }
      set {
        jewel_ = value;
      }
    }

    /// <summary>Field number for the "image_background" field.</summary>
    public const int ImageBackgroundFieldNumber = 4;
    private global::Spelldawn.Protos.SpriteAddress imageBackground_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.SpriteAddress ImageBackground {
      get { return imageBackground_; }
      set {
        imageBackground_ = value;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 5;
    private global::Spelldawn.Protos.SpriteAddress image_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.SpriteAddress Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 6;
    private global::Spelldawn.Protos.CardTitle title_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardTitle Title {
      get { return title_; }
      set {
        title_ = value;
      }
    }

    /// <summary>Field number for the "rules_text" field.</summary>
    public const int RulesTextFieldNumber = 7;
    private global::Spelldawn.Protos.RulesText rulesText_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RulesText RulesText {
      get { return rulesText_; }
      set {
        rulesText_ = value;
      }
    }

    /// <summary>Field number for the "targeting" field.</summary>
    public const int TargetingFieldNumber = 8;
    private global::Spelldawn.Protos.CardTargeting targeting_;
    /// <summary>
    ///*
    /// Custom targeting behavior for a card. If unspecified, no targeting UI
    /// is shown.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardTargeting Targeting {
      get { return targeting_; }
      set {
        targeting_ = value;
      }
    }

    /// <summary>Field number for the "on_release_position" field.</summary>
    public const int OnReleasePositionFieldNumber = 9;
    private global::Spelldawn.Protos.ObjectPosition onReleasePosition_;
    /// <summary>
    ///*
    /// Where to move a played card. Information from 'targeting' will be
    /// incorporated to fill this in, e.g. if a room is targeted and
    /// ObjectPositionRoom is selected here with no RoomId, the targeted room
    /// is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPosition OnReleasePosition {
      get { return onReleasePosition_; }
      set {
        onReleasePosition_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 10;
    private global::Spelldawn.Protos.CardCost cost_;
    /// <summary>
    ///* Information needed to determine whether a card can be played. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardCost Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RevealedCardView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RevealedCardView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CardFrame, other.CardFrame)) return false;
      if (!object.Equals(TitleBackground, other.TitleBackground)) return false;
      if (!object.Equals(Jewel, other.Jewel)) return false;
      if (!object.Equals(ImageBackground, other.ImageBackground)) return false;
      if (!object.Equals(Image, other.Image)) return false;
      if (!object.Equals(Title, other.Title)) return false;
      if (!object.Equals(RulesText, other.RulesText)) return false;
      if (!object.Equals(Targeting, other.Targeting)) return false;
      if (!object.Equals(OnReleasePosition, other.OnReleasePosition)) return false;
      if (!object.Equals(Cost, other.Cost)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cardFrame_ != null) hash ^= CardFrame.GetHashCode();
      if (titleBackground_ != null) hash ^= TitleBackground.GetHashCode();
      if (jewel_ != null) hash ^= Jewel.GetHashCode();
      if (imageBackground_ != null) hash ^= ImageBackground.GetHashCode();
      if (image_ != null) hash ^= Image.GetHashCode();
      if (title_ != null) hash ^= Title.GetHashCode();
      if (rulesText_ != null) hash ^= RulesText.GetHashCode();
      if (targeting_ != null) hash ^= Targeting.GetHashCode();
      if (onReleasePosition_ != null) hash ^= OnReleasePosition.GetHashCode();
      if (cost_ != null) hash ^= Cost.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (cardFrame_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardFrame);
      }
      if (titleBackground_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TitleBackground);
      }
      if (jewel_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Jewel);
      }
      if (imageBackground_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ImageBackground);
      }
      if (image_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Image);
      }
      if (title_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Title);
      }
      if (rulesText_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(RulesText);
      }
      if (targeting_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Targeting);
      }
      if (onReleasePosition_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(OnReleasePosition);
      }
      if (cost_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (cardFrame_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardFrame);
      }
      if (titleBackground_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TitleBackground);
      }
      if (jewel_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Jewel);
      }
      if (imageBackground_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ImageBackground);
      }
      if (image_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Image);
      }
      if (title_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Title);
      }
      if (rulesText_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(RulesText);
      }
      if (targeting_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Targeting);
      }
      if (onReleasePosition_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(OnReleasePosition);
      }
      if (cost_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cardFrame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardFrame);
      }
      if (titleBackground_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TitleBackground);
      }
      if (jewel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Jewel);
      }
      if (imageBackground_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImageBackground);
      }
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (title_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Title);
      }
      if (rulesText_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RulesText);
      }
      if (targeting_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Targeting);
      }
      if (onReleasePosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OnReleasePosition);
      }
      if (cost_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cost);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RevealedCardView other) {
      if (other == null) {
        return;
      }
      if (other.cardFrame_ != null) {
        if (cardFrame_ == null) {
          CardFrame = new global::Spelldawn.Protos.SpriteAddress();
        }
        CardFrame.MergeFrom(other.CardFrame);
      }
      if (other.titleBackground_ != null) {
        if (titleBackground_ == null) {
          TitleBackground = new global::Spelldawn.Protos.SpriteAddress();
        }
        TitleBackground.MergeFrom(other.TitleBackground);
      }
      if (other.jewel_ != null) {
        if (jewel_ == null) {
          Jewel = new global::Spelldawn.Protos.SpriteAddress();
        }
        Jewel.MergeFrom(other.Jewel);
      }
      if (other.imageBackground_ != null) {
        if (imageBackground_ == null) {
          ImageBackground = new global::Spelldawn.Protos.SpriteAddress();
        }
        ImageBackground.MergeFrom(other.ImageBackground);
      }
      if (other.image_ != null) {
        if (image_ == null) {
          Image = new global::Spelldawn.Protos.SpriteAddress();
        }
        Image.MergeFrom(other.Image);
      }
      if (other.title_ != null) {
        if (title_ == null) {
          Title = new global::Spelldawn.Protos.CardTitle();
        }
        Title.MergeFrom(other.Title);
      }
      if (other.rulesText_ != null) {
        if (rulesText_ == null) {
          RulesText = new global::Spelldawn.Protos.RulesText();
        }
        RulesText.MergeFrom(other.RulesText);
      }
      if (other.targeting_ != null) {
        if (targeting_ == null) {
          Targeting = new global::Spelldawn.Protos.CardTargeting();
        }
        Targeting.MergeFrom(other.Targeting);
      }
      if (other.onReleasePosition_ != null) {
        if (onReleasePosition_ == null) {
          OnReleasePosition = new global::Spelldawn.Protos.ObjectPosition();
        }
        OnReleasePosition.MergeFrom(other.OnReleasePosition);
      }
      if (other.cost_ != null) {
        if (cost_ == null) {
          Cost = new global::Spelldawn.Protos.CardCost();
        }
        Cost.MergeFrom(other.Cost);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cardFrame_ == null) {
              CardFrame = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(CardFrame);
            break;
          }
          case 18: {
            if (titleBackground_ == null) {
              TitleBackground = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(TitleBackground);
            break;
          }
          case 26: {
            if (jewel_ == null) {
              Jewel = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(Jewel);
            break;
          }
          case 34: {
            if (imageBackground_ == null) {
              ImageBackground = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(ImageBackground);
            break;
          }
          case 42: {
            if (image_ == null) {
              Image = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(Image);
            break;
          }
          case 50: {
            if (title_ == null) {
              Title = new global::Spelldawn.Protos.CardTitle();
            }
            input.ReadMessage(Title);
            break;
          }
          case 58: {
            if (rulesText_ == null) {
              RulesText = new global::Spelldawn.Protos.RulesText();
            }
            input.ReadMessage(RulesText);
            break;
          }
          case 66: {
            if (targeting_ == null) {
              Targeting = new global::Spelldawn.Protos.CardTargeting();
            }
            input.ReadMessage(Targeting);
            break;
          }
          case 74: {
            if (onReleasePosition_ == null) {
              OnReleasePosition = new global::Spelldawn.Protos.ObjectPosition();
            }
            input.ReadMessage(OnReleasePosition);
            break;
          }
          case 82: {
            if (cost_ == null) {
              Cost = new global::Spelldawn.Protos.CardCost();
            }
            input.ReadMessage(Cost);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (cardFrame_ == null) {
              CardFrame = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(CardFrame);
            break;
          }
          case 18: {
            if (titleBackground_ == null) {
              TitleBackground = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(TitleBackground);
            break;
          }
          case 26: {
            if (jewel_ == null) {
              Jewel = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(Jewel);
            break;
          }
          case 34: {
            if (imageBackground_ == null) {
              ImageBackground = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(ImageBackground);
            break;
          }
          case 42: {
            if (image_ == null) {
              Image = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(Image);
            break;
          }
          case 50: {
            if (title_ == null) {
              Title = new global::Spelldawn.Protos.CardTitle();
            }
            input.ReadMessage(Title);
            break;
          }
          case 58: {
            if (rulesText_ == null) {
              RulesText = new global::Spelldawn.Protos.RulesText();
            }
            input.ReadMessage(RulesText);
            break;
          }
          case 66: {
            if (targeting_ == null) {
              Targeting = new global::Spelldawn.Protos.CardTargeting();
            }
            input.ReadMessage(Targeting);
            break;
          }
          case 74: {
            if (onReleasePosition_ == null) {
              OnReleasePosition = new global::Spelldawn.Protos.ObjectPosition();
            }
            input.ReadMessage(OnReleasePosition);
            break;
          }
          case 82: {
            if (cost_ == null) {
              Cost = new global::Spelldawn.Protos.CardCost();
            }
            input.ReadMessage(Cost);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CardView : pb::IMessage<CardView>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CardView> _parser = new pb::MessageParser<CardView>(() => new CardView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardView(CardView other) : this() {
      cardId_ = other.cardId_ != null ? other.cardId_.Clone() : null;
      onCreatePosition_ = other.onCreatePosition_ != null ? other.onCreatePosition_.Clone() : null;
      cardBack_ = other.cardBack_ != null ? other.cardBack_.Clone() : null;
      cardIcons_ = other.cardIcons_ != null ? other.cardIcons_.Clone() : null;
      arenaFrame_ = other.arenaFrame_ != null ? other.arenaFrame_.Clone() : null;
      revealedCard_ = other.revealedCard_ != null ? other.revealedCard_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardView Clone() {
      return new CardView(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private global::Spelldawn.Protos.CardId cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardId CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "on_create_position" field.</summary>
    public const int OnCreatePositionFieldNumber = 2;
    private global::Spelldawn.Protos.ObjectPosition onCreatePosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPosition OnCreatePosition {
      get { return onCreatePosition_; }
      set {
        onCreatePosition_ = value;
      }
    }

    /// <summary>Field number for the "card_back" field.</summary>
    public const int CardBackFieldNumber = 3;
    private global::Spelldawn.Protos.SpriteAddress cardBack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.SpriteAddress CardBack {
      get { return cardBack_; }
      set {
        cardBack_ = value;
      }
    }

    /// <summary>Field number for the "card_icons" field.</summary>
    public const int CardIconsFieldNumber = 4;
    private global::Spelldawn.Protos.CardIcons cardIcons_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardIcons CardIcons {
      get { return cardIcons_; }
      set {
        cardIcons_ = value;
      }
    }

    /// <summary>Field number for the "arena_frame" field.</summary>
    public const int ArenaFrameFieldNumber = 5;
    private global::Spelldawn.Protos.SpriteAddress arenaFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.SpriteAddress ArenaFrame {
      get { return arenaFrame_; }
      set {
        arenaFrame_ = value;
      }
    }

    /// <summary>Field number for the "revealed_card" field.</summary>
    public const int RevealedCardFieldNumber = 6;
    private global::Spelldawn.Protos.RevealedCardView revealedCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RevealedCardView RevealedCard {
      get { return revealedCard_; }
      set {
        revealedCard_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CardId, other.CardId)) return false;
      if (!object.Equals(OnCreatePosition, other.OnCreatePosition)) return false;
      if (!object.Equals(CardBack, other.CardBack)) return false;
      if (!object.Equals(CardIcons, other.CardIcons)) return false;
      if (!object.Equals(ArenaFrame, other.ArenaFrame)) return false;
      if (!object.Equals(RevealedCard, other.RevealedCard)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cardId_ != null) hash ^= CardId.GetHashCode();
      if (onCreatePosition_ != null) hash ^= OnCreatePosition.GetHashCode();
      if (cardBack_ != null) hash ^= CardBack.GetHashCode();
      if (cardIcons_ != null) hash ^= CardIcons.GetHashCode();
      if (arenaFrame_ != null) hash ^= ArenaFrame.GetHashCode();
      if (revealedCard_ != null) hash ^= RevealedCard.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (cardId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardId);
      }
      if (onCreatePosition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OnCreatePosition);
      }
      if (cardBack_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CardBack);
      }
      if (cardIcons_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CardIcons);
      }
      if (arenaFrame_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ArenaFrame);
      }
      if (revealedCard_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RevealedCard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (cardId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardId);
      }
      if (onCreatePosition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OnCreatePosition);
      }
      if (cardBack_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CardBack);
      }
      if (cardIcons_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CardIcons);
      }
      if (arenaFrame_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ArenaFrame);
      }
      if (revealedCard_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RevealedCard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cardId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardId);
      }
      if (onCreatePosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OnCreatePosition);
      }
      if (cardBack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardBack);
      }
      if (cardIcons_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardIcons);
      }
      if (arenaFrame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArenaFrame);
      }
      if (revealedCard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RevealedCard);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardView other) {
      if (other == null) {
        return;
      }
      if (other.cardId_ != null) {
        if (cardId_ == null) {
          CardId = new global::Spelldawn.Protos.CardId();
        }
        CardId.MergeFrom(other.CardId);
      }
      if (other.onCreatePosition_ != null) {
        if (onCreatePosition_ == null) {
          OnCreatePosition = new global::Spelldawn.Protos.ObjectPosition();
        }
        OnCreatePosition.MergeFrom(other.OnCreatePosition);
      }
      if (other.cardBack_ != null) {
        if (cardBack_ == null) {
          CardBack = new global::Spelldawn.Protos.SpriteAddress();
        }
        CardBack.MergeFrom(other.CardBack);
      }
      if (other.cardIcons_ != null) {
        if (cardIcons_ == null) {
          CardIcons = new global::Spelldawn.Protos.CardIcons();
        }
        CardIcons.MergeFrom(other.CardIcons);
      }
      if (other.arenaFrame_ != null) {
        if (arenaFrame_ == null) {
          ArenaFrame = new global::Spelldawn.Protos.SpriteAddress();
        }
        ArenaFrame.MergeFrom(other.ArenaFrame);
      }
      if (other.revealedCard_ != null) {
        if (revealedCard_ == null) {
          RevealedCard = new global::Spelldawn.Protos.RevealedCardView();
        }
        RevealedCard.MergeFrom(other.RevealedCard);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cardId_ == null) {
              CardId = new global::Spelldawn.Protos.CardId();
            }
            input.ReadMessage(CardId);
            break;
          }
          case 18: {
            if (onCreatePosition_ == null) {
              OnCreatePosition = new global::Spelldawn.Protos.ObjectPosition();
            }
            input.ReadMessage(OnCreatePosition);
            break;
          }
          case 26: {
            if (cardBack_ == null) {
              CardBack = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(CardBack);
            break;
          }
          case 34: {
            if (cardIcons_ == null) {
              CardIcons = new global::Spelldawn.Protos.CardIcons();
            }
            input.ReadMessage(CardIcons);
            break;
          }
          case 42: {
            if (arenaFrame_ == null) {
              ArenaFrame = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(ArenaFrame);
            break;
          }
          case 50: {
            if (revealedCard_ == null) {
              RevealedCard = new global::Spelldawn.Protos.RevealedCardView();
            }
            input.ReadMessage(RevealedCard);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (cardId_ == null) {
              CardId = new global::Spelldawn.Protos.CardId();
            }
            input.ReadMessage(CardId);
            break;
          }
          case 18: {
            if (onCreatePosition_ == null) {
              OnCreatePosition = new global::Spelldawn.Protos.ObjectPosition();
            }
            input.ReadMessage(OnCreatePosition);
            break;
          }
          case 26: {
            if (cardBack_ == null) {
              CardBack = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(CardBack);
            break;
          }
          case 34: {
            if (cardIcons_ == null) {
              CardIcons = new global::Spelldawn.Protos.CardIcons();
            }
            input.ReadMessage(CardIcons);
            break;
          }
          case 42: {
            if (arenaFrame_ == null) {
              ArenaFrame = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(ArenaFrame);
            break;
          }
          case 50: {
            if (revealedCard_ == null) {
              RevealedCard = new global::Spelldawn.Protos.RevealedCardView();
            }
            input.ReadMessage(RevealedCard);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HandView : pb::IMessage<HandView>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HandView> _parser = new pb::MessageParser<HandView>(() => new HandView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HandView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandView(HandView other) : this() {
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandView Clone() {
      return new HandView(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.CardView> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::Spelldawn.Protos.CardView.Parser);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.CardView> cards_ = new pbc::RepeatedField<global::Spelldawn.Protos.CardView>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.CardView> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HandView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HandView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      cards_.WriteTo(ref output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HandView other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            cards_.AddEntriesFrom(ref input, _repeated_cards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DiscardPileView : pb::IMessage<DiscardPileView>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DiscardPileView> _parser = new pb::MessageParser<DiscardPileView>(() => new DiscardPileView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiscardPileView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscardPileView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscardPileView(DiscardPileView other) : this() {
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscardPileView Clone() {
      return new DiscardPileView(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.CardView> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::Spelldawn.Protos.CardView.Parser);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.CardView> cards_ = new pbc::RepeatedField<global::Spelldawn.Protos.CardView>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.CardView> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiscardPileView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiscardPileView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      cards_.WriteTo(ref output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiscardPileView other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            cards_.AddEntriesFrom(ref input, _repeated_cards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      name_ = other.name_;
      portrait_ = other.portrait_ != null ? other.portrait_.Clone() : null;
      identityCard_ = other.identityCard_ != null ? other.identityCard_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "portrait" field.</summary>
    public const int PortraitFieldNumber = 2;
    private global::Spelldawn.Protos.SpriteAddress portrait_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.SpriteAddress Portrait {
      get { return portrait_; }
      set {
        portrait_ = value;
      }
    }

    /// <summary>Field number for the "identity_card" field.</summary>
    public const int IdentityCardFieldNumber = 3;
    private global::Spelldawn.Protos.CardView identityCard_;
    /// <summary>
    ///*
    /// Identifies the player's unique powers. The back for this card is used
    /// as the card back for all of this player's cards. The CardIds of the
    /// user's and the opponent's identity cards are conventionally 1 and 2.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardView IdentityCard {
      get { return identityCard_; }
      set {
        identityCard_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Portrait, other.Portrait)) return false;
      if (!object.Equals(IdentityCard, other.IdentityCard)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (portrait_ != null) hash ^= Portrait.GetHashCode();
      if (identityCard_ != null) hash ^= IdentityCard.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (portrait_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Portrait);
      }
      if (identityCard_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(IdentityCard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (portrait_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Portrait);
      }
      if (identityCard_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(IdentityCard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (portrait_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Portrait);
      }
      if (identityCard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IdentityCard);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.portrait_ != null) {
        if (portrait_ == null) {
          Portrait = new global::Spelldawn.Protos.SpriteAddress();
        }
        Portrait.MergeFrom(other.Portrait);
      }
      if (other.identityCard_ != null) {
        if (identityCard_ == null) {
          IdentityCard = new global::Spelldawn.Protos.CardView();
        }
        IdentityCard.MergeFrom(other.IdentityCard);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (portrait_ == null) {
              Portrait = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(Portrait);
            break;
          }
          case 26: {
            if (identityCard_ == null) {
              IdentityCard = new global::Spelldawn.Protos.CardView();
            }
            input.ReadMessage(IdentityCard);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (portrait_ == null) {
              Portrait = new global::Spelldawn.Protos.SpriteAddress();
            }
            input.ReadMessage(Portrait);
            break;
          }
          case 26: {
            if (identityCard_ == null) {
              IdentityCard = new global::Spelldawn.Protos.CardView();
            }
            input.ReadMessage(IdentityCard);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ManaView : pb::IMessage<ManaView>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ManaView> _parser = new pb::MessageParser<ManaView>(() => new ManaView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ManaView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManaView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManaView(ManaView other) : this() {
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManaView Clone() {
      return new ManaView(this);
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 1;
    private int amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ManaView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ManaView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Amount != 0) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Amount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Amount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ManaView other) {
      if (other == null) {
        return;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Amount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Amount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ScoreView : pb::IMessage<ScoreView>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ScoreView> _parser = new pb::MessageParser<ScoreView>(() => new ScoreView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScoreView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreView(ScoreView other) : this() {
      score_ = other.score_;
      scoredCards_ = other.scoredCards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreView Clone() {
      return new ScoreView(this);
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "scored_cards" field.</summary>
    public const int ScoredCardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.CardView> _repeated_scoredCards_codec
        = pb::FieldCodec.ForMessage(18, global::Spelldawn.Protos.CardView.Parser);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.CardView> scoredCards_ = new pbc::RepeatedField<global::Spelldawn.Protos.CardView>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.CardView> ScoredCards {
      get { return scoredCards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScoreView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScoreView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Score != other.Score) return false;
      if(!scoredCards_.Equals(other.scoredCards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Score != 0) hash ^= Score.GetHashCode();
      hash ^= scoredCards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Score != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Score);
      }
      scoredCards_.WriteTo(output, _repeated_scoredCards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Score != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Score);
      }
      scoredCards_.WriteTo(ref output, _repeated_scoredCards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      size += scoredCards_.CalculateSize(_repeated_scoredCards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScoreView other) {
      if (other == null) {
        return;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      scoredCards_.Add(other.scoredCards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Score = input.ReadInt32();
            break;
          }
          case 18: {
            scoredCards_.AddEntriesFrom(input, _repeated_scoredCards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Score = input.ReadInt32();
            break;
          }
          case 18: {
            scoredCards_.AddEntriesFrom(ref input, _repeated_scoredCards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RoomView : pb::IMessage<RoomView>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoomView> _parser = new pb::MessageParser<RoomView>(() => new RoomView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomView(RoomView other) : this() {
      roomId_ = other.roomId_;
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomView Clone() {
      return new RoomView(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private global::Spelldawn.Protos.RoomId roomId_ = global::Spelldawn.Protos.RoomId.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RoomId RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.CardView> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(18, global::Spelldawn.Protos.CardView.Parser);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.CardView> cards_ = new pbc::RepeatedField<global::Spelldawn.Protos.CardView>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.CardView> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != global::Spelldawn.Protos.RoomId.Unspecified) hash ^= RoomId.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RoomId != global::Spelldawn.Protos.RoomId.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RoomId);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RoomId != global::Spelldawn.Protos.RoomId.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RoomId);
      }
      cards_.WriteTo(ref output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != global::Spelldawn.Protos.RoomId.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomId);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomView other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != global::Spelldawn.Protos.RoomId.Unspecified) {
        RoomId = other.RoomId;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = (global::Spelldawn.Protos.RoomId) input.ReadEnum();
            break;
          }
          case 18: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RoomId = (global::Spelldawn.Protos.RoomId) input.ReadEnum();
            break;
          }
          case 18: {
            cards_.AddEntriesFrom(ref input, _repeated_cards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ArenaView : pb::IMessage<ArenaView>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ArenaView> _parser = new pb::MessageParser<ArenaView>(() => new ArenaView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArenaView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArenaView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArenaView(ArenaView other) : this() {
      overlordPerspective_ = other.overlordPerspective_;
      rooms_ = other.rooms_.Clone();
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArenaView Clone() {
      return new ArenaView(this);
    }

    /// <summary>Field number for the "overlord_perspective" field.</summary>
    public const int OverlordPerspectiveFieldNumber = 1;
    private bool overlordPerspective_;
    /// <summary>
    ///*
    /// If true, render rooms at the bottom of the screen, if false, render items
    /// at the bottom.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OverlordPerspective {
      get { return overlordPerspective_; }
      set {
        overlordPerspective_ = value;
      }
    }

    /// <summary>Field number for the "rooms" field.</summary>
    public const int RoomsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.RoomView> _repeated_rooms_codec
        = pb::FieldCodec.ForMessage(18, global::Spelldawn.Protos.RoomView.Parser);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.RoomView> rooms_ = new pbc::RepeatedField<global::Spelldawn.Protos.RoomView>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.RoomView> Rooms {
      get { return rooms_; }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.CardView> _repeated_items_codec
        = pb::FieldCodec.ForMessage(26, global::Spelldawn.Protos.CardView.Parser);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.CardView> items_ = new pbc::RepeatedField<global::Spelldawn.Protos.CardView>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.CardView> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArenaView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArenaView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OverlordPerspective != other.OverlordPerspective) return false;
      if(!rooms_.Equals(other.rooms_)) return false;
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OverlordPerspective != false) hash ^= OverlordPerspective.GetHashCode();
      hash ^= rooms_.GetHashCode();
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OverlordPerspective != false) {
        output.WriteRawTag(8);
        output.WriteBool(OverlordPerspective);
      }
      rooms_.WriteTo(output, _repeated_rooms_codec);
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OverlordPerspective != false) {
        output.WriteRawTag(8);
        output.WriteBool(OverlordPerspective);
      }
      rooms_.WriteTo(ref output, _repeated_rooms_codec);
      items_.WriteTo(ref output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OverlordPerspective != false) {
        size += 1 + 1;
      }
      size += rooms_.CalculateSize(_repeated_rooms_codec);
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArenaView other) {
      if (other == null) {
        return;
      }
      if (other.OverlordPerspective != false) {
        OverlordPerspective = other.OverlordPerspective;
      }
      rooms_.Add(other.rooms_);
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OverlordPerspective = input.ReadBool();
            break;
          }
          case 18: {
            rooms_.AddEntriesFrom(input, _repeated_rooms_codec);
            break;
          }
          case 26: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OverlordPerspective = input.ReadBool();
            break;
          }
          case 18: {
            rooms_.AddEntriesFrom(ref input, _repeated_rooms_codec);
            break;
          }
          case 26: {
            items_.AddEntriesFrom(ref input, _repeated_items_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ActionTrackerView : pb::IMessage<ActionTrackerView>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ActionTrackerView> _parser = new pb::MessageParser<ActionTrackerView>(() => new ActionTrackerView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionTrackerView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionTrackerView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionTrackerView(ActionTrackerView other) : this() {
      availableActionCount_ = other.availableActionCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionTrackerView Clone() {
      return new ActionTrackerView(this);
    }

    /// <summary>Field number for the "available_action_count" field.</summary>
    public const int AvailableActionCountFieldNumber = 1;
    private int availableActionCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvailableActionCount {
      get { return availableActionCount_; }
      set {
        availableActionCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionTrackerView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionTrackerView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AvailableActionCount != other.AvailableActionCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AvailableActionCount != 0) hash ^= AvailableActionCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AvailableActionCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AvailableActionCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AvailableActionCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AvailableActionCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AvailableActionCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvailableActionCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionTrackerView other) {
      if (other == null) {
        return;
      }
      if (other.AvailableActionCount != 0) {
        AvailableActionCount = other.AvailableActionCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AvailableActionCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AvailableActionCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DeckView : pb::IMessage<DeckView>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeckView> _parser = new pb::MessageParser<DeckView>(() => new DeckView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeckView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckView(DeckView other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckView Clone() {
      return new DeckView(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeckView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeckView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeckView other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class PlayerView : pb::IMessage<PlayerView>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerView> _parser = new pb::MessageParser<PlayerView>(() => new PlayerView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerView(PlayerView other) : this() {
      playerInfo_ = other.playerInfo_ != null ? other.playerInfo_.Clone() : null;
      score_ = other.score_ != null ? other.score_.Clone() : null;
      hand_ = other.hand_ != null ? other.hand_.Clone() : null;
      mana_ = other.mana_ != null ? other.mana_.Clone() : null;
      discardPile_ = other.discardPile_ != null ? other.discardPile_.Clone() : null;
      actionTracker_ = other.actionTracker_ != null ? other.actionTracker_.Clone() : null;
      deck_ = other.deck_ != null ? other.deck_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerView Clone() {
      return new PlayerView(this);
    }

    /// <summary>Field number for the "player_info" field.</summary>
    public const int PlayerInfoFieldNumber = 1;
    private global::Spelldawn.Protos.PlayerInfo playerInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private global::Spelldawn.Protos.ScoreView score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ScoreView Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "hand" field.</summary>
    public const int HandFieldNumber = 3;
    private global::Spelldawn.Protos.HandView hand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.HandView Hand {
      get { return hand_; }
      set {
        hand_ = value;
      }
    }

    /// <summary>Field number for the "mana" field.</summary>
    public const int ManaFieldNumber = 4;
    private global::Spelldawn.Protos.ManaView mana_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ManaView Mana {
      get { return mana_; }
      set {
        mana_ = value;
      }
    }

    /// <summary>Field number for the "discard_pile" field.</summary>
    public const int DiscardPileFieldNumber = 5;
    private global::Spelldawn.Protos.DiscardPileView discardPile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.DiscardPileView DiscardPile {
      get { return discardPile_; }
      set {
        discardPile_ = value;
      }
    }

    /// <summary>Field number for the "action_tracker" field.</summary>
    public const int ActionTrackerFieldNumber = 6;
    private global::Spelldawn.Protos.ActionTrackerView actionTracker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ActionTrackerView ActionTracker {
      get { return actionTracker_; }
      set {
        actionTracker_ = value;
      }
    }

    /// <summary>Field number for the "deck" field.</summary>
    public const int DeckFieldNumber = 7;
    private global::Spelldawn.Protos.DeckView deck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.DeckView Deck {
      get { return deck_; }
      set {
        deck_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (!object.Equals(Score, other.Score)) return false;
      if (!object.Equals(Hand, other.Hand)) return false;
      if (!object.Equals(Mana, other.Mana)) return false;
      if (!object.Equals(DiscardPile, other.DiscardPile)) return false;
      if (!object.Equals(ActionTracker, other.ActionTracker)) return false;
      if (!object.Equals(Deck, other.Deck)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (score_ != null) hash ^= Score.GetHashCode();
      if (hand_ != null) hash ^= Hand.GetHashCode();
      if (mana_ != null) hash ^= Mana.GetHashCode();
      if (discardPile_ != null) hash ^= DiscardPile.GetHashCode();
      if (actionTracker_ != null) hash ^= ActionTracker.GetHashCode();
      if (deck_ != null) hash ^= Deck.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (playerInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerInfo);
      }
      if (score_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Score);
      }
      if (hand_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Hand);
      }
      if (mana_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Mana);
      }
      if (discardPile_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DiscardPile);
      }
      if (actionTracker_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ActionTracker);
      }
      if (deck_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Deck);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (playerInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerInfo);
      }
      if (score_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Score);
      }
      if (hand_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Hand);
      }
      if (mana_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Mana);
      }
      if (discardPile_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DiscardPile);
      }
      if (actionTracker_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ActionTracker);
      }
      if (deck_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Deck);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (score_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Score);
      }
      if (hand_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hand);
      }
      if (mana_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mana);
      }
      if (discardPile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiscardPile);
      }
      if (actionTracker_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActionTracker);
      }
      if (deck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deck);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerView other) {
      if (other == null) {
        return;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          PlayerInfo = new global::Spelldawn.Protos.PlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      if (other.score_ != null) {
        if (score_ == null) {
          Score = new global::Spelldawn.Protos.ScoreView();
        }
        Score.MergeFrom(other.Score);
      }
      if (other.hand_ != null) {
        if (hand_ == null) {
          Hand = new global::Spelldawn.Protos.HandView();
        }
        Hand.MergeFrom(other.Hand);
      }
      if (other.mana_ != null) {
        if (mana_ == null) {
          Mana = new global::Spelldawn.Protos.ManaView();
        }
        Mana.MergeFrom(other.Mana);
      }
      if (other.discardPile_ != null) {
        if (discardPile_ == null) {
          DiscardPile = new global::Spelldawn.Protos.DiscardPileView();
        }
        DiscardPile.MergeFrom(other.DiscardPile);
      }
      if (other.actionTracker_ != null) {
        if (actionTracker_ == null) {
          ActionTracker = new global::Spelldawn.Protos.ActionTrackerView();
        }
        ActionTracker.MergeFrom(other.ActionTracker);
      }
      if (other.deck_ != null) {
        if (deck_ == null) {
          Deck = new global::Spelldawn.Protos.DeckView();
        }
        Deck.MergeFrom(other.Deck);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (playerInfo_ == null) {
              PlayerInfo = new global::Spelldawn.Protos.PlayerInfo();
            }
            input.ReadMessage(PlayerInfo);
            break;
          }
          case 18: {
            if (score_ == null) {
              Score = new global::Spelldawn.Protos.ScoreView();
            }
            input.ReadMessage(Score);
            break;
          }
          case 26: {
            if (hand_ == null) {
              Hand = new global::Spelldawn.Protos.HandView();
            }
            input.ReadMessage(Hand);
            break;
          }
          case 34: {
            if (mana_ == null) {
              Mana = new global::Spelldawn.Protos.ManaView();
            }
            input.ReadMessage(Mana);
            break;
          }
          case 42: {
            if (discardPile_ == null) {
              DiscardPile = new global::Spelldawn.Protos.DiscardPileView();
            }
            input.ReadMessage(DiscardPile);
            break;
          }
          case 50: {
            if (actionTracker_ == null) {
              ActionTracker = new global::Spelldawn.Protos.ActionTrackerView();
            }
            input.ReadMessage(ActionTracker);
            break;
          }
          case 58: {
            if (deck_ == null) {
              Deck = new global::Spelldawn.Protos.DeckView();
            }
            input.ReadMessage(Deck);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (playerInfo_ == null) {
              PlayerInfo = new global::Spelldawn.Protos.PlayerInfo();
            }
            input.ReadMessage(PlayerInfo);
            break;
          }
          case 18: {
            if (score_ == null) {
              Score = new global::Spelldawn.Protos.ScoreView();
            }
            input.ReadMessage(Score);
            break;
          }
          case 26: {
            if (hand_ == null) {
              Hand = new global::Spelldawn.Protos.HandView();
            }
            input.ReadMessage(Hand);
            break;
          }
          case 34: {
            if (mana_ == null) {
              Mana = new global::Spelldawn.Protos.ManaView();
            }
            input.ReadMessage(Mana);
            break;
          }
          case 42: {
            if (discardPile_ == null) {
              DiscardPile = new global::Spelldawn.Protos.DiscardPileView();
            }
            input.ReadMessage(DiscardPile);
            break;
          }
          case 50: {
            if (actionTracker_ == null) {
              ActionTracker = new global::Spelldawn.Protos.ActionTrackerView();
            }
            input.ReadMessage(ActionTracker);
            break;
          }
          case 58: {
            if (deck_ == null) {
              Deck = new global::Spelldawn.Protos.DeckView();
            }
            input.ReadMessage(Deck);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameView : pb::IMessage<GameView>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameView> _parser = new pb::MessageParser<GameView>(() => new GameView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameView(GameView other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      opponent_ = other.opponent_ != null ? other.opponent_.Clone() : null;
      arena_ = other.arena_ != null ? other.arena_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameView Clone() {
      return new GameView(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::Spelldawn.Protos.PlayerView user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerView User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "opponent" field.</summary>
    public const int OpponentFieldNumber = 2;
    private global::Spelldawn.Protos.PlayerView opponent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerView Opponent {
      get { return opponent_; }
      set {
        opponent_ = value;
      }
    }

    /// <summary>Field number for the "arena" field.</summary>
    public const int ArenaFieldNumber = 3;
    private global::Spelldawn.Protos.ArenaView arena_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ArenaView Arena {
      get { return arena_; }
      set {
        arena_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(Opponent, other.Opponent)) return false;
      if (!object.Equals(Arena, other.Arena)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (opponent_ != null) hash ^= Opponent.GetHashCode();
      if (arena_ != null) hash ^= Arena.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (opponent_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Opponent);
      }
      if (arena_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Arena);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (opponent_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Opponent);
      }
      if (arena_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Arena);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (opponent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Opponent);
      }
      if (arena_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Arena);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameView other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::Spelldawn.Protos.PlayerView();
        }
        User.MergeFrom(other.User);
      }
      if (other.opponent_ != null) {
        if (opponent_ == null) {
          Opponent = new global::Spelldawn.Protos.PlayerView();
        }
        Opponent.MergeFrom(other.Opponent);
      }
      if (other.arena_ != null) {
        if (arena_ == null) {
          Arena = new global::Spelldawn.Protos.ArenaView();
        }
        Arena.MergeFrom(other.Arena);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::Spelldawn.Protos.PlayerView();
            }
            input.ReadMessage(User);
            break;
          }
          case 18: {
            if (opponent_ == null) {
              Opponent = new global::Spelldawn.Protos.PlayerView();
            }
            input.ReadMessage(Opponent);
            break;
          }
          case 26: {
            if (arena_ == null) {
              Arena = new global::Spelldawn.Protos.ArenaView();
            }
            input.ReadMessage(Arena);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::Spelldawn.Protos.PlayerView();
            }
            input.ReadMessage(User);
            break;
          }
          case 18: {
            if (opponent_ == null) {
              Opponent = new global::Spelldawn.Protos.PlayerView();
            }
            input.ReadMessage(Opponent);
            break;
          }
          case 26: {
            if (arena_ == null) {
              Arena = new global::Spelldawn.Protos.ArenaView();
            }
            input.ReadMessage(Arena);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ServerAction : pb::IMessage<ServerAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ServerAction> _parser = new pb::MessageParser<ServerAction>(() => new ServerAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerAction(ServerAction other) : this() {
      payload_ = other.payload_ != null ? other.payload_.Clone() : null;
      optimisticUpdate_ = other.optimisticUpdate_ != null ? other.optimisticUpdate_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerAction Clone() {
      return new ServerAction(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Any payload_;
    /// <summary>
    ///* Opaque payload to send to the server. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any Payload {
      get { return payload_; }
      set {
        payload_ = value;
      }
    }

    /// <summary>Field number for the "optimistic_update" field.</summary>
    public const int OptimisticUpdateFieldNumber = 2;
    private global::Spelldawn.Protos.CommandList optimisticUpdate_;
    /// <summary>
    ///* Optimistic mutations to game state for this action. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CommandList OptimisticUpdate {
      get { return optimisticUpdate_; }
      set {
        optimisticUpdate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Payload, other.Payload)) return false;
      if (!object.Equals(OptimisticUpdate, other.OptimisticUpdate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (payload_ != null) hash ^= Payload.GetHashCode();
      if (optimisticUpdate_ != null) hash ^= OptimisticUpdate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (payload_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Payload);
      }
      if (optimisticUpdate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OptimisticUpdate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (payload_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Payload);
      }
      if (optimisticUpdate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OptimisticUpdate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (payload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
      }
      if (optimisticUpdate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OptimisticUpdate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerAction other) {
      if (other == null) {
        return;
      }
      if (other.payload_ != null) {
        if (payload_ == null) {
          Payload = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        Payload.MergeFrom(other.Payload);
      }
      if (other.optimisticUpdate_ != null) {
        if (optimisticUpdate_ == null) {
          OptimisticUpdate = new global::Spelldawn.Protos.CommandList();
        }
        OptimisticUpdate.MergeFrom(other.OptimisticUpdate);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (payload_ == null) {
              Payload = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(Payload);
            break;
          }
          case 18: {
            if (optimisticUpdate_ == null) {
              OptimisticUpdate = new global::Spelldawn.Protos.CommandList();
            }
            input.ReadMessage(OptimisticUpdate);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (payload_ == null) {
              Payload = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(Payload);
            break;
          }
          case 18: {
            if (optimisticUpdate_ == null) {
              OptimisticUpdate = new global::Spelldawn.Protos.CommandList();
            }
            input.ReadMessage(OptimisticUpdate);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Spend an action to gain 1 mana.
  ///
  /// Optimistic: Mana is added immediately.
  /// </summary>
  public sealed partial class GainManaAction : pb::IMessage<GainManaAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GainManaAction> _parser = new pb::MessageParser<GainManaAction>(() => new GainManaAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GainManaAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GainManaAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GainManaAction(GainManaAction other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GainManaAction Clone() {
      return new GainManaAction(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GainManaAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GainManaAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GainManaAction other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Spend an action to draw a card.
  ///
  /// Optimistic: Face-down card animates to reveal area.
  /// </summary>
  public sealed partial class DrawCardAction : pb::IMessage<DrawCardAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DrawCardAction> _parser = new pb::MessageParser<DrawCardAction>(() => new DrawCardAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrawCardAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawCardAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawCardAction(DrawCardAction other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawCardAction Clone() {
      return new DrawCardAction(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrawCardAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrawCardAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrawCardAction other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Spend an action to place a level counter on a room.
  ///
  /// Optimistic: Counter is added immediately
  /// </summary>
  public sealed partial class LevelUpAction : pb::IMessage<LevelUpAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelUpAction> _parser = new pb::MessageParser<LevelUpAction>(() => new LevelUpAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelUpAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelUpAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelUpAction(LevelUpAction other) : this() {
      roomId_ = other.roomId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelUpAction Clone() {
      return new LevelUpAction(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private global::Spelldawn.Protos.RoomId roomId_ = global::Spelldawn.Protos.RoomId.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RoomId RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelUpAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelUpAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != global::Spelldawn.Protos.RoomId.Unspecified) hash ^= RoomId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RoomId != global::Spelldawn.Protos.RoomId.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RoomId != global::Spelldawn.Protos.RoomId.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != global::Spelldawn.Protos.RoomId.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelUpAction other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != global::Spelldawn.Protos.RoomId.Unspecified) {
        RoomId = other.RoomId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = (global::Spelldawn.Protos.RoomId) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RoomId = (global::Spelldawn.Protos.RoomId) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CardTarget : pb::IMessage<CardTarget>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CardTarget> _parser = new pb::MessageParser<CardTarget>(() => new CardTarget());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardTarget> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardTarget(CardTarget other) : this() {
      switch (other.CardTargetCase) {
        case CardTargetOneofCase.RoomId:
          RoomId = other.RoomId;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardTarget Clone() {
      return new CardTarget(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RoomId RoomId {
      get { return cardTargetCase_ == CardTargetOneofCase.RoomId ? (global::Spelldawn.Protos.RoomId) cardTarget_ : global::Spelldawn.Protos.RoomId.Unspecified; }
      set {
        cardTarget_ = value;
        cardTargetCase_ = CardTargetOneofCase.RoomId;
      }
    }

    private object cardTarget_;
    /// <summary>Enum of possible cases for the "card_target" oneof.</summary>
    public enum CardTargetOneofCase {
      None = 0,
      RoomId = 1,
    }
    private CardTargetOneofCase cardTargetCase_ = CardTargetOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardTargetOneofCase CardTargetCase {
      get { return cardTargetCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCardTarget() {
      cardTargetCase_ = CardTargetOneofCase.None;
      cardTarget_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardTarget);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (CardTargetCase != other.CardTargetCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cardTargetCase_ == CardTargetOneofCase.RoomId) hash ^= RoomId.GetHashCode();
      hash ^= (int) cardTargetCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (cardTargetCase_ == CardTargetOneofCase.RoomId) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (cardTargetCase_ == CardTargetOneofCase.RoomId) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cardTargetCase_ == CardTargetOneofCase.RoomId) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardTarget other) {
      if (other == null) {
        return;
      }
      switch (other.CardTargetCase) {
        case CardTargetOneofCase.RoomId:
          RoomId = other.RoomId;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            cardTarget_ = input.ReadEnum();
            cardTargetCase_ = CardTargetOneofCase.RoomId;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            cardTarget_ = input.ReadEnum();
            cardTargetCase_ = CardTargetOneofCase.RoomId;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Spend an action to play a card from hand.
  ///
  /// Optimistic:
  ///   - Mana and action cost is spent immediately, and 'can play' values for
  ///     other cards in hand are optimistically updated
  ///   - Other costs like 'sacrifice an artifact' are not optimistic and are
  ///     handled like choices
  ///   - Targeted cards select their *first* valid target (cards, rooms, players)
  ///     optimistically. If additional targets are required, they're not handled
  ///     optimistically, and this play pattern should possibly be avoided.
  ///   - Cards that require a choice to be made before resolving do not display
  ///     the options optimistically, instead they animate to the reveal card area
  ///   - Item cards which don't require a choice to be made or target simply
  ///     animate into the play area optimistically
  ///   - Spell cards animate to the reveal card area and wait for their effects to be
  ///     applied
  ///   - Minion and Project cards animate to their selected room optimistically
  /// </summary>
  public sealed partial class PlayCardAction : pb::IMessage<PlayCardAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayCardAction> _parser = new pb::MessageParser<PlayCardAction>(() => new PlayCardAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayCardAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCardAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCardAction(PlayCardAction other) : this() {
      cardId_ = other.cardId_ != null ? other.cardId_.Clone() : null;
      target_ = other.target_ != null ? other.target_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCardAction Clone() {
      return new PlayCardAction(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private global::Spelldawn.Protos.CardId cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardId CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 2;
    private global::Spelldawn.Protos.CardTarget target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardTarget Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayCardAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayCardAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CardId, other.CardId)) return false;
      if (!object.Equals(Target, other.Target)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cardId_ != null) hash ^= CardId.GetHashCode();
      if (target_ != null) hash ^= Target.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (cardId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardId);
      }
      if (target_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (cardId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardId);
      }
      if (target_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cardId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardId);
      }
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayCardAction other) {
      if (other == null) {
        return;
      }
      if (other.cardId_ != null) {
        if (cardId_ == null) {
          CardId = new global::Spelldawn.Protos.CardId();
        }
        CardId.MergeFrom(other.CardId);
      }
      if (other.target_ != null) {
        if (target_ == null) {
          Target = new global::Spelldawn.Protos.CardTarget();
        }
        Target.MergeFrom(other.Target);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cardId_ == null) {
              CardId = new global::Spelldawn.Protos.CardId();
            }
            input.ReadMessage(CardId);
            break;
          }
          case 18: {
            if (target_ == null) {
              Target = new global::Spelldawn.Protos.CardTarget();
            }
            input.ReadMessage(Target);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (cardId_ == null) {
              CardId = new global::Spelldawn.Protos.CardId();
            }
            input.ReadMessage(CardId);
            break;
          }
          case 18: {
            if (target_ == null) {
              Target = new global::Spelldawn.Protos.CardTarget();
            }
            input.ReadMessage(Target);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Spend an action to initiate a raid on one of the overlord's rooms
  ///
  /// Optimistic: Raid start animation plays
  /// </summary>
  public sealed partial class InitiateRaidAction : pb::IMessage<InitiateRaidAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InitiateRaidAction> _parser = new pb::MessageParser<InitiateRaidAction>(() => new InitiateRaidAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitiateRaidAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitiateRaidAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitiateRaidAction(InitiateRaidAction other) : this() {
      roomId_ = other.roomId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitiateRaidAction Clone() {
      return new InitiateRaidAction(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private global::Spelldawn.Protos.RoomId roomId_ = global::Spelldawn.Protos.RoomId.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RoomId RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitiateRaidAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitiateRaidAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != global::Spelldawn.Protos.RoomId.Unspecified) hash ^= RoomId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RoomId != global::Spelldawn.Protos.RoomId.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RoomId != global::Spelldawn.Protos.RoomId.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != global::Spelldawn.Protos.RoomId.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitiateRaidAction other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != global::Spelldawn.Protos.RoomId.Unspecified) {
        RoomId = other.RoomId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = (global::Spelldawn.Protos.RoomId) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RoomId = (global::Spelldawn.Protos.RoomId) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Possible game actions taken by the user.
  ///
  /// Actions have an associated 'optimistic' behavior to display while waiting
  /// for a server response. The client should not send multiple actions at the
  /// same time -- interaction should be disabled while an action is pending.
  /// </summary>
  public sealed partial class GameAction : pb::IMessage<GameAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameAction> _parser = new pb::MessageParser<GameAction>(() => new GameAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameAction(GameAction other) : this() {
      switch (other.ActionCase) {
        case ActionOneofCase.ServerAction:
          ServerAction = other.ServerAction.Clone();
          break;
        case ActionOneofCase.GainMana:
          GainMana = other.GainMana.Clone();
          break;
        case ActionOneofCase.DrawCard:
          DrawCard = other.DrawCard.Clone();
          break;
        case ActionOneofCase.LevelUp:
          LevelUp = other.LevelUp.Clone();
          break;
        case ActionOneofCase.PlayCard:
          PlayCard = other.PlayCard.Clone();
          break;
        case ActionOneofCase.InitiateRaid:
          InitiateRaid = other.InitiateRaid.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameAction Clone() {
      return new GameAction(this);
    }

    /// <summary>Field number for the "server_action" field.</summary>
    public const int ServerActionFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ServerAction ServerAction {
      get { return actionCase_ == ActionOneofCase.ServerAction ? (global::Spelldawn.Protos.ServerAction) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.ServerAction;
      }
    }

    /// <summary>Field number for the "gain_mana" field.</summary>
    public const int GainManaFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.GainManaAction GainMana {
      get { return actionCase_ == ActionOneofCase.GainMana ? (global::Spelldawn.Protos.GainManaAction) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.GainMana;
      }
    }

    /// <summary>Field number for the "draw_card" field.</summary>
    public const int DrawCardFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.DrawCardAction DrawCard {
      get { return actionCase_ == ActionOneofCase.DrawCard ? (global::Spelldawn.Protos.DrawCardAction) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.DrawCard;
      }
    }

    /// <summary>Field number for the "level_up" field.</summary>
    public const int LevelUpFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.LevelUpAction LevelUp {
      get { return actionCase_ == ActionOneofCase.LevelUp ? (global::Spelldawn.Protos.LevelUpAction) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.LevelUp;
      }
    }

    /// <summary>Field number for the "play_card" field.</summary>
    public const int PlayCardFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayCardAction PlayCard {
      get { return actionCase_ == ActionOneofCase.PlayCard ? (global::Spelldawn.Protos.PlayCardAction) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.PlayCard;
      }
    }

    /// <summary>Field number for the "initiate_raid" field.</summary>
    public const int InitiateRaidFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.InitiateRaidAction InitiateRaid {
      get { return actionCase_ == ActionOneofCase.InitiateRaid ? (global::Spelldawn.Protos.InitiateRaidAction) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.InitiateRaid;
      }
    }

    private object action_;
    /// <summary>Enum of possible cases for the "action" oneof.</summary>
    public enum ActionOneofCase {
      None = 0,
      ServerAction = 1,
      GainMana = 2,
      DrawCard = 3,
      LevelUp = 4,
      PlayCard = 5,
      InitiateRaid = 6,
    }
    private ActionOneofCase actionCase_ = ActionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionOneofCase ActionCase {
      get { return actionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      actionCase_ = ActionOneofCase.None;
      action_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ServerAction, other.ServerAction)) return false;
      if (!object.Equals(GainMana, other.GainMana)) return false;
      if (!object.Equals(DrawCard, other.DrawCard)) return false;
      if (!object.Equals(LevelUp, other.LevelUp)) return false;
      if (!object.Equals(PlayCard, other.PlayCard)) return false;
      if (!object.Equals(InitiateRaid, other.InitiateRaid)) return false;
      if (ActionCase != other.ActionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (actionCase_ == ActionOneofCase.ServerAction) hash ^= ServerAction.GetHashCode();
      if (actionCase_ == ActionOneofCase.GainMana) hash ^= GainMana.GetHashCode();
      if (actionCase_ == ActionOneofCase.DrawCard) hash ^= DrawCard.GetHashCode();
      if (actionCase_ == ActionOneofCase.LevelUp) hash ^= LevelUp.GetHashCode();
      if (actionCase_ == ActionOneofCase.PlayCard) hash ^= PlayCard.GetHashCode();
      if (actionCase_ == ActionOneofCase.InitiateRaid) hash ^= InitiateRaid.GetHashCode();
      hash ^= (int) actionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (actionCase_ == ActionOneofCase.ServerAction) {
        output.WriteRawTag(10);
        output.WriteMessage(ServerAction);
      }
      if (actionCase_ == ActionOneofCase.GainMana) {
        output.WriteRawTag(18);
        output.WriteMessage(GainMana);
      }
      if (actionCase_ == ActionOneofCase.DrawCard) {
        output.WriteRawTag(26);
        output.WriteMessage(DrawCard);
      }
      if (actionCase_ == ActionOneofCase.LevelUp) {
        output.WriteRawTag(34);
        output.WriteMessage(LevelUp);
      }
      if (actionCase_ == ActionOneofCase.PlayCard) {
        output.WriteRawTag(42);
        output.WriteMessage(PlayCard);
      }
      if (actionCase_ == ActionOneofCase.InitiateRaid) {
        output.WriteRawTag(50);
        output.WriteMessage(InitiateRaid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (actionCase_ == ActionOneofCase.ServerAction) {
        output.WriteRawTag(10);
        output.WriteMessage(ServerAction);
      }
      if (actionCase_ == ActionOneofCase.GainMana) {
        output.WriteRawTag(18);
        output.WriteMessage(GainMana);
      }
      if (actionCase_ == ActionOneofCase.DrawCard) {
        output.WriteRawTag(26);
        output.WriteMessage(DrawCard);
      }
      if (actionCase_ == ActionOneofCase.LevelUp) {
        output.WriteRawTag(34);
        output.WriteMessage(LevelUp);
      }
      if (actionCase_ == ActionOneofCase.PlayCard) {
        output.WriteRawTag(42);
        output.WriteMessage(PlayCard);
      }
      if (actionCase_ == ActionOneofCase.InitiateRaid) {
        output.WriteRawTag(50);
        output.WriteMessage(InitiateRaid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (actionCase_ == ActionOneofCase.ServerAction) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerAction);
      }
      if (actionCase_ == ActionOneofCase.GainMana) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GainMana);
      }
      if (actionCase_ == ActionOneofCase.DrawCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DrawCard);
      }
      if (actionCase_ == ActionOneofCase.LevelUp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelUp);
      }
      if (actionCase_ == ActionOneofCase.PlayCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayCard);
      }
      if (actionCase_ == ActionOneofCase.InitiateRaid) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitiateRaid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameAction other) {
      if (other == null) {
        return;
      }
      switch (other.ActionCase) {
        case ActionOneofCase.ServerAction:
          if (ServerAction == null) {
            ServerAction = new global::Spelldawn.Protos.ServerAction();
          }
          ServerAction.MergeFrom(other.ServerAction);
          break;
        case ActionOneofCase.GainMana:
          if (GainMana == null) {
            GainMana = new global::Spelldawn.Protos.GainManaAction();
          }
          GainMana.MergeFrom(other.GainMana);
          break;
        case ActionOneofCase.DrawCard:
          if (DrawCard == null) {
            DrawCard = new global::Spelldawn.Protos.DrawCardAction();
          }
          DrawCard.MergeFrom(other.DrawCard);
          break;
        case ActionOneofCase.LevelUp:
          if (LevelUp == null) {
            LevelUp = new global::Spelldawn.Protos.LevelUpAction();
          }
          LevelUp.MergeFrom(other.LevelUp);
          break;
        case ActionOneofCase.PlayCard:
          if (PlayCard == null) {
            PlayCard = new global::Spelldawn.Protos.PlayCardAction();
          }
          PlayCard.MergeFrom(other.PlayCard);
          break;
        case ActionOneofCase.InitiateRaid:
          if (InitiateRaid == null) {
            InitiateRaid = new global::Spelldawn.Protos.InitiateRaidAction();
          }
          InitiateRaid.MergeFrom(other.InitiateRaid);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Spelldawn.Protos.ServerAction subBuilder = new global::Spelldawn.Protos.ServerAction();
            if (actionCase_ == ActionOneofCase.ServerAction) {
              subBuilder.MergeFrom(ServerAction);
            }
            input.ReadMessage(subBuilder);
            ServerAction = subBuilder;
            break;
          }
          case 18: {
            global::Spelldawn.Protos.GainManaAction subBuilder = new global::Spelldawn.Protos.GainManaAction();
            if (actionCase_ == ActionOneofCase.GainMana) {
              subBuilder.MergeFrom(GainMana);
            }
            input.ReadMessage(subBuilder);
            GainMana = subBuilder;
            break;
          }
          case 26: {
            global::Spelldawn.Protos.DrawCardAction subBuilder = new global::Spelldawn.Protos.DrawCardAction();
            if (actionCase_ == ActionOneofCase.DrawCard) {
              subBuilder.MergeFrom(DrawCard);
            }
            input.ReadMessage(subBuilder);
            DrawCard = subBuilder;
            break;
          }
          case 34: {
            global::Spelldawn.Protos.LevelUpAction subBuilder = new global::Spelldawn.Protos.LevelUpAction();
            if (actionCase_ == ActionOneofCase.LevelUp) {
              subBuilder.MergeFrom(LevelUp);
            }
            input.ReadMessage(subBuilder);
            LevelUp = subBuilder;
            break;
          }
          case 42: {
            global::Spelldawn.Protos.PlayCardAction subBuilder = new global::Spelldawn.Protos.PlayCardAction();
            if (actionCase_ == ActionOneofCase.PlayCard) {
              subBuilder.MergeFrom(PlayCard);
            }
            input.ReadMessage(subBuilder);
            PlayCard = subBuilder;
            break;
          }
          case 50: {
            global::Spelldawn.Protos.InitiateRaidAction subBuilder = new global::Spelldawn.Protos.InitiateRaidAction();
            if (actionCase_ == ActionOneofCase.InitiateRaid) {
              subBuilder.MergeFrom(InitiateRaid);
            }
            input.ReadMessage(subBuilder);
            InitiateRaid = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Spelldawn.Protos.ServerAction subBuilder = new global::Spelldawn.Protos.ServerAction();
            if (actionCase_ == ActionOneofCase.ServerAction) {
              subBuilder.MergeFrom(ServerAction);
            }
            input.ReadMessage(subBuilder);
            ServerAction = subBuilder;
            break;
          }
          case 18: {
            global::Spelldawn.Protos.GainManaAction subBuilder = new global::Spelldawn.Protos.GainManaAction();
            if (actionCase_ == ActionOneofCase.GainMana) {
              subBuilder.MergeFrom(GainMana);
            }
            input.ReadMessage(subBuilder);
            GainMana = subBuilder;
            break;
          }
          case 26: {
            global::Spelldawn.Protos.DrawCardAction subBuilder = new global::Spelldawn.Protos.DrawCardAction();
            if (actionCase_ == ActionOneofCase.DrawCard) {
              subBuilder.MergeFrom(DrawCard);
            }
            input.ReadMessage(subBuilder);
            DrawCard = subBuilder;
            break;
          }
          case 34: {
            global::Spelldawn.Protos.LevelUpAction subBuilder = new global::Spelldawn.Protos.LevelUpAction();
            if (actionCase_ == ActionOneofCase.LevelUp) {
              subBuilder.MergeFrom(LevelUp);
            }
            input.ReadMessage(subBuilder);
            LevelUp = subBuilder;
            break;
          }
          case 42: {
            global::Spelldawn.Protos.PlayCardAction subBuilder = new global::Spelldawn.Protos.PlayCardAction();
            if (actionCase_ == ActionOneofCase.PlayCard) {
              subBuilder.MergeFrom(PlayCard);
            }
            input.ReadMessage(subBuilder);
            PlayCard = subBuilder;
            break;
          }
          case 50: {
            global::Spelldawn.Protos.InitiateRaidAction subBuilder = new global::Spelldawn.Protos.InitiateRaidAction();
            if (actionCase_ == ActionOneofCase.InitiateRaid) {
              subBuilder.MergeFrom(InitiateRaid);
            }
            input.ReadMessage(subBuilder);
            InitiateRaid = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Updates the content of the user interface to display the provided node,
  /// replacing all existing UI elements.
  /// </summary>
  public sealed partial class RenderInterfaceCommand : pb::IMessage<RenderInterfaceCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RenderInterfaceCommand> _parser = new pb::MessageParser<RenderInterfaceCommand>(() => new RenderInterfaceCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RenderInterfaceCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenderInterfaceCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenderInterfaceCommand(RenderInterfaceCommand other) : this() {
      node_ = other.node_ != null ? other.node_.Clone() : null;
      position_ = other.position_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenderInterfaceCommand Clone() {
      return new RenderInterfaceCommand(this);
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 1;
    private global::Spelldawn.Protos.Node node_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.Node Node {
      get { return node_; }
      set {
        node_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Spelldawn.Protos.InterfacePosition position_ = global::Spelldawn.Protos.InterfacePosition.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.InterfacePosition Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RenderInterfaceCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RenderInterfaceCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Node, other.Node)) return false;
      if (Position != other.Position) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (node_ != null) hash ^= Node.GetHashCode();
      if (Position != global::Spelldawn.Protos.InterfacePosition.Unspecified) hash ^= Position.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (node_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Node);
      }
      if (Position != global::Spelldawn.Protos.InterfacePosition.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (node_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Node);
      }
      if (Position != global::Spelldawn.Protos.InterfacePosition.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (node_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
      }
      if (Position != global::Spelldawn.Protos.InterfacePosition.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Position);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RenderInterfaceCommand other) {
      if (other == null) {
        return;
      }
      if (other.node_ != null) {
        if (node_ == null) {
          Node = new global::Spelldawn.Protos.Node();
        }
        Node.MergeFrom(other.Node);
      }
      if (other.Position != global::Spelldawn.Protos.InterfacePosition.Unspecified) {
        Position = other.Position;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (node_ == null) {
              Node = new global::Spelldawn.Protos.Node();
            }
            input.ReadMessage(Node);
            break;
          }
          case 16: {
            Position = (global::Spelldawn.Protos.InterfacePosition) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (node_ == null) {
              Node = new global::Spelldawn.Protos.Node();
            }
            input.ReadMessage(Node);
            break;
          }
          case 16: {
            Position = (global::Spelldawn.Protos.InterfacePosition) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Many of the below commands are specific cases of RenderGame. They are
  /// differentiated in order to simplify the diffing logic the client needs
  /// to perform to detect and animate changes.
  /// </summary>
  public sealed partial class RenderGameCommand : pb::IMessage<RenderGameCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RenderGameCommand> _parser = new pb::MessageParser<RenderGameCommand>(() => new RenderGameCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RenderGameCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenderGameCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenderGameCommand(RenderGameCommand other) : this() {
      game_ = other.game_ != null ? other.game_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenderGameCommand Clone() {
      return new RenderGameCommand(this);
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 1;
    private global::Spelldawn.Protos.GameView game_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.GameView Game {
      get { return game_; }
      set {
        game_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RenderGameCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RenderGameCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Game, other.Game)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (game_ != null) hash ^= Game.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (game_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Game);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (game_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Game);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (game_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Game);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RenderGameCommand other) {
      if (other == null) {
        return;
      }
      if (other.game_ != null) {
        if (game_ == null) {
          Game = new global::Spelldawn.Protos.GameView();
        }
        Game.MergeFrom(other.Game);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (game_ == null) {
              Game = new global::Spelldawn.Protos.GameView();
            }
            input.ReadMessage(Game);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (game_ == null) {
              Game = new global::Spelldawn.Protos.GameView();
            }
            input.ReadMessage(Game);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InitiateRaidCommand : pb::IMessage<InitiateRaidCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InitiateRaidCommand> _parser = new pb::MessageParser<InitiateRaidCommand>(() => new InitiateRaidCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitiateRaidCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitiateRaidCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitiateRaidCommand(InitiateRaidCommand other) : this() {
      initiator_ = other.initiator_;
      roomId_ = other.roomId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitiateRaidCommand Clone() {
      return new InitiateRaidCommand(this);
    }

    /// <summary>Field number for the "initiator" field.</summary>
    public const int InitiatorFieldNumber = 1;
    private global::Spelldawn.Protos.PlayerName initiator_ = global::Spelldawn.Protos.PlayerName.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName Initiator {
      get { return initiator_; }
      set {
        initiator_ = value;
      }
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private global::Spelldawn.Protos.RoomId roomId_ = global::Spelldawn.Protos.RoomId.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RoomId RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitiateRaidCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitiateRaidCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Initiator != other.Initiator) return false;
      if (RoomId != other.RoomId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Initiator != global::Spelldawn.Protos.PlayerName.Unspecified) hash ^= Initiator.GetHashCode();
      if (RoomId != global::Spelldawn.Protos.RoomId.Unspecified) hash ^= RoomId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Initiator != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Initiator);
      }
      if (RoomId != global::Spelldawn.Protos.RoomId.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Initiator != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Initiator);
      }
      if (RoomId != global::Spelldawn.Protos.RoomId.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Initiator != global::Spelldawn.Protos.PlayerName.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Initiator);
      }
      if (RoomId != global::Spelldawn.Protos.RoomId.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitiateRaidCommand other) {
      if (other == null) {
        return;
      }
      if (other.Initiator != global::Spelldawn.Protos.PlayerName.Unspecified) {
        Initiator = other.Initiator;
      }
      if (other.RoomId != global::Spelldawn.Protos.RoomId.Unspecified) {
        RoomId = other.RoomId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Initiator = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
          case 16: {
            RoomId = (global::Spelldawn.Protos.RoomId) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Initiator = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
          case 16: {
            RoomId = (global::Spelldawn.Protos.RoomId) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EndRaidCommand : pb::IMessage<EndRaidCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EndRaidCommand> _parser = new pb::MessageParser<EndRaidCommand>(() => new EndRaidCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EndRaidCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndRaidCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndRaidCommand(EndRaidCommand other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndRaidCommand Clone() {
      return new EndRaidCommand(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EndRaidCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EndRaidCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EndRaidCommand other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Makes a new card.
  /// </summary>
  public sealed partial class CreateCardCommand : pb::IMessage<CreateCardCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateCardCommand> _parser = new pb::MessageParser<CreateCardCommand>(() => new CreateCardCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateCardCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCardCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCardCommand(CreateCardCommand other) : this() {
      card_ = other.card_ != null ? other.card_.Clone() : null;
      animation_ = other.animation_;
      disallowOptimistic_ = other.disallowOptimistic_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCardCommand Clone() {
      return new CreateCardCommand(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private global::Spelldawn.Protos.CardView card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardView Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    /// <summary>Field number for the "animation" field.</summary>
    public const int AnimationFieldNumber = 2;
    private global::Spelldawn.Protos.CardCreationAnimation animation_ = global::Spelldawn.Protos.CardCreationAnimation.Unspecified;
    /// <summary>
    ///* Optionally, an animation to play after creating the card. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardCreationAnimation Animation {
      get { return animation_; }
      set {
        animation_ = value;
      }
    }

    /// <summary>Field number for the "disallow_optimistic" field.</summary>
    public const int DisallowOptimisticFieldNumber = 3;
    private bool disallowOptimistic_;
    /// <summary>
    ///*
    /// If an optimistic card has already been created, it is updated to match the provided
    /// 'card' instead unless this value is 'true'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisallowOptimistic {
      get { return disallowOptimistic_; }
      set {
        disallowOptimistic_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateCardCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateCardCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Card, other.Card)) return false;
      if (Animation != other.Animation) return false;
      if (DisallowOptimistic != other.DisallowOptimistic) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (card_ != null) hash ^= Card.GetHashCode();
      if (Animation != global::Spelldawn.Protos.CardCreationAnimation.Unspecified) hash ^= Animation.GetHashCode();
      if (DisallowOptimistic != false) hash ^= DisallowOptimistic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (card_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Card);
      }
      if (Animation != global::Spelldawn.Protos.CardCreationAnimation.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Animation);
      }
      if (DisallowOptimistic != false) {
        output.WriteRawTag(24);
        output.WriteBool(DisallowOptimistic);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (card_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Card);
      }
      if (Animation != global::Spelldawn.Protos.CardCreationAnimation.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Animation);
      }
      if (DisallowOptimistic != false) {
        output.WriteRawTag(24);
        output.WriteBool(DisallowOptimistic);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      if (Animation != global::Spelldawn.Protos.CardCreationAnimation.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Animation);
      }
      if (DisallowOptimistic != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateCardCommand other) {
      if (other == null) {
        return;
      }
      if (other.card_ != null) {
        if (card_ == null) {
          Card = new global::Spelldawn.Protos.CardView();
        }
        Card.MergeFrom(other.Card);
      }
      if (other.Animation != global::Spelldawn.Protos.CardCreationAnimation.Unspecified) {
        Animation = other.Animation;
      }
      if (other.DisallowOptimistic != false) {
        DisallowOptimistic = other.DisallowOptimistic;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (card_ == null) {
              Card = new global::Spelldawn.Protos.CardView();
            }
            input.ReadMessage(Card);
            break;
          }
          case 16: {
            Animation = (global::Spelldawn.Protos.CardCreationAnimation) input.ReadEnum();
            break;
          }
          case 24: {
            DisallowOptimistic = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (card_ == null) {
              Card = new global::Spelldawn.Protos.CardView();
            }
            input.ReadMessage(Card);
            break;
          }
          case 16: {
            Animation = (global::Spelldawn.Protos.CardCreationAnimation) input.ReadEnum();
            break;
          }
          case 24: {
            DisallowOptimistic = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Updates a card. Note that changes to 'on_create_position' are ignored here,
  /// use MoveCardCommand instead to reposition cards.
  /// </summary>
  public sealed partial class UpdateCardCommand : pb::IMessage<UpdateCardCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpdateCardCommand> _parser = new pb::MessageParser<UpdateCardCommand>(() => new UpdateCardCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateCardCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCardCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCardCommand(UpdateCardCommand other) : this() {
      card_ = other.card_ != null ? other.card_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCardCommand Clone() {
      return new UpdateCardCommand(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private global::Spelldawn.Protos.CardView card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardView Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateCardCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateCardCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Card, other.Card)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (card_ != null) hash ^= Card.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (card_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Card);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (card_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Card);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateCardCommand other) {
      if (other == null) {
        return;
      }
      if (other.card_ != null) {
        if (card_ == null) {
          Card = new global::Spelldawn.Protos.CardView();
        }
        Card.MergeFrom(other.Card);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (card_ == null) {
              Card = new global::Spelldawn.Protos.CardView();
            }
            input.ReadMessage(Card);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (card_ == null) {
              Card = new global::Spelldawn.Protos.CardView();
            }
            input.ReadMessage(Card);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MoveGameObjectCommand : pb::IMessage<MoveGameObjectCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MoveGameObjectCommand> _parser = new pb::MessageParser<MoveGameObjectCommand>(() => new MoveGameObjectCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveGameObjectCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveGameObjectCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveGameObjectCommand(MoveGameObjectCommand other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      disableAnimation_ = other.disableAnimation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveGameObjectCommand Clone() {
      return new MoveGameObjectCommand(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::Spelldawn.Protos.GameObjectId id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.GameObjectId Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Spelldawn.Protos.ObjectPosition position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPosition Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "disable_animation" field.</summary>
    public const int DisableAnimationFieldNumber = 3;
    private bool disableAnimation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableAnimation {
      get { return disableAnimation_; }
      set {
        disableAnimation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveGameObjectCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveGameObjectCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (DisableAnimation != other.DisableAnimation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (DisableAnimation != false) hash ^= DisableAnimation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (DisableAnimation != false) {
        output.WriteRawTag(24);
        output.WriteBool(DisableAnimation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (DisableAnimation != false) {
        output.WriteRawTag(24);
        output.WriteBool(DisableAnimation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (DisableAnimation != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveGameObjectCommand other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::Spelldawn.Protos.GameObjectId();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Spelldawn.Protos.ObjectPosition();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.DisableAnimation != false) {
        DisableAnimation = other.DisableAnimation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::Spelldawn.Protos.GameObjectId();
            }
            input.ReadMessage(Id);
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::Spelldawn.Protos.ObjectPosition();
            }
            input.ReadMessage(Position);
            break;
          }
          case 24: {
            DisableAnimation = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::Spelldawn.Protos.GameObjectId();
            }
            input.ReadMessage(Id);
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::Spelldawn.Protos.ObjectPosition();
            }
            input.ReadMessage(Position);
            break;
          }
          case 24: {
            DisableAnimation = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DestroyCardCommand : pb::IMessage<DestroyCardCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DestroyCardCommand> _parser = new pb::MessageParser<DestroyCardCommand>(() => new DestroyCardCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DestroyCardCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestroyCardCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestroyCardCommand(DestroyCardCommand other) : this() {
      cardId_ = other.cardId_ != null ? other.cardId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestroyCardCommand Clone() {
      return new DestroyCardCommand(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private global::Spelldawn.Protos.CardId cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardId CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DestroyCardCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DestroyCardCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CardId, other.CardId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cardId_ != null) hash ^= CardId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (cardId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (cardId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cardId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DestroyCardCommand other) {
      if (other == null) {
        return;
      }
      if (other.cardId_ != null) {
        if (cardId_ == null) {
          CardId = new global::Spelldawn.Protos.CardId();
        }
        CardId.MergeFrom(other.CardId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cardId_ == null) {
              CardId = new global::Spelldawn.Protos.CardId();
            }
            input.ReadMessage(CardId);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (cardId_ == null) {
              CardId = new global::Spelldawn.Protos.CardId();
            }
            input.ReadMessage(CardId);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UpdatePlayerStateCommand : pb::IMessage<UpdatePlayerStateCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpdatePlayerStateCommand> _parser = new pb::MessageParser<UpdatePlayerStateCommand>(() => new UpdatePlayerStateCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatePlayerStateCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerStateCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerStateCommand(UpdatePlayerStateCommand other) : this() {
      playerName_ = other.playerName_;
      info_ = other.info_ != null ? other.info_.Clone() : null;
      score_ = other.score_ != null ? other.score_.Clone() : null;
      actionTracker_ = other.actionTracker_ != null ? other.actionTracker_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerStateCommand Clone() {
      return new UpdatePlayerStateCommand(this);
    }

    /// <summary>Field number for the "player_name" field.</summary>
    public const int PlayerNameFieldNumber = 1;
    private global::Spelldawn.Protos.PlayerName playerName_ = global::Spelldawn.Protos.PlayerName.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerName PlayerName {
      get { return playerName_; }
      set {
        playerName_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private global::Spelldawn.Protos.PlayerInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayerInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private global::Spelldawn.Protos.ScoreView score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ScoreView Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "action_tracker" field.</summary>
    public const int ActionTrackerFieldNumber = 4;
    private global::Spelldawn.Protos.ActionTrackerView actionTracker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ActionTrackerView ActionTracker {
      get { return actionTracker_; }
      set {
        actionTracker_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatePlayerStateCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatePlayerStateCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerName != other.PlayerName) return false;
      if (!object.Equals(Info, other.Info)) return false;
      if (!object.Equals(Score, other.Score)) return false;
      if (!object.Equals(ActionTracker, other.ActionTracker)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerName != global::Spelldawn.Protos.PlayerName.Unspecified) hash ^= PlayerName.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (score_ != null) hash ^= Score.GetHashCode();
      if (actionTracker_ != null) hash ^= ActionTracker.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerName != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PlayerName);
      }
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
      if (score_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Score);
      }
      if (actionTracker_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ActionTracker);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerName != global::Spelldawn.Protos.PlayerName.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PlayerName);
      }
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
      if (score_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Score);
      }
      if (actionTracker_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ActionTracker);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerName != global::Spelldawn.Protos.PlayerName.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PlayerName);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (score_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Score);
      }
      if (actionTracker_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActionTracker);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatePlayerStateCommand other) {
      if (other == null) {
        return;
      }
      if (other.PlayerName != global::Spelldawn.Protos.PlayerName.Unspecified) {
        PlayerName = other.PlayerName;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::Spelldawn.Protos.PlayerInfo();
        }
        Info.MergeFrom(other.Info);
      }
      if (other.score_ != null) {
        if (score_ == null) {
          Score = new global::Spelldawn.Protos.ScoreView();
        }
        Score.MergeFrom(other.Score);
      }
      if (other.actionTracker_ != null) {
        if (actionTracker_ == null) {
          ActionTracker = new global::Spelldawn.Protos.ActionTrackerView();
        }
        ActionTracker.MergeFrom(other.ActionTracker);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerName = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
          case 18: {
            if (info_ == null) {
              Info = new global::Spelldawn.Protos.PlayerInfo();
            }
            input.ReadMessage(Info);
            break;
          }
          case 26: {
            if (score_ == null) {
              Score = new global::Spelldawn.Protos.ScoreView();
            }
            input.ReadMessage(Score);
            break;
          }
          case 34: {
            if (actionTracker_ == null) {
              ActionTracker = new global::Spelldawn.Protos.ActionTrackerView();
            }
            input.ReadMessage(ActionTracker);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerName = (global::Spelldawn.Protos.PlayerName) input.ReadEnum();
            break;
          }
          case 18: {
            if (info_ == null) {
              Info = new global::Spelldawn.Protos.PlayerInfo();
            }
            input.ReadMessage(Info);
            break;
          }
          case 26: {
            if (score_ == null) {
              Score = new global::Spelldawn.Protos.ScoreView();
            }
            input.ReadMessage(Score);
            break;
          }
          case 34: {
            if (actionTracker_ == null) {
              ActionTracker = new global::Spelldawn.Protos.ActionTrackerView();
            }
            input.ReadMessage(ActionTracker);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Fire a projectile from one game object at another.
  /// </summary>
  public sealed partial class FireProjectileCommand : pb::IMessage<FireProjectileCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FireProjectileCommand> _parser = new pb::MessageParser<FireProjectileCommand>(() => new FireProjectileCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FireProjectileCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FireProjectileCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FireProjectileCommand(FireProjectileCommand other) : this() {
      sourceId_ = other.sourceId_ != null ? other.sourceId_.Clone() : null;
      targetId_ = other.targetId_ != null ? other.targetId_.Clone() : null;
      projectile_ = other.projectile_ != null ? other.projectile_.Clone() : null;
      travelDuration_ = other.travelDuration_ != null ? other.travelDuration_.Clone() : null;
      additionalHit_ = other.additionalHit_ != null ? other.additionalHit_.Clone() : null;
      additionalHitDelay_ = other.additionalHitDelay_ != null ? other.additionalHitDelay_.Clone() : null;
      hideDuration_ = other.hideDuration_ != null ? other.hideDuration_.Clone() : null;
      jumpToPosition_ = other.jumpToPosition_ != null ? other.jumpToPosition_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FireProjectileCommand Clone() {
      return new FireProjectileCommand(this);
    }

    /// <summary>Field number for the "source_id" field.</summary>
    public const int SourceIdFieldNumber = 1;
    private global::Spelldawn.Protos.GameObjectId sourceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.GameObjectId SourceId {
      get { return sourceId_; }
      set {
        sourceId_ = value;
      }
    }

    /// <summary>Field number for the "target_id" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private global::Spelldawn.Protos.GameObjectId targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.GameObjectId TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "projectile" field.</summary>
    public const int ProjectileFieldNumber = 3;
    private global::Spelldawn.Protos.ProjectileAddress projectile_;
    /// <summary>
    ///* Projectile to fire from the 'source_id' card to 'target_id' 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ProjectileAddress Projectile {
      get { return projectile_; }
      set {
        projectile_ = value;
      }
    }

    /// <summary>Field number for the "travel_duration" field.</summary>
    public const int TravelDurationFieldNumber = 4;
    private global::Spelldawn.Protos.TimeValue travelDuration_;
    /// <summary>
    ///* How long the projectile should take to hit its target. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.TimeValue TravelDuration {
      get { return travelDuration_; }
      set {
        travelDuration_ = value;
      }
    }

    /// <summary>Field number for the "additional_hit" field.</summary>
    public const int AdditionalHitFieldNumber = 5;
    private global::Spelldawn.Protos.EffectAddress additionalHit_;
    /// <summary>
    ///* Additional effect to display on the target on hit. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.EffectAddress AdditionalHit {
      get { return additionalHit_; }
      set {
        additionalHit_ = value;
      }
    }

    /// <summary>Field number for the "additional_hit_delay" field.</summary>
    public const int AdditionalHitDelayFieldNumber = 6;
    private global::Spelldawn.Protos.TimeValue additionalHitDelay_;
    /// <summary>
    ///*
    /// Delay before showing the additional hit. If provided, the original
    /// projectile Hit effect will be hidden before showing the new hit effect.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.TimeValue AdditionalHitDelay {
      get { return additionalHitDelay_; }
      set {
        additionalHitDelay_ = value;
      }
    }

    /// <summary>Field number for the "hide_duration" field.</summary>
    public const int HideDurationFieldNumber = 7;
    private global::Spelldawn.Protos.TimeValue hideDuration_;
    /// <summary>
    ///*
    /// If provided, the target will be hidden for this duration after being hit
    /// and before jumping to 'jump_to_position'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.TimeValue HideDuration {
      get { return hideDuration_; }
      set {
        hideDuration_ = value;
      }
    }

    /// <summary>Field number for the "jump_to_position" field.</summary>
    public const int JumpToPositionFieldNumber = 8;
    private global::Spelldawn.Protos.ObjectPosition jumpToPosition_;
    /// <summary>
    ///*
    /// Position for the target to jump to after being hit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ObjectPosition JumpToPosition {
      get { return jumpToPosition_; }
      set {
        jumpToPosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FireProjectileCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FireProjectileCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SourceId, other.SourceId)) return false;
      if (!object.Equals(TargetId, other.TargetId)) return false;
      if (!object.Equals(Projectile, other.Projectile)) return false;
      if (!object.Equals(TravelDuration, other.TravelDuration)) return false;
      if (!object.Equals(AdditionalHit, other.AdditionalHit)) return false;
      if (!object.Equals(AdditionalHitDelay, other.AdditionalHitDelay)) return false;
      if (!object.Equals(HideDuration, other.HideDuration)) return false;
      if (!object.Equals(JumpToPosition, other.JumpToPosition)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sourceId_ != null) hash ^= SourceId.GetHashCode();
      if (targetId_ != null) hash ^= TargetId.GetHashCode();
      if (projectile_ != null) hash ^= Projectile.GetHashCode();
      if (travelDuration_ != null) hash ^= TravelDuration.GetHashCode();
      if (additionalHit_ != null) hash ^= AdditionalHit.GetHashCode();
      if (additionalHitDelay_ != null) hash ^= AdditionalHitDelay.GetHashCode();
      if (hideDuration_ != null) hash ^= HideDuration.GetHashCode();
      if (jumpToPosition_ != null) hash ^= JumpToPosition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (sourceId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SourceId);
      }
      if (targetId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetId);
      }
      if (projectile_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Projectile);
      }
      if (travelDuration_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TravelDuration);
      }
      if (additionalHit_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AdditionalHit);
      }
      if (additionalHitDelay_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(AdditionalHitDelay);
      }
      if (hideDuration_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(HideDuration);
      }
      if (jumpToPosition_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(JumpToPosition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (sourceId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SourceId);
      }
      if (targetId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetId);
      }
      if (projectile_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Projectile);
      }
      if (travelDuration_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TravelDuration);
      }
      if (additionalHit_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AdditionalHit);
      }
      if (additionalHitDelay_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(AdditionalHitDelay);
      }
      if (hideDuration_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(HideDuration);
      }
      if (jumpToPosition_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(JumpToPosition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sourceId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceId);
      }
      if (targetId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetId);
      }
      if (projectile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Projectile);
      }
      if (travelDuration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TravelDuration);
      }
      if (additionalHit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdditionalHit);
      }
      if (additionalHitDelay_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdditionalHitDelay);
      }
      if (hideDuration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HideDuration);
      }
      if (jumpToPosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JumpToPosition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FireProjectileCommand other) {
      if (other == null) {
        return;
      }
      if (other.sourceId_ != null) {
        if (sourceId_ == null) {
          SourceId = new global::Spelldawn.Protos.GameObjectId();
        }
        SourceId.MergeFrom(other.SourceId);
      }
      if (other.targetId_ != null) {
        if (targetId_ == null) {
          TargetId = new global::Spelldawn.Protos.GameObjectId();
        }
        TargetId.MergeFrom(other.TargetId);
      }
      if (other.projectile_ != null) {
        if (projectile_ == null) {
          Projectile = new global::Spelldawn.Protos.ProjectileAddress();
        }
        Projectile.MergeFrom(other.Projectile);
      }
      if (other.travelDuration_ != null) {
        if (travelDuration_ == null) {
          TravelDuration = new global::Spelldawn.Protos.TimeValue();
        }
        TravelDuration.MergeFrom(other.TravelDuration);
      }
      if (other.additionalHit_ != null) {
        if (additionalHit_ == null) {
          AdditionalHit = new global::Spelldawn.Protos.EffectAddress();
        }
        AdditionalHit.MergeFrom(other.AdditionalHit);
      }
      if (other.additionalHitDelay_ != null) {
        if (additionalHitDelay_ == null) {
          AdditionalHitDelay = new global::Spelldawn.Protos.TimeValue();
        }
        AdditionalHitDelay.MergeFrom(other.AdditionalHitDelay);
      }
      if (other.hideDuration_ != null) {
        if (hideDuration_ == null) {
          HideDuration = new global::Spelldawn.Protos.TimeValue();
        }
        HideDuration.MergeFrom(other.HideDuration);
      }
      if (other.jumpToPosition_ != null) {
        if (jumpToPosition_ == null) {
          JumpToPosition = new global::Spelldawn.Protos.ObjectPosition();
        }
        JumpToPosition.MergeFrom(other.JumpToPosition);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (sourceId_ == null) {
              SourceId = new global::Spelldawn.Protos.GameObjectId();
            }
            input.ReadMessage(SourceId);
            break;
          }
          case 18: {
            if (targetId_ == null) {
              TargetId = new global::Spelldawn.Protos.GameObjectId();
            }
            input.ReadMessage(TargetId);
            break;
          }
          case 26: {
            if (projectile_ == null) {
              Projectile = new global::Spelldawn.Protos.ProjectileAddress();
            }
            input.ReadMessage(Projectile);
            break;
          }
          case 34: {
            if (travelDuration_ == null) {
              TravelDuration = new global::Spelldawn.Protos.TimeValue();
            }
            input.ReadMessage(TravelDuration);
            break;
          }
          case 42: {
            if (additionalHit_ == null) {
              AdditionalHit = new global::Spelldawn.Protos.EffectAddress();
            }
            input.ReadMessage(AdditionalHit);
            break;
          }
          case 50: {
            if (additionalHitDelay_ == null) {
              AdditionalHitDelay = new global::Spelldawn.Protos.TimeValue();
            }
            input.ReadMessage(AdditionalHitDelay);
            break;
          }
          case 58: {
            if (hideDuration_ == null) {
              HideDuration = new global::Spelldawn.Protos.TimeValue();
            }
            input.ReadMessage(HideDuration);
            break;
          }
          case 66: {
            if (jumpToPosition_ == null) {
              JumpToPosition = new global::Spelldawn.Protos.ObjectPosition();
            }
            input.ReadMessage(JumpToPosition);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (sourceId_ == null) {
              SourceId = new global::Spelldawn.Protos.GameObjectId();
            }
            input.ReadMessage(SourceId);
            break;
          }
          case 18: {
            if (targetId_ == null) {
              TargetId = new global::Spelldawn.Protos.GameObjectId();
            }
            input.ReadMessage(TargetId);
            break;
          }
          case 26: {
            if (projectile_ == null) {
              Projectile = new global::Spelldawn.Protos.ProjectileAddress();
            }
            input.ReadMessage(Projectile);
            break;
          }
          case 34: {
            if (travelDuration_ == null) {
              TravelDuration = new global::Spelldawn.Protos.TimeValue();
            }
            input.ReadMessage(TravelDuration);
            break;
          }
          case 42: {
            if (additionalHit_ == null) {
              AdditionalHit = new global::Spelldawn.Protos.EffectAddress();
            }
            input.ReadMessage(AdditionalHit);
            break;
          }
          case 50: {
            if (additionalHitDelay_ == null) {
              AdditionalHitDelay = new global::Spelldawn.Protos.TimeValue();
            }
            input.ReadMessage(AdditionalHitDelay);
            break;
          }
          case 58: {
            if (hideDuration_ == null) {
              HideDuration = new global::Spelldawn.Protos.TimeValue();
            }
            input.ReadMessage(HideDuration);
            break;
          }
          case 66: {
            if (jumpToPosition_ == null) {
              JumpToPosition = new global::Spelldawn.Protos.ObjectPosition();
            }
            input.ReadMessage(JumpToPosition);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameCommand : pb::IMessage<GameCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameCommand> _parser = new pb::MessageParser<GameCommand>(() => new GameCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameCommand(GameCommand other) : this() {
      switch (other.CommandCase) {
        case CommandOneofCase.RenderInterface:
          RenderInterface = other.RenderInterface.Clone();
          break;
        case CommandOneofCase.RenderGame:
          RenderGame = other.RenderGame.Clone();
          break;
        case CommandOneofCase.InitiateRaid:
          InitiateRaid = other.InitiateRaid.Clone();
          break;
        case CommandOneofCase.EndRaid:
          EndRaid = other.EndRaid.Clone();
          break;
        case CommandOneofCase.CreateCard:
          CreateCard = other.CreateCard.Clone();
          break;
        case CommandOneofCase.UpdateCard:
          UpdateCard = other.UpdateCard.Clone();
          break;
        case CommandOneofCase.MoveGameObject:
          MoveGameObject = other.MoveGameObject.Clone();
          break;
        case CommandOneofCase.DestroyCard:
          DestroyCard = other.DestroyCard.Clone();
          break;
        case CommandOneofCase.UpdatePlayerState:
          UpdatePlayerState = other.UpdatePlayerState.Clone();
          break;
        case CommandOneofCase.FireProjectile:
          FireProjectile = other.FireProjectile.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameCommand Clone() {
      return new GameCommand(this);
    }

    /// <summary>Field number for the "render_interface" field.</summary>
    public const int RenderInterfaceFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RenderInterfaceCommand RenderInterface {
      get { return commandCase_ == CommandOneofCase.RenderInterface ? (global::Spelldawn.Protos.RenderInterfaceCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.RenderInterface;
      }
    }

    /// <summary>Field number for the "render_game" field.</summary>
    public const int RenderGameFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RenderGameCommand RenderGame {
      get { return commandCase_ == CommandOneofCase.RenderGame ? (global::Spelldawn.Protos.RenderGameCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.RenderGame;
      }
    }

    /// <summary>Field number for the "initiate_raid" field.</summary>
    public const int InitiateRaidFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.InitiateRaidCommand InitiateRaid {
      get { return commandCase_ == CommandOneofCase.InitiateRaid ? (global::Spelldawn.Protos.InitiateRaidCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.InitiateRaid;
      }
    }

    /// <summary>Field number for the "end_raid" field.</summary>
    public const int EndRaidFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.EndRaidCommand EndRaid {
      get { return commandCase_ == CommandOneofCase.EndRaid ? (global::Spelldawn.Protos.EndRaidCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.EndRaid;
      }
    }

    /// <summary>Field number for the "create_card" field.</summary>
    public const int CreateCardFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CreateCardCommand CreateCard {
      get { return commandCase_ == CommandOneofCase.CreateCard ? (global::Spelldawn.Protos.CreateCardCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.CreateCard;
      }
    }

    /// <summary>Field number for the "update_card" field.</summary>
    public const int UpdateCardFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.UpdateCardCommand UpdateCard {
      get { return commandCase_ == CommandOneofCase.UpdateCard ? (global::Spelldawn.Protos.UpdateCardCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.UpdateCard;
      }
    }

    /// <summary>Field number for the "move_game_object" field.</summary>
    public const int MoveGameObjectFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.MoveGameObjectCommand MoveGameObject {
      get { return commandCase_ == CommandOneofCase.MoveGameObject ? (global::Spelldawn.Protos.MoveGameObjectCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.MoveGameObject;
      }
    }

    /// <summary>Field number for the "destroy_card" field.</summary>
    public const int DestroyCardFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.DestroyCardCommand DestroyCard {
      get { return commandCase_ == CommandOneofCase.DestroyCard ? (global::Spelldawn.Protos.DestroyCardCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.DestroyCard;
      }
    }

    /// <summary>Field number for the "update_player_state" field.</summary>
    public const int UpdatePlayerStateFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.UpdatePlayerStateCommand UpdatePlayerState {
      get { return commandCase_ == CommandOneofCase.UpdatePlayerState ? (global::Spelldawn.Protos.UpdatePlayerStateCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.UpdatePlayerState;
      }
    }

    /// <summary>Field number for the "fire_projectile" field.</summary>
    public const int FireProjectileFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.FireProjectileCommand FireProjectile {
      get { return commandCase_ == CommandOneofCase.FireProjectile ? (global::Spelldawn.Protos.FireProjectileCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.FireProjectile;
      }
    }

    private object command_;
    /// <summary>Enum of possible cases for the "command" oneof.</summary>
    public enum CommandOneofCase {
      None = 0,
      RenderInterface = 1,
      RenderGame = 2,
      InitiateRaid = 3,
      EndRaid = 4,
      CreateCard = 5,
      UpdateCard = 6,
      MoveGameObject = 7,
      DestroyCard = 8,
      UpdatePlayerState = 9,
      FireProjectile = 10,
    }
    private CommandOneofCase commandCase_ = CommandOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandOneofCase CommandCase {
      get { return commandCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCommand() {
      commandCase_ = CommandOneofCase.None;
      command_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RenderInterface, other.RenderInterface)) return false;
      if (!object.Equals(RenderGame, other.RenderGame)) return false;
      if (!object.Equals(InitiateRaid, other.InitiateRaid)) return false;
      if (!object.Equals(EndRaid, other.EndRaid)) return false;
      if (!object.Equals(CreateCard, other.CreateCard)) return false;
      if (!object.Equals(UpdateCard, other.UpdateCard)) return false;
      if (!object.Equals(MoveGameObject, other.MoveGameObject)) return false;
      if (!object.Equals(DestroyCard, other.DestroyCard)) return false;
      if (!object.Equals(UpdatePlayerState, other.UpdatePlayerState)) return false;
      if (!object.Equals(FireProjectile, other.FireProjectile)) return false;
      if (CommandCase != other.CommandCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (commandCase_ == CommandOneofCase.RenderInterface) hash ^= RenderInterface.GetHashCode();
      if (commandCase_ == CommandOneofCase.RenderGame) hash ^= RenderGame.GetHashCode();
      if (commandCase_ == CommandOneofCase.InitiateRaid) hash ^= InitiateRaid.GetHashCode();
      if (commandCase_ == CommandOneofCase.EndRaid) hash ^= EndRaid.GetHashCode();
      if (commandCase_ == CommandOneofCase.CreateCard) hash ^= CreateCard.GetHashCode();
      if (commandCase_ == CommandOneofCase.UpdateCard) hash ^= UpdateCard.GetHashCode();
      if (commandCase_ == CommandOneofCase.MoveGameObject) hash ^= MoveGameObject.GetHashCode();
      if (commandCase_ == CommandOneofCase.DestroyCard) hash ^= DestroyCard.GetHashCode();
      if (commandCase_ == CommandOneofCase.UpdatePlayerState) hash ^= UpdatePlayerState.GetHashCode();
      if (commandCase_ == CommandOneofCase.FireProjectile) hash ^= FireProjectile.GetHashCode();
      hash ^= (int) commandCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (commandCase_ == CommandOneofCase.RenderInterface) {
        output.WriteRawTag(10);
        output.WriteMessage(RenderInterface);
      }
      if (commandCase_ == CommandOneofCase.RenderGame) {
        output.WriteRawTag(18);
        output.WriteMessage(RenderGame);
      }
      if (commandCase_ == CommandOneofCase.InitiateRaid) {
        output.WriteRawTag(26);
        output.WriteMessage(InitiateRaid);
      }
      if (commandCase_ == CommandOneofCase.EndRaid) {
        output.WriteRawTag(34);
        output.WriteMessage(EndRaid);
      }
      if (commandCase_ == CommandOneofCase.CreateCard) {
        output.WriteRawTag(42);
        output.WriteMessage(CreateCard);
      }
      if (commandCase_ == CommandOneofCase.UpdateCard) {
        output.WriteRawTag(50);
        output.WriteMessage(UpdateCard);
      }
      if (commandCase_ == CommandOneofCase.MoveGameObject) {
        output.WriteRawTag(58);
        output.WriteMessage(MoveGameObject);
      }
      if (commandCase_ == CommandOneofCase.DestroyCard) {
        output.WriteRawTag(66);
        output.WriteMessage(DestroyCard);
      }
      if (commandCase_ == CommandOneofCase.UpdatePlayerState) {
        output.WriteRawTag(74);
        output.WriteMessage(UpdatePlayerState);
      }
      if (commandCase_ == CommandOneofCase.FireProjectile) {
        output.WriteRawTag(82);
        output.WriteMessage(FireProjectile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (commandCase_ == CommandOneofCase.RenderInterface) {
        output.WriteRawTag(10);
        output.WriteMessage(RenderInterface);
      }
      if (commandCase_ == CommandOneofCase.RenderGame) {
        output.WriteRawTag(18);
        output.WriteMessage(RenderGame);
      }
      if (commandCase_ == CommandOneofCase.InitiateRaid) {
        output.WriteRawTag(26);
        output.WriteMessage(InitiateRaid);
      }
      if (commandCase_ == CommandOneofCase.EndRaid) {
        output.WriteRawTag(34);
        output.WriteMessage(EndRaid);
      }
      if (commandCase_ == CommandOneofCase.CreateCard) {
        output.WriteRawTag(42);
        output.WriteMessage(CreateCard);
      }
      if (commandCase_ == CommandOneofCase.UpdateCard) {
        output.WriteRawTag(50);
        output.WriteMessage(UpdateCard);
      }
      if (commandCase_ == CommandOneofCase.MoveGameObject) {
        output.WriteRawTag(58);
        output.WriteMessage(MoveGameObject);
      }
      if (commandCase_ == CommandOneofCase.DestroyCard) {
        output.WriteRawTag(66);
        output.WriteMessage(DestroyCard);
      }
      if (commandCase_ == CommandOneofCase.UpdatePlayerState) {
        output.WriteRawTag(74);
        output.WriteMessage(UpdatePlayerState);
      }
      if (commandCase_ == CommandOneofCase.FireProjectile) {
        output.WriteRawTag(82);
        output.WriteMessage(FireProjectile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (commandCase_ == CommandOneofCase.RenderInterface) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RenderInterface);
      }
      if (commandCase_ == CommandOneofCase.RenderGame) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RenderGame);
      }
      if (commandCase_ == CommandOneofCase.InitiateRaid) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitiateRaid);
      }
      if (commandCase_ == CommandOneofCase.EndRaid) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndRaid);
      }
      if (commandCase_ == CommandOneofCase.CreateCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateCard);
      }
      if (commandCase_ == CommandOneofCase.UpdateCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateCard);
      }
      if (commandCase_ == CommandOneofCase.MoveGameObject) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MoveGameObject);
      }
      if (commandCase_ == CommandOneofCase.DestroyCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DestroyCard);
      }
      if (commandCase_ == CommandOneofCase.UpdatePlayerState) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdatePlayerState);
      }
      if (commandCase_ == CommandOneofCase.FireProjectile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FireProjectile);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameCommand other) {
      if (other == null) {
        return;
      }
      switch (other.CommandCase) {
        case CommandOneofCase.RenderInterface:
          if (RenderInterface == null) {
            RenderInterface = new global::Spelldawn.Protos.RenderInterfaceCommand();
          }
          RenderInterface.MergeFrom(other.RenderInterface);
          break;
        case CommandOneofCase.RenderGame:
          if (RenderGame == null) {
            RenderGame = new global::Spelldawn.Protos.RenderGameCommand();
          }
          RenderGame.MergeFrom(other.RenderGame);
          break;
        case CommandOneofCase.InitiateRaid:
          if (InitiateRaid == null) {
            InitiateRaid = new global::Spelldawn.Protos.InitiateRaidCommand();
          }
          InitiateRaid.MergeFrom(other.InitiateRaid);
          break;
        case CommandOneofCase.EndRaid:
          if (EndRaid == null) {
            EndRaid = new global::Spelldawn.Protos.EndRaidCommand();
          }
          EndRaid.MergeFrom(other.EndRaid);
          break;
        case CommandOneofCase.CreateCard:
          if (CreateCard == null) {
            CreateCard = new global::Spelldawn.Protos.CreateCardCommand();
          }
          CreateCard.MergeFrom(other.CreateCard);
          break;
        case CommandOneofCase.UpdateCard:
          if (UpdateCard == null) {
            UpdateCard = new global::Spelldawn.Protos.UpdateCardCommand();
          }
          UpdateCard.MergeFrom(other.UpdateCard);
          break;
        case CommandOneofCase.MoveGameObject:
          if (MoveGameObject == null) {
            MoveGameObject = new global::Spelldawn.Protos.MoveGameObjectCommand();
          }
          MoveGameObject.MergeFrom(other.MoveGameObject);
          break;
        case CommandOneofCase.DestroyCard:
          if (DestroyCard == null) {
            DestroyCard = new global::Spelldawn.Protos.DestroyCardCommand();
          }
          DestroyCard.MergeFrom(other.DestroyCard);
          break;
        case CommandOneofCase.UpdatePlayerState:
          if (UpdatePlayerState == null) {
            UpdatePlayerState = new global::Spelldawn.Protos.UpdatePlayerStateCommand();
          }
          UpdatePlayerState.MergeFrom(other.UpdatePlayerState);
          break;
        case CommandOneofCase.FireProjectile:
          if (FireProjectile == null) {
            FireProjectile = new global::Spelldawn.Protos.FireProjectileCommand();
          }
          FireProjectile.MergeFrom(other.FireProjectile);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Spelldawn.Protos.RenderInterfaceCommand subBuilder = new global::Spelldawn.Protos.RenderInterfaceCommand();
            if (commandCase_ == CommandOneofCase.RenderInterface) {
              subBuilder.MergeFrom(RenderInterface);
            }
            input.ReadMessage(subBuilder);
            RenderInterface = subBuilder;
            break;
          }
          case 18: {
            global::Spelldawn.Protos.RenderGameCommand subBuilder = new global::Spelldawn.Protos.RenderGameCommand();
            if (commandCase_ == CommandOneofCase.RenderGame) {
              subBuilder.MergeFrom(RenderGame);
            }
            input.ReadMessage(subBuilder);
            RenderGame = subBuilder;
            break;
          }
          case 26: {
            global::Spelldawn.Protos.InitiateRaidCommand subBuilder = new global::Spelldawn.Protos.InitiateRaidCommand();
            if (commandCase_ == CommandOneofCase.InitiateRaid) {
              subBuilder.MergeFrom(InitiateRaid);
            }
            input.ReadMessage(subBuilder);
            InitiateRaid = subBuilder;
            break;
          }
          case 34: {
            global::Spelldawn.Protos.EndRaidCommand subBuilder = new global::Spelldawn.Protos.EndRaidCommand();
            if (commandCase_ == CommandOneofCase.EndRaid) {
              subBuilder.MergeFrom(EndRaid);
            }
            input.ReadMessage(subBuilder);
            EndRaid = subBuilder;
            break;
          }
          case 42: {
            global::Spelldawn.Protos.CreateCardCommand subBuilder = new global::Spelldawn.Protos.CreateCardCommand();
            if (commandCase_ == CommandOneofCase.CreateCard) {
              subBuilder.MergeFrom(CreateCard);
            }
            input.ReadMessage(subBuilder);
            CreateCard = subBuilder;
            break;
          }
          case 50: {
            global::Spelldawn.Protos.UpdateCardCommand subBuilder = new global::Spelldawn.Protos.UpdateCardCommand();
            if (commandCase_ == CommandOneofCase.UpdateCard) {
              subBuilder.MergeFrom(UpdateCard);
            }
            input.ReadMessage(subBuilder);
            UpdateCard = subBuilder;
            break;
          }
          case 58: {
            global::Spelldawn.Protos.MoveGameObjectCommand subBuilder = new global::Spelldawn.Protos.MoveGameObjectCommand();
            if (commandCase_ == CommandOneofCase.MoveGameObject) {
              subBuilder.MergeFrom(MoveGameObject);
            }
            input.ReadMessage(subBuilder);
            MoveGameObject = subBuilder;
            break;
          }
          case 66: {
            global::Spelldawn.Protos.DestroyCardCommand subBuilder = new global::Spelldawn.Protos.DestroyCardCommand();
            if (commandCase_ == CommandOneofCase.DestroyCard) {
              subBuilder.MergeFrom(DestroyCard);
            }
            input.ReadMessage(subBuilder);
            DestroyCard = subBuilder;
            break;
          }
          case 74: {
            global::Spelldawn.Protos.UpdatePlayerStateCommand subBuilder = new global::Spelldawn.Protos.UpdatePlayerStateCommand();
            if (commandCase_ == CommandOneofCase.UpdatePlayerState) {
              subBuilder.MergeFrom(UpdatePlayerState);
            }
            input.ReadMessage(subBuilder);
            UpdatePlayerState = subBuilder;
            break;
          }
          case 82: {
            global::Spelldawn.Protos.FireProjectileCommand subBuilder = new global::Spelldawn.Protos.FireProjectileCommand();
            if (commandCase_ == CommandOneofCase.FireProjectile) {
              subBuilder.MergeFrom(FireProjectile);
            }
            input.ReadMessage(subBuilder);
            FireProjectile = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Spelldawn.Protos.RenderInterfaceCommand subBuilder = new global::Spelldawn.Protos.RenderInterfaceCommand();
            if (commandCase_ == CommandOneofCase.RenderInterface) {
              subBuilder.MergeFrom(RenderInterface);
            }
            input.ReadMessage(subBuilder);
            RenderInterface = subBuilder;
            break;
          }
          case 18: {
            global::Spelldawn.Protos.RenderGameCommand subBuilder = new global::Spelldawn.Protos.RenderGameCommand();
            if (commandCase_ == CommandOneofCase.RenderGame) {
              subBuilder.MergeFrom(RenderGame);
            }
            input.ReadMessage(subBuilder);
            RenderGame = subBuilder;
            break;
          }
          case 26: {
            global::Spelldawn.Protos.InitiateRaidCommand subBuilder = new global::Spelldawn.Protos.InitiateRaidCommand();
            if (commandCase_ == CommandOneofCase.InitiateRaid) {
              subBuilder.MergeFrom(InitiateRaid);
            }
            input.ReadMessage(subBuilder);
            InitiateRaid = subBuilder;
            break;
          }
          case 34: {
            global::Spelldawn.Protos.EndRaidCommand subBuilder = new global::Spelldawn.Protos.EndRaidCommand();
            if (commandCase_ == CommandOneofCase.EndRaid) {
              subBuilder.MergeFrom(EndRaid);
            }
            input.ReadMessage(subBuilder);
            EndRaid = subBuilder;
            break;
          }
          case 42: {
            global::Spelldawn.Protos.CreateCardCommand subBuilder = new global::Spelldawn.Protos.CreateCardCommand();
            if (commandCase_ == CommandOneofCase.CreateCard) {
              subBuilder.MergeFrom(CreateCard);
            }
            input.ReadMessage(subBuilder);
            CreateCard = subBuilder;
            break;
          }
          case 50: {
            global::Spelldawn.Protos.UpdateCardCommand subBuilder = new global::Spelldawn.Protos.UpdateCardCommand();
            if (commandCase_ == CommandOneofCase.UpdateCard) {
              subBuilder.MergeFrom(UpdateCard);
            }
            input.ReadMessage(subBuilder);
            UpdateCard = subBuilder;
            break;
          }
          case 58: {
            global::Spelldawn.Protos.MoveGameObjectCommand subBuilder = new global::Spelldawn.Protos.MoveGameObjectCommand();
            if (commandCase_ == CommandOneofCase.MoveGameObject) {
              subBuilder.MergeFrom(MoveGameObject);
            }
            input.ReadMessage(subBuilder);
            MoveGameObject = subBuilder;
            break;
          }
          case 66: {
            global::Spelldawn.Protos.DestroyCardCommand subBuilder = new global::Spelldawn.Protos.DestroyCardCommand();
            if (commandCase_ == CommandOneofCase.DestroyCard) {
              subBuilder.MergeFrom(DestroyCard);
            }
            input.ReadMessage(subBuilder);
            DestroyCard = subBuilder;
            break;
          }
          case 74: {
            global::Spelldawn.Protos.UpdatePlayerStateCommand subBuilder = new global::Spelldawn.Protos.UpdatePlayerStateCommand();
            if (commandCase_ == CommandOneofCase.UpdatePlayerState) {
              subBuilder.MergeFrom(UpdatePlayerState);
            }
            input.ReadMessage(subBuilder);
            UpdatePlayerState = subBuilder;
            break;
          }
          case 82: {
            global::Spelldawn.Protos.FireProjectileCommand subBuilder = new global::Spelldawn.Protos.FireProjectileCommand();
            if (commandCase_ == CommandOneofCase.FireProjectile) {
              subBuilder.MergeFrom(FireProjectile);
            }
            input.ReadMessage(subBuilder);
            FireProjectile = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CommandList : pb::IMessage<CommandList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CommandList> _parser = new pb::MessageParser<CommandList>(() => new CommandList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.SpelldawnReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandList(CommandList other) : this() {
      commands_ = other.commands_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandList Clone() {
      return new CommandList(this);
    }

    /// <summary>Field number for the "commands" field.</summary>
    public const int CommandsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Spelldawn.Protos.GameCommand> _repeated_commands_codec
        = pb::FieldCodec.ForMessage(10, global::Spelldawn.Protos.GameCommand.Parser);
    private readonly pbc::RepeatedField<global::Spelldawn.Protos.GameCommand> commands_ = new pbc::RepeatedField<global::Spelldawn.Protos.GameCommand>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spelldawn.Protos.GameCommand> Commands {
      get { return commands_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!commands_.Equals(other.commands_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= commands_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      commands_.WriteTo(output, _repeated_commands_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      commands_.WriteTo(ref output, _repeated_commands_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += commands_.CalculateSize(_repeated_commands_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandList other) {
      if (other == null) {
        return;
      }
      commands_.Add(other.commands_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            commands_.AddEntriesFrom(input, _repeated_commands_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            commands_.AddEntriesFrom(ref input, _repeated_commands_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
