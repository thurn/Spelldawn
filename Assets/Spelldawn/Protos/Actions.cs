// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: actions.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spelldawn.Protos {

  /// <summary>Holder for reflection information generated from actions.proto</summary>
  public static partial class ActionsReflection {

    #region Descriptor
    /// <summary>File descriptor for actions.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ActionsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1hY3Rpb25zLnByb3RvEgJzZBoVZ2FtZV9wcmltaXRpdmVzLnByb3RvIh0K",
            "DkRlYnVnTG9nQWN0aW9uEgsKA2xvZxgBIAEoCSIQCg5HYWluTWFuYUFjdGlv",
            "biIQCg5EcmF3Q2FyZEFjdGlvbiIsCg1MZXZlbFVwQWN0aW9uEhsKB3Jvb21f",
            "aWQYASABKAsyCi5zZC5Sb29tSWQiKQoKUmFpZEFjdGlvbhIbCgdyb29tX2lk",
            "GAEgASgLMgouc2QuUm9vbUlkIlMKDlBsYXlDYXJkQWN0aW9uEhsKB2NhcmRf",
            "aWQYASABKAsyCi5zZC5DYXJkSWQSJAoMZmlyc3RfdGFyZ2V0GAIgASgLMg4u",
            "c2QuQ2FyZFRhcmdldCIPCg1Db25jZWRlQWN0aW9uIqcCCgpHYW1lQWN0aW9u",
            "EicKCWRlYnVnX2xvZxgBIAEoCzISLnNkLkRlYnVnTG9nQWN0aW9uSAASJwoJ",
            "Z2Fpbl9tYW5hGAIgASgLMhIuc2QuR2Fpbk1hbmFBY3Rpb25IABInCglkcmF3",
            "X2NhcmQYAyABKAsyEi5zZC5EcmF3Q2FyZEFjdGlvbkgAEiUKCGxldmVsX3Vw",
            "GAQgASgLMhEuc2QuTGV2ZWxVcEFjdGlvbkgAEh4KBHJhaWQYBSABKAsyDi5z",
            "ZC5SYWlkQWN0aW9uSAASJwoJcGxheV9jYXJkGAYgASgLMhIuc2QuUGxheUNh",
            "cmRBY3Rpb25IABIkCgdjb25jZWRlGAcgASgLMhEuc2QuQ29uY2VkZUFjdGlv",
            "bkgAQggKBmFjdGlvbkITqgIQU3BlbGxkYXduLlByb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spelldawn.Protos.GamePrimitivesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.DebugLogAction), global::Spelldawn.Protos.DebugLogAction.Parser, new[]{ "Log" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.GainManaAction), global::Spelldawn.Protos.GainManaAction.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.DrawCardAction), global::Spelldawn.Protos.DrawCardAction.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.LevelUpAction), global::Spelldawn.Protos.LevelUpAction.Parser, new[]{ "RoomId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.RaidAction), global::Spelldawn.Protos.RaidAction.Parser, new[]{ "RoomId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.PlayCardAction), global::Spelldawn.Protos.PlayCardAction.Parser, new[]{ "CardId", "FirstTarget" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.ConcedeAction), global::Spelldawn.Protos.ConcedeAction.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spelldawn.Protos.GameAction), global::Spelldawn.Protos.GameAction.Parser, new[]{ "DebugLog", "GainMana", "DrawCard", "LevelUp", "Raid", "PlayCard", "Concede" }, new[]{ "Action" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DebugLogAction : pb::IMessage<DebugLogAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DebugLogAction> _parser = new pb::MessageParser<DebugLogAction>(() => new DebugLogAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DebugLogAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.ActionsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugLogAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugLogAction(DebugLogAction other) : this() {
      log_ = other.log_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugLogAction Clone() {
      return new DebugLogAction(this);
    }

    /// <summary>Field number for the "log" field.</summary>
    public const int LogFieldNumber = 1;
    private string log_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Log {
      get { return log_; }
      set {
        log_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DebugLogAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DebugLogAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Log != other.Log) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Log.Length != 0) hash ^= Log.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Log.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Log);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Log.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Log);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Log.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Log);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DebugLogAction other) {
      if (other == null) {
        return;
      }
      if (other.Log.Length != 0) {
        Log = other.Log;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Log = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Log = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Spend an action to gain 1 mana.
  ///
  /// Optimistic: Mana is added immediately.
  /// </summary>
  public sealed partial class GainManaAction : pb::IMessage<GainManaAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GainManaAction> _parser = new pb::MessageParser<GainManaAction>(() => new GainManaAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GainManaAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.ActionsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GainManaAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GainManaAction(GainManaAction other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GainManaAction Clone() {
      return new GainManaAction(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GainManaAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GainManaAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GainManaAction other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Spend an action to draw a card.
  ///
  /// Optimistic: Face-down card animates to reveal area.
  /// </summary>
  public sealed partial class DrawCardAction : pb::IMessage<DrawCardAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DrawCardAction> _parser = new pb::MessageParser<DrawCardAction>(() => new DrawCardAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrawCardAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.ActionsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawCardAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawCardAction(DrawCardAction other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawCardAction Clone() {
      return new DrawCardAction(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrawCardAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrawCardAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrawCardAction other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Spend an action to place a level counter on a room.
  ///
  /// Optimistic: Counter is added immediately
  /// </summary>
  public sealed partial class LevelUpAction : pb::IMessage<LevelUpAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelUpAction> _parser = new pb::MessageParser<LevelUpAction>(() => new LevelUpAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelUpAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.ActionsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelUpAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelUpAction(LevelUpAction other) : this() {
      roomId_ = other.roomId_ != null ? other.roomId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelUpAction Clone() {
      return new LevelUpAction(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private global::Spelldawn.Protos.RoomId roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RoomId RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelUpAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelUpAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomId, other.RoomId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomId_ != null) hash ^= RoomId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (roomId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (roomId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelUpAction other) {
      if (other == null) {
        return;
      }
      if (other.roomId_ != null) {
        if (roomId_ == null) {
          RoomId = new global::Spelldawn.Protos.RoomId();
        }
        RoomId.MergeFrom(other.RoomId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomId_ == null) {
              RoomId = new global::Spelldawn.Protos.RoomId();
            }
            input.ReadMessage(RoomId);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (roomId_ == null) {
              RoomId = new global::Spelldawn.Protos.RoomId();
            }
            input.ReadMessage(RoomId);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Spend an action to initiate a raid on one of the overlord's rooms
  ///
  /// Optimistic: Raid start animation plays
  /// </summary>
  public sealed partial class RaidAction : pb::IMessage<RaidAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RaidAction> _parser = new pb::MessageParser<RaidAction>(() => new RaidAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RaidAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.ActionsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaidAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaidAction(RaidAction other) : this() {
      roomId_ = other.roomId_ != null ? other.roomId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaidAction Clone() {
      return new RaidAction(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private global::Spelldawn.Protos.RoomId roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RoomId RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RaidAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RaidAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomId, other.RoomId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomId_ != null) hash ^= RoomId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (roomId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (roomId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RaidAction other) {
      if (other == null) {
        return;
      }
      if (other.roomId_ != null) {
        if (roomId_ == null) {
          RoomId = new global::Spelldawn.Protos.RoomId();
        }
        RoomId.MergeFrom(other.RoomId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomId_ == null) {
              RoomId = new global::Spelldawn.Protos.RoomId();
            }
            input.ReadMessage(RoomId);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (roomId_ == null) {
              RoomId = new global::Spelldawn.Protos.RoomId();
            }
            input.ReadMessage(RoomId);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Spend an action to play a card from hand.
  ///
  /// Optimistic:
  ///   - Mana and action cost is spent immediately, and 'can play' values for
  ///     other cards in hand are optimistically updated
  ///   - Other costs like 'sacrifice an artifact' are not optimistic and are
  ///     handled like choices
  ///   - Targeted cards select their *first* valid target (cards, rooms, players)
  ///     optimistically. If additional targets are required, they're not handled
  ///     optimistically, and this play pattern should possibly be avoided.
  ///   - Cards that require a choice to be made before resolving do not display
  ///     the options optimistically, instead they animate to the reveal card area
  ///   - Item cards which don't require a choice to be made or target simply
  ///     animate into the play area optimistically
  ///   - Spell cards animate to the reveal card area and wait for their effects to be
  ///     applied
  ///   - Minion and Project cards animate to their selected room optimistically
  /// </summary>
  public sealed partial class PlayCardAction : pb::IMessage<PlayCardAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayCardAction> _parser = new pb::MessageParser<PlayCardAction>(() => new PlayCardAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayCardAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.ActionsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCardAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCardAction(PlayCardAction other) : this() {
      cardId_ = other.cardId_ != null ? other.cardId_.Clone() : null;
      firstTarget_ = other.firstTarget_ != null ? other.firstTarget_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCardAction Clone() {
      return new PlayCardAction(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private global::Spelldawn.Protos.CardId cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardId CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "first_target" field.</summary>
    public const int FirstTargetFieldNumber = 2;
    private global::Spelldawn.Protos.CardTarget firstTarget_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.CardTarget FirstTarget {
      get { return firstTarget_; }
      set {
        firstTarget_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayCardAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayCardAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CardId, other.CardId)) return false;
      if (!object.Equals(FirstTarget, other.FirstTarget)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cardId_ != null) hash ^= CardId.GetHashCode();
      if (firstTarget_ != null) hash ^= FirstTarget.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (cardId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardId);
      }
      if (firstTarget_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FirstTarget);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (cardId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardId);
      }
      if (firstTarget_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FirstTarget);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cardId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardId);
      }
      if (firstTarget_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FirstTarget);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayCardAction other) {
      if (other == null) {
        return;
      }
      if (other.cardId_ != null) {
        if (cardId_ == null) {
          CardId = new global::Spelldawn.Protos.CardId();
        }
        CardId.MergeFrom(other.CardId);
      }
      if (other.firstTarget_ != null) {
        if (firstTarget_ == null) {
          FirstTarget = new global::Spelldawn.Protos.CardTarget();
        }
        FirstTarget.MergeFrom(other.FirstTarget);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cardId_ == null) {
              CardId = new global::Spelldawn.Protos.CardId();
            }
            input.ReadMessage(CardId);
            break;
          }
          case 18: {
            if (firstTarget_ == null) {
              FirstTarget = new global::Spelldawn.Protos.CardTarget();
            }
            input.ReadMessage(FirstTarget);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (cardId_ == null) {
              CardId = new global::Spelldawn.Protos.CardId();
            }
            input.ReadMessage(CardId);
            break;
          }
          case 18: {
            if (firstTarget_ == null) {
              FirstTarget = new global::Spelldawn.Protos.CardTarget();
            }
            input.ReadMessage(FirstTarget);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Concede the game.
  ///
  /// Optimistic: Concede animation.
  /// </summary>
  public sealed partial class ConcedeAction : pb::IMessage<ConcedeAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConcedeAction> _parser = new pb::MessageParser<ConcedeAction>(() => new ConcedeAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConcedeAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.ActionsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConcedeAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConcedeAction(ConcedeAction other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConcedeAction Clone() {
      return new ConcedeAction(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConcedeAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConcedeAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConcedeAction other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Possible game actions taken by the user.
  ///
  /// Actions have an associated 'optimistic' behavior to display while waiting
  /// for a server response. The client should not send multiple actions at the
  /// same time -- interaction should be disabled while an action is pending.
  /// </summary>
  public sealed partial class GameAction : pb::IMessage<GameAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameAction> _parser = new pb::MessageParser<GameAction>(() => new GameAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spelldawn.Protos.ActionsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameAction(GameAction other) : this() {
      switch (other.ActionCase) {
        case ActionOneofCase.DebugLog:
          DebugLog = other.DebugLog.Clone();
          break;
        case ActionOneofCase.GainMana:
          GainMana = other.GainMana.Clone();
          break;
        case ActionOneofCase.DrawCard:
          DrawCard = other.DrawCard.Clone();
          break;
        case ActionOneofCase.LevelUp:
          LevelUp = other.LevelUp.Clone();
          break;
        case ActionOneofCase.Raid:
          Raid = other.Raid.Clone();
          break;
        case ActionOneofCase.PlayCard:
          PlayCard = other.PlayCard.Clone();
          break;
        case ActionOneofCase.Concede:
          Concede = other.Concede.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameAction Clone() {
      return new GameAction(this);
    }

    /// <summary>Field number for the "debug_log" field.</summary>
    public const int DebugLogFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.DebugLogAction DebugLog {
      get { return actionCase_ == ActionOneofCase.DebugLog ? (global::Spelldawn.Protos.DebugLogAction) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.DebugLog;
      }
    }

    /// <summary>Field number for the "gain_mana" field.</summary>
    public const int GainManaFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.GainManaAction GainMana {
      get { return actionCase_ == ActionOneofCase.GainMana ? (global::Spelldawn.Protos.GainManaAction) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.GainMana;
      }
    }

    /// <summary>Field number for the "draw_card" field.</summary>
    public const int DrawCardFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.DrawCardAction DrawCard {
      get { return actionCase_ == ActionOneofCase.DrawCard ? (global::Spelldawn.Protos.DrawCardAction) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.DrawCard;
      }
    }

    /// <summary>Field number for the "level_up" field.</summary>
    public const int LevelUpFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.LevelUpAction LevelUp {
      get { return actionCase_ == ActionOneofCase.LevelUp ? (global::Spelldawn.Protos.LevelUpAction) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.LevelUp;
      }
    }

    /// <summary>Field number for the "raid" field.</summary>
    public const int RaidFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.RaidAction Raid {
      get { return actionCase_ == ActionOneofCase.Raid ? (global::Spelldawn.Protos.RaidAction) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Raid;
      }
    }

    /// <summary>Field number for the "play_card" field.</summary>
    public const int PlayCardFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.PlayCardAction PlayCard {
      get { return actionCase_ == ActionOneofCase.PlayCard ? (global::Spelldawn.Protos.PlayCardAction) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.PlayCard;
      }
    }

    /// <summary>Field number for the "concede" field.</summary>
    public const int ConcedeFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spelldawn.Protos.ConcedeAction Concede {
      get { return actionCase_ == ActionOneofCase.Concede ? (global::Spelldawn.Protos.ConcedeAction) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Concede;
      }
    }

    private object action_;
    /// <summary>Enum of possible cases for the "action" oneof.</summary>
    public enum ActionOneofCase {
      None = 0,
      DebugLog = 1,
      GainMana = 2,
      DrawCard = 3,
      LevelUp = 4,
      Raid = 5,
      PlayCard = 6,
      Concede = 7,
    }
    private ActionOneofCase actionCase_ = ActionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionOneofCase ActionCase {
      get { return actionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      actionCase_ = ActionOneofCase.None;
      action_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DebugLog, other.DebugLog)) return false;
      if (!object.Equals(GainMana, other.GainMana)) return false;
      if (!object.Equals(DrawCard, other.DrawCard)) return false;
      if (!object.Equals(LevelUp, other.LevelUp)) return false;
      if (!object.Equals(Raid, other.Raid)) return false;
      if (!object.Equals(PlayCard, other.PlayCard)) return false;
      if (!object.Equals(Concede, other.Concede)) return false;
      if (ActionCase != other.ActionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (actionCase_ == ActionOneofCase.DebugLog) hash ^= DebugLog.GetHashCode();
      if (actionCase_ == ActionOneofCase.GainMana) hash ^= GainMana.GetHashCode();
      if (actionCase_ == ActionOneofCase.DrawCard) hash ^= DrawCard.GetHashCode();
      if (actionCase_ == ActionOneofCase.LevelUp) hash ^= LevelUp.GetHashCode();
      if (actionCase_ == ActionOneofCase.Raid) hash ^= Raid.GetHashCode();
      if (actionCase_ == ActionOneofCase.PlayCard) hash ^= PlayCard.GetHashCode();
      if (actionCase_ == ActionOneofCase.Concede) hash ^= Concede.GetHashCode();
      hash ^= (int) actionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (actionCase_ == ActionOneofCase.DebugLog) {
        output.WriteRawTag(10);
        output.WriteMessage(DebugLog);
      }
      if (actionCase_ == ActionOneofCase.GainMana) {
        output.WriteRawTag(18);
        output.WriteMessage(GainMana);
      }
      if (actionCase_ == ActionOneofCase.DrawCard) {
        output.WriteRawTag(26);
        output.WriteMessage(DrawCard);
      }
      if (actionCase_ == ActionOneofCase.LevelUp) {
        output.WriteRawTag(34);
        output.WriteMessage(LevelUp);
      }
      if (actionCase_ == ActionOneofCase.Raid) {
        output.WriteRawTag(42);
        output.WriteMessage(Raid);
      }
      if (actionCase_ == ActionOneofCase.PlayCard) {
        output.WriteRawTag(50);
        output.WriteMessage(PlayCard);
      }
      if (actionCase_ == ActionOneofCase.Concede) {
        output.WriteRawTag(58);
        output.WriteMessage(Concede);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (actionCase_ == ActionOneofCase.DebugLog) {
        output.WriteRawTag(10);
        output.WriteMessage(DebugLog);
      }
      if (actionCase_ == ActionOneofCase.GainMana) {
        output.WriteRawTag(18);
        output.WriteMessage(GainMana);
      }
      if (actionCase_ == ActionOneofCase.DrawCard) {
        output.WriteRawTag(26);
        output.WriteMessage(DrawCard);
      }
      if (actionCase_ == ActionOneofCase.LevelUp) {
        output.WriteRawTag(34);
        output.WriteMessage(LevelUp);
      }
      if (actionCase_ == ActionOneofCase.Raid) {
        output.WriteRawTag(42);
        output.WriteMessage(Raid);
      }
      if (actionCase_ == ActionOneofCase.PlayCard) {
        output.WriteRawTag(50);
        output.WriteMessage(PlayCard);
      }
      if (actionCase_ == ActionOneofCase.Concede) {
        output.WriteRawTag(58);
        output.WriteMessage(Concede);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (actionCase_ == ActionOneofCase.DebugLog) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DebugLog);
      }
      if (actionCase_ == ActionOneofCase.GainMana) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GainMana);
      }
      if (actionCase_ == ActionOneofCase.DrawCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DrawCard);
      }
      if (actionCase_ == ActionOneofCase.LevelUp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelUp);
      }
      if (actionCase_ == ActionOneofCase.Raid) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Raid);
      }
      if (actionCase_ == ActionOneofCase.PlayCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayCard);
      }
      if (actionCase_ == ActionOneofCase.Concede) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Concede);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameAction other) {
      if (other == null) {
        return;
      }
      switch (other.ActionCase) {
        case ActionOneofCase.DebugLog:
          if (DebugLog == null) {
            DebugLog = new global::Spelldawn.Protos.DebugLogAction();
          }
          DebugLog.MergeFrom(other.DebugLog);
          break;
        case ActionOneofCase.GainMana:
          if (GainMana == null) {
            GainMana = new global::Spelldawn.Protos.GainManaAction();
          }
          GainMana.MergeFrom(other.GainMana);
          break;
        case ActionOneofCase.DrawCard:
          if (DrawCard == null) {
            DrawCard = new global::Spelldawn.Protos.DrawCardAction();
          }
          DrawCard.MergeFrom(other.DrawCard);
          break;
        case ActionOneofCase.LevelUp:
          if (LevelUp == null) {
            LevelUp = new global::Spelldawn.Protos.LevelUpAction();
          }
          LevelUp.MergeFrom(other.LevelUp);
          break;
        case ActionOneofCase.Raid:
          if (Raid == null) {
            Raid = new global::Spelldawn.Protos.RaidAction();
          }
          Raid.MergeFrom(other.Raid);
          break;
        case ActionOneofCase.PlayCard:
          if (PlayCard == null) {
            PlayCard = new global::Spelldawn.Protos.PlayCardAction();
          }
          PlayCard.MergeFrom(other.PlayCard);
          break;
        case ActionOneofCase.Concede:
          if (Concede == null) {
            Concede = new global::Spelldawn.Protos.ConcedeAction();
          }
          Concede.MergeFrom(other.Concede);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Spelldawn.Protos.DebugLogAction subBuilder = new global::Spelldawn.Protos.DebugLogAction();
            if (actionCase_ == ActionOneofCase.DebugLog) {
              subBuilder.MergeFrom(DebugLog);
            }
            input.ReadMessage(subBuilder);
            DebugLog = subBuilder;
            break;
          }
          case 18: {
            global::Spelldawn.Protos.GainManaAction subBuilder = new global::Spelldawn.Protos.GainManaAction();
            if (actionCase_ == ActionOneofCase.GainMana) {
              subBuilder.MergeFrom(GainMana);
            }
            input.ReadMessage(subBuilder);
            GainMana = subBuilder;
            break;
          }
          case 26: {
            global::Spelldawn.Protos.DrawCardAction subBuilder = new global::Spelldawn.Protos.DrawCardAction();
            if (actionCase_ == ActionOneofCase.DrawCard) {
              subBuilder.MergeFrom(DrawCard);
            }
            input.ReadMessage(subBuilder);
            DrawCard = subBuilder;
            break;
          }
          case 34: {
            global::Spelldawn.Protos.LevelUpAction subBuilder = new global::Spelldawn.Protos.LevelUpAction();
            if (actionCase_ == ActionOneofCase.LevelUp) {
              subBuilder.MergeFrom(LevelUp);
            }
            input.ReadMessage(subBuilder);
            LevelUp = subBuilder;
            break;
          }
          case 42: {
            global::Spelldawn.Protos.RaidAction subBuilder = new global::Spelldawn.Protos.RaidAction();
            if (actionCase_ == ActionOneofCase.Raid) {
              subBuilder.MergeFrom(Raid);
            }
            input.ReadMessage(subBuilder);
            Raid = subBuilder;
            break;
          }
          case 50: {
            global::Spelldawn.Protos.PlayCardAction subBuilder = new global::Spelldawn.Protos.PlayCardAction();
            if (actionCase_ == ActionOneofCase.PlayCard) {
              subBuilder.MergeFrom(PlayCard);
            }
            input.ReadMessage(subBuilder);
            PlayCard = subBuilder;
            break;
          }
          case 58: {
            global::Spelldawn.Protos.ConcedeAction subBuilder = new global::Spelldawn.Protos.ConcedeAction();
            if (actionCase_ == ActionOneofCase.Concede) {
              subBuilder.MergeFrom(Concede);
            }
            input.ReadMessage(subBuilder);
            Concede = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Spelldawn.Protos.DebugLogAction subBuilder = new global::Spelldawn.Protos.DebugLogAction();
            if (actionCase_ == ActionOneofCase.DebugLog) {
              subBuilder.MergeFrom(DebugLog);
            }
            input.ReadMessage(subBuilder);
            DebugLog = subBuilder;
            break;
          }
          case 18: {
            global::Spelldawn.Protos.GainManaAction subBuilder = new global::Spelldawn.Protos.GainManaAction();
            if (actionCase_ == ActionOneofCase.GainMana) {
              subBuilder.MergeFrom(GainMana);
            }
            input.ReadMessage(subBuilder);
            GainMana = subBuilder;
            break;
          }
          case 26: {
            global::Spelldawn.Protos.DrawCardAction subBuilder = new global::Spelldawn.Protos.DrawCardAction();
            if (actionCase_ == ActionOneofCase.DrawCard) {
              subBuilder.MergeFrom(DrawCard);
            }
            input.ReadMessage(subBuilder);
            DrawCard = subBuilder;
            break;
          }
          case 34: {
            global::Spelldawn.Protos.LevelUpAction subBuilder = new global::Spelldawn.Protos.LevelUpAction();
            if (actionCase_ == ActionOneofCase.LevelUp) {
              subBuilder.MergeFrom(LevelUp);
            }
            input.ReadMessage(subBuilder);
            LevelUp = subBuilder;
            break;
          }
          case 42: {
            global::Spelldawn.Protos.RaidAction subBuilder = new global::Spelldawn.Protos.RaidAction();
            if (actionCase_ == ActionOneofCase.Raid) {
              subBuilder.MergeFrom(Raid);
            }
            input.ReadMessage(subBuilder);
            Raid = subBuilder;
            break;
          }
          case 50: {
            global::Spelldawn.Protos.PlayCardAction subBuilder = new global::Spelldawn.Protos.PlayCardAction();
            if (actionCase_ == ActionOneofCase.PlayCard) {
              subBuilder.MergeFrom(PlayCard);
            }
            input.ReadMessage(subBuilder);
            PlayCard = subBuilder;
            break;
          }
          case 58: {
            global::Spelldawn.Protos.ConcedeAction subBuilder = new global::Spelldawn.Protos.ConcedeAction();
            if (actionCase_ == ActionOneofCase.Concede) {
              subBuilder.MergeFrom(Concede);
            }
            input.ReadMessage(subBuilder);
            Concede = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
